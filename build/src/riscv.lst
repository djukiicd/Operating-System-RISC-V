GAS LISTING /tmp/ccWMkwFO.s 			page 1


   1              		.file	"riscv.cpp"
   2              		.option pic
   3              		.option norelax
   4              		.text
   5              	.Ltext0:
   6              		.align	2
   7              		.globl	_ZN5Riscv10popSppSpieEv
   9              	_ZN5Riscv10popSppSpieEv:
  10              	.LFB16:
  11              		.file 1 "src/riscv.cpp"
   1:src/riscv.cpp **** //
   2:src/riscv.cpp **** // Created by marko on 20.4.22..
   3:src/riscv.cpp **** //
   4:src/riscv.cpp **** 
   5:src/riscv.cpp **** #include "../h/riscv.hpp"
   6:src/riscv.cpp **** #include "../lib/console.h"
   7:src/riscv.cpp **** #include "../h/print.hpp"
   8:src/riscv.cpp **** #include "../lib/mem.h"
   9:src/riscv.cpp **** 
  10:src/riscv.cpp **** using Body = void (*)(void *);
  11:src/riscv.cpp **** 
  12:src/riscv.cpp **** void Riscv::popSppSpie()
  13:src/riscv.cpp **** {
  12              		.loc 1 13 1
  13              		.cfi_startproc
  14 0000 130101FF 		addi	sp,sp,-16
  15              		.cfi_def_cfa_offset 16
  16 0004 23348100 		sd	s0,8(sp)
  17              		.cfi_offset 8, -8
  18 0008 13040101 		addi	s0,sp,16
  19              		.cfi_def_cfa 8, 0
  14:src/riscv.cpp ****     __asm__ volatile ("csrw sepc, ra"); // sepc <=ra
  20              		.loc 1 14 5
  21              		.loc 1 14 39 is_stmt 0
  22              	#APP
  23              	# 14 "src/riscv.cpp" 1
  15              	    __asm__ volatile ("sret");
  24              		csrw sepc, ra
  25              	# 0 "" 2
  26              		.loc 1 15 5 is_stmt 1
  27              		.loc 1 15 30 is_stmt 0
  28              	# 15 "src/riscv.cpp" 1
  16              	}
  29              		sret
  30              	# 0 "" 2
  31              		.loc 1 16 1
  32              	#NO_APP
  33 0014 03348100 		ld	s0,8(sp)
  34              		.cfi_restore 8
  35              		.cfi_def_cfa 2, 16
  36 0018 13010101 		addi	sp,sp,16
  37              		.cfi_def_cfa_offset 0
  38 001c 67800000 		jr	ra
  39              		.cfi_endproc
  40              	.LFE16:
  42              		.section	.rodata.str1.8,"aMS",@progbits,1
  43              		.align	3
GAS LISTING /tmp/ccWMkwFO.s 			page 2


  44              	.LC0:
  45 0000 496C6567 		.string	"Ilegalna instrukcija\n:"
  45      616C6E61 
  45      20696E73 
  45      7472756B 
  45      63696A61 
  46 0017 00       		.align	3
  47              	.LC1:
  48 0018 4E65646F 		.string	"Nedozvolena adresa citanja\n"
  48      7A766F6C 
  48      656E6120 
  48      61647265 
  48      73612063 
  49 0034 00000000 		.align	3
  50              	.LC2:
  51 0038 4E65646F 		.string	"Nedozvolena adresa upisa\n"
  51      7A766F6C 
  51      656E6120 
  51      61647265 
  51      73612075 
  52 0052 00000000 		.align	3
  52      0000
  53              	.LC3:
  54 0058 73636175 		.string	"scause: "
  54      73653A20 
  54      00
  55 0061 00000000 		.align	3
  55      000000
  56              	.LC4:
  57 0068 0A00     		.string	"\n"
  58 006a 00000000 		.align	3
  58      0000
  59              	.LC5:
  60 0070 73657063 		.string	"sepc: "
  60      3A2000
  61 0077 00       		.align	3
  62              	.LC6:
  63 0078 73747661 		.string	"stval: "
  63      6C3A2000 
  64              		.text
  65              		.align	2
  66              		.globl	_ZN5Riscv13handleSyscallEv
  68              	_ZN5Riscv13handleSyscallEv:
  69              	.LFB17:
  17:src/riscv.cpp **** 
  18:src/riscv.cpp **** void Riscv::handleSyscall() {
  70              		.loc 1 18 29 is_stmt 1
  71              		.cfi_startproc
  72 0020 130101FA 		addi	sp,sp,-96
  73              		.cfi_def_cfa_offset 96
  74 0024 233C1104 		sd	ra,88(sp)
  75 0028 23388104 		sd	s0,80(sp)
  76 002c 23349104 		sd	s1,72(sp)
  77              		.cfi_offset 1, -8
  78              		.cfi_offset 8, -16
  79              		.cfi_offset 9, -24
  80 0030 13040106 		addi	s0,sp,96
GAS LISTING /tmp/ccWMkwFO.s 			page 3


  81              		.cfi_def_cfa 8, 0
  19:src/riscv.cpp **** 
  20:src/riscv.cpp ****     //uzimam parametre
  21:src/riscv.cpp ****     uint64 a0, a1, a2, a3, a4;
  82              		.loc 1 21 5
  22:src/riscv.cpp ****     __asm__ volatile("mv %0, a0" : "=r"(a0));
  83              		.loc 1 22 5
  84              		.loc 1 22 45 is_stmt 0
  85              	#APP
  86              	# 22 "src/riscv.cpp" 1
  23              	    __asm__ volatile("mv %0, a1" : "=r"(a1));
  87              		mv a5, a0
  88              	# 0 "" 2
  89              	.LVL0:
  90              		.loc 1 23 5 is_stmt 1
  91              		.loc 1 23 45 is_stmt 0
  92              	# 23 "src/riscv.cpp" 1
  24              	    __asm__ volatile("mv %0, a2" : "=r"(a2));
  93              		mv a5, a1
  94              	# 0 "" 2
  95              	.LVL1:
  96              		.loc 1 24 5 is_stmt 1
  97              		.loc 1 24 45 is_stmt 0
  98              	# 24 "src/riscv.cpp" 1
  25              	    __asm__ volatile("mv %0, a4" : "=r"(a3));
  99              		mv a5, a2
 100              	# 0 "" 2
 101              	.LVL2:
 102              		.loc 1 25 5 is_stmt 1
 103              		.loc 1 25 45 is_stmt 0
 104              	# 25 "src/riscv.cpp" 1
  26              	    __asm__ volatile("mv %0, a4" : "=r"(a4));
 105              		mv a5, a4
 106              	# 0 "" 2
 107              	.LVL3:
 108              		.loc 1 26 5 is_stmt 1
 109              		.loc 1 26 45 is_stmt 0
 110              	# 26 "src/riscv.cpp" 1
  27              	
 111              		mv a5, a4
 112              	# 0 "" 2
 113              	.LVL4:
  28:src/riscv.cpp ****     uint64  scause = r_scause();
 114              		.loc 1 28 5 is_stmt 1
 115              	#NO_APP
 116              	.LBB30:
 117              	.LBB31:
 118              		.file 2 "src/../h/riscv.hpp"
   1:src/../h/riscv.hpp **** //
   2:src/../h/riscv.hpp **** // Created by marko on 20.4.22..
   3:src/../h/riscv.hpp **** //
   4:src/../h/riscv.hpp **** 
   5:src/../h/riscv.hpp **** #ifndef OS_PROJECT_BASE_RISCV_HPP
   6:src/../h/riscv.hpp **** #define OS_PROJECT_BASE_RISCV_HPP
   7:src/../h/riscv.hpp **** 
   8:src/../h/riscv.hpp **** #include "../lib/hw.h"
   9:src/../h/riscv.hpp **** //inline fje - bitno: nece se generisati masinski kod za poziv fje na mestu koriscenja u cpp kodu
GAS LISTING /tmp/ccWMkwFO.s 			page 4


  10:src/../h/riscv.hpp **** //ako imamo poziv u ra reg ce biti upisana adresa na koju prog treba da se vrati (sa inline nema to
  11:src/../h/riscv.hpp **** class Riscv
  12:src/../h/riscv.hpp **** {
  13:src/../h/riscv.hpp **** public:
  14:src/../h/riscv.hpp **** 
  15:src/../h/riscv.hpp ****     // pop sstatus.spp and sstatus.spie bits (has to be a non inline function)
  16:src/../h/riscv.hpp ****     static void popSppSpie();
  17:src/../h/riscv.hpp **** 
  18:src/../h/riscv.hpp ****     // push x3..x31 registers onto stack
  19:src/../h/riscv.hpp ****     static void pushRegisters();
  20:src/../h/riscv.hpp **** 
  21:src/../h/riscv.hpp ****     // pop x3..x31 registers onto stack
  22:src/../h/riscv.hpp ****     static void popRegisters();
  23:src/../h/riscv.hpp ****     //supervisor trap
  24:src/../h/riscv.hpp ****     static void supervisorTrap();
  25:src/../h/riscv.hpp **** 
  26:src/../h/riscv.hpp **** 
  27:src/../h/riscv.hpp ****     // read register scause
  28:src/../h/riscv.hpp ****     static uint64 r_scause();
  29:src/../h/riscv.hpp **** 
  30:src/../h/riscv.hpp ****     // write register scause
  31:src/../h/riscv.hpp ****     static void w_scause(uint64 scause);
  32:src/../h/riscv.hpp **** 
  33:src/../h/riscv.hpp ****     // read register sepc
  34:src/../h/riscv.hpp ****     static uint64 r_sepc();
  35:src/../h/riscv.hpp **** 
  36:src/../h/riscv.hpp ****     // write register sepc
  37:src/../h/riscv.hpp ****     static void w_sepc(uint64 sepc);
  38:src/../h/riscv.hpp **** 
  39:src/../h/riscv.hpp ****     // read register stvec
  40:src/../h/riscv.hpp ****     static uint64 r_stvec();
  41:src/../h/riscv.hpp **** 
  42:src/../h/riscv.hpp ****     // write register stvec
  43:src/../h/riscv.hpp ****     static void w_stvec(uint64 stvec);
  44:src/../h/riscv.hpp **** 
  45:src/../h/riscv.hpp ****     // read register stval
  46:src/../h/riscv.hpp ****     static uint64 r_stval();
  47:src/../h/riscv.hpp **** 
  48:src/../h/riscv.hpp ****     // write register stval
  49:src/../h/riscv.hpp ****     static void w_stval(uint64 stval);
  50:src/../h/riscv.hpp **** 
  51:src/../h/riscv.hpp ****     enum BitMaskSip
  52:src/../h/riscv.hpp ****     {
  53:src/../h/riscv.hpp ****         SIP_SSIP = (1 << 1),
  54:src/../h/riscv.hpp ****         SIP_STIP = (1 << 5),
  55:src/../h/riscv.hpp ****         SIP_SEIP = (1 << 9),
  56:src/../h/riscv.hpp ****     };
  57:src/../h/riscv.hpp **** 
  58:src/../h/riscv.hpp ****     // mask set register sip
  59:src/../h/riscv.hpp ****     static void ms_sip(uint64 mask);
  60:src/../h/riscv.hpp **** 
  61:src/../h/riscv.hpp ****     // mask clear register sip
  62:src/../h/riscv.hpp ****     static void mc_sip(uint64 mask);
  63:src/../h/riscv.hpp **** 
  64:src/../h/riscv.hpp ****     // read register sip
  65:src/../h/riscv.hpp ****     static uint64 r_sip();
  66:src/../h/riscv.hpp **** 
GAS LISTING /tmp/ccWMkwFO.s 			page 5


  67:src/../h/riscv.hpp ****     // write register sip
  68:src/../h/riscv.hpp ****     static void w_sip(uint64 sip);
  69:src/../h/riscv.hpp **** 
  70:src/../h/riscv.hpp ****     enum BitMaskSstatus
  71:src/../h/riscv.hpp ****     {
  72:src/../h/riscv.hpp ****         SSTATUS_SIE = (1 << 1),
  73:src/../h/riscv.hpp ****         SSTATUS_SPIE = (1 << 5),
  74:src/../h/riscv.hpp ****         SSTATUS_SPP = (1 << 8),
  75:src/../h/riscv.hpp ****     };
  76:src/../h/riscv.hpp **** 
  77:src/../h/riscv.hpp ****     // mask set register sstatus
  78:src/../h/riscv.hpp ****     static void ms_sstatus(uint64 mask);
  79:src/../h/riscv.hpp **** 
  80:src/../h/riscv.hpp ****     // mask clear register sstatus
  81:src/../h/riscv.hpp ****     static void mc_sstatus(uint64 mask);
  82:src/../h/riscv.hpp **** 
  83:src/../h/riscv.hpp ****     // read register sstatus
  84:src/../h/riscv.hpp ****     static uint64 r_sstatus();
  85:src/../h/riscv.hpp **** 
  86:src/../h/riscv.hpp ****     // write register sstatus
  87:src/../h/riscv.hpp ****     static void w_sstatus(uint64 sstatus);
  88:src/../h/riscv.hpp **** 
  89:src/../h/riscv.hpp **** private:
  90:src/../h/riscv.hpp **** 
  91:src/../h/riscv.hpp ****     //handle za sistemske pzoive
  92:src/../h/riscv.hpp ****     static void handleSyscall();
  93:src/../h/riscv.hpp **** 
  94:src/../h/riscv.hpp ****     //handle za prekide od tajmera
  95:src/../h/riscv.hpp ****     static void handleTimerInterrupt();
  96:src/../h/riscv.hpp **** 
  97:src/../h/riscv.hpp ****     //handle za prekide od konzozle
  98:src/../h/riscv.hpp ****     static void handleConsoleInterrupt();
  99:src/../h/riscv.hpp **** 
 100:src/../h/riscv.hpp ****     //handle za bad cause
 101:src/../h/riscv.hpp ****     static void handleBadCause();
 102:src/../h/riscv.hpp **** };
 103:src/../h/riscv.hpp **** 
 104:src/../h/riscv.hpp **** inline uint64 Riscv::r_scause()
 105:src/../h/riscv.hpp **** {
 106:src/../h/riscv.hpp ****     uint64 volatile scause;
 119              		.loc 2 106 5
 107:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[scause], scause" : [scause] "=r"(scause));
 120              		.loc 2 107 5
 121              		.loc 2 107 72 is_stmt 0
 122              	#APP
 123              	# 107 "src/../h/riscv.hpp" 1
 108              	    return scause;
 124              		csrr a5, scause
 125              	# 0 "" 2
 126              	#NO_APP
 127 004c 233CF4FA 		sd	a5,-72(s0)
 128              		.loc 2 108 5 is_stmt 1
 129              		.loc 2 108 12 is_stmt 0
 130 0050 833484FB 		ld	s1,-72(s0)
 131              	.LVL5:
 132              	.LBE31:
 133              	.LBE30:
GAS LISTING /tmp/ccWMkwFO.s 			page 6


  29:src/riscv.cpp **** 
  30:src/riscv.cpp ****     //ecall iz korisnickog, ecall iz sistemskog rezima
  31:src/riscv.cpp ****     if(scause == 0x0000000000000008UL || scause == 0x0000000000000009UL)//syscall
 134              		.loc 1 31 5 is_stmt 1
 135              	.LBB32:
 136              		.loc 1 31 39 is_stmt 0
 137 0054 138784FF 		addi	a4,s1,-8
 138              		.loc 1 31 5
 139 0058 93071000 		li	a5,1
 140 005c 63F2E70C 		bleu	a4,a5,.L13
  32:src/riscv.cpp ****     {
  33:src/riscv.cpp **** 
  34:src/riscv.cpp ****         uint64 volatile sepc = r_sepc()+ 4; // jer pc pokazuje na trenutnu instrukciju tj ecall, a 
  35:src/riscv.cpp ****         uint64 volatile sstatus = r_sstatus(); // kupim vrednost statusnog registra
  36:src/riscv.cpp ****         //obe stvari su mi bitne zbog desavanja kada se dodje na sret
  37:src/riscv.cpp **** 
  38:src/riscv.cpp ****         uint64  syscall;
  39:src/riscv.cpp ****         __asm__ volatile("mv %0, a0" : "=r"(syscall));
  40:src/riscv.cpp **** 
  41:src/riscv.cpp ****         size_t  size;
  42:src/riscv.cpp ****         void* ptr = nullptr;
  43:src/riscv.cpp ****         int ret;
  44:src/riscv.cpp **** //        Body body;
  45:src/riscv.cpp **** //        void* arg;
  46:src/riscv.cpp **** //        void* stack_space;
  47:src/riscv.cpp **** //        PCB** handleCreate;
  48:src/riscv.cpp **** //        thread_t handle;
  49:src/riscv.cpp **** //        struct kSemaphore* sem;
  50:src/riscv.cpp **** //          char character= 'A';
  51:src/riscv.cpp **** 
  52:src/riscv.cpp ****         switch(syscall)
  53:src/riscv.cpp ****         {
  54:src/riscv.cpp ****             case 0x01: //mem_alloc
  55:src/riscv.cpp ****                 __asm__ volatile("mv %0, a1":"=r"(size));
  56:src/riscv.cpp ****                 size *= MEM_BLOCK_SIZE;
  57:src/riscv.cpp ****                 //ptr = MemoryAllocator::kmem_alloc(size);
  58:src/riscv.cpp ****                 ptr = __mem_alloc(size);
  59:src/riscv.cpp ****                 __asm__ volatile("mv a0, %0" : : "r" (ptr));
  60:src/riscv.cpp ****                 break;
  61:src/riscv.cpp ****             case 0x02: //mem_free
  62:src/riscv.cpp ****                 __asm__ volatile("mv %0, a1": "=r"(ptr));
  63:src/riscv.cpp ****                 //ret = MemoryAllocator::kmem_free(ptr);
  64:src/riscv.cpp ****                 ret = __mem_free(ptr);
  65:src/riscv.cpp ****                 __asm__ volatile("mv a0, %0"::"r"(ret));
  66:src/riscv.cpp ****                 break;
  67:src/riscv.cpp **** //            case 0x11://thread_create
  68:src/riscv.cpp **** //                __asm__ volatile("mv %0, a1":"=r"(handleCreate));
  69:src/riscv.cpp **** //                __asm__ volatile("mv %0, a2":"=r"(body));
  70:src/riscv.cpp **** //                __asm__ volatile("mv %0, a3":"=r"(arg));
  71:src/riscv.cpp **** //                if(body!= nullptr){
  72:src/riscv.cpp **** //                    __asm__ volatile("mv %0, a4":"=r"(stack_space));
  73:src/riscv.cpp **** //                }
  74:src/riscv.cpp **** //                else stack_space = nullptr;
  75:src/riscv.cpp **** //
  76:src/riscv.cpp **** //                *handleCreate = PCB::createProcess(body,arg,stack_space);
  77:src/riscv.cpp **** //
  78:src/riscv.cpp **** //                if(*handleCreate) ret = 0;
GAS LISTING /tmp/ccWMkwFO.s 			page 7


  79:src/riscv.cpp **** //                else ret = -11;
  80:src/riscv.cpp **** //                if(body) kScheduler::put(*handleCreate);
  81:src/riscv.cpp **** //                __asm__ volatile("mv a0, %0"::"r"(ret));
  82:src/riscv.cpp **** //                break;
  83:src/riscv.cpp **** //            case 0x12://thread_exit
  84:src/riscv.cpp **** //                if(PCB::running->body == nullptr){
  85:src/riscv.cpp **** //                    ret = -12;
  86:src/riscv.cpp **** //                    __asm__ volatile("mv a0, %0"::"r"(ret));
  87:src/riscv.cpp **** //                }
  88:src/riscv.cpp **** //                else PCB::exit();
  89:src/riscv.cpp **** //                break;
  90:src/riscv.cpp **** //            case 0x13: //thread_dispatch
  91:src/riscv.cpp **** //                PCB::yield();
  92:src/riscv.cpp **** //                break;
  93:src/riscv.cpp **** //            case 0x14: //thread_join
  94:src/riscv.cpp **** //                __asm__ volatile("mv %0, a1":"=r"(handle));
  95:src/riscv.cpp **** //                PCB::join(handle);
  96:src/riscv.cpp **** //                break;
  97:src/riscv.cpp **** //            case 0x21: //sem_open
  98:src/riscv.cpp **** //                struct kSemaphore** handle;
  99:src/riscv.cpp **** //                int  init;
 100:src/riscv.cpp **** //                __asm__ volatile("mv %0, a1":"=r"(handle));
 101:src/riscv.cpp **** //                __asm__ volatile("mv %0, a2":"=r"(init));
 102:src/riscv.cpp **** //                *handle = kSemaphore::ksem_open(init);
 103:src/riscv.cpp **** //                if(*handle == nullptr) {
 104:src/riscv.cpp **** //                    ret = -21;
 105:src/riscv.cpp **** //                } else {
 106:src/riscv.cpp **** //                    ret=0;
 107:src/riscv.cpp **** //                }
 108:src/riscv.cpp **** //                __asm__ volatile("mv a0, %0"::"r"(ret));
 109:src/riscv.cpp **** //                break;
 110:src/riscv.cpp **** //            case 0x22://sem_close
 111:src/riscv.cpp **** //                __asm__ volatile("mv %0, a1":"=r"(sem));
 112:src/riscv.cpp **** //                if(sem == nullptr) {
 113:src/riscv.cpp **** //                    ret = -22;
 114:src/riscv.cpp **** //                    __asm__ volatile("mv a0, %0"::"r"(ret));
 115:src/riscv.cpp **** //                    return;
 116:src/riscv.cpp **** //                } else ret = 0;
 117:src/riscv.cpp **** //                kSemaphore::ksem_close(sem);
 118:src/riscv.cpp **** //                __asm__ volatile("mv a0, %0"::"r"(ret));
 119:src/riscv.cpp **** //                break;
 120:src/riscv.cpp **** //            case 0x23: //sem_wait
 121:src/riscv.cpp **** //                __asm__ volatile("mv %0, a1":"=r"(sem));
 122:src/riscv.cpp **** //                if(sem == nullptr) {
 123:src/riscv.cpp **** //                    ret = -23;
 124:src/riscv.cpp **** //                    __asm__ volatile("mv a0, %0"::"r"(ret));
 125:src/riscv.cpp **** //                } else ret =0;
 126:src/riscv.cpp **** //                kSemaphore::ksem_wait(sem);
 127:src/riscv.cpp **** //                __asm__ volatile("mv a0, %0"::"r"(ret));
 128:src/riscv.cpp **** //                break;
 129:src/riscv.cpp **** //            case 0x24: //sem_signal
 130:src/riscv.cpp **** //                __asm__ volatile("mv %0, a1":"=r"(sem));
 131:src/riscv.cpp **** //                if(sem == nullptr) {
 132:src/riscv.cpp **** //                    ret = -24;
 133:src/riscv.cpp **** //                    __asm__ volatile("mv a0, %0"::"r"(ret));
 134:src/riscv.cpp **** //                    return;
 135:src/riscv.cpp **** //                } else ret=0;
GAS LISTING /tmp/ccWMkwFO.s 			page 8


 136:src/riscv.cpp **** //                kSemaphore::ksem_signal(sem);
 137:src/riscv.cpp **** //                __asm__ volatile("mv a0, %0"::"r"(ret));
 138:src/riscv.cpp **** //                break;
 139:src/riscv.cpp **** //            case 0x41: //getc
 140:src/riscv.cpp **** //                character = __getc(); //odlazim u timer interrupt umesto u console interrupt
 141:src/riscv.cpp **** //                __asm__ volatile("mv a0, %0"::"r"(character));
 142:src/riscv.cpp **** //                break;
 143:src/riscv.cpp **** //            case 0x42: //putc
 144:src/riscv.cpp **** //                char c;
 145:src/riscv.cpp **** //                __asm__ volatile("mv %0, a1":"=r"(c));
 146:src/riscv.cpp **** //                __putc(c);
 147:src/riscv.cpp **** //                break;
 148:src/riscv.cpp ****             case 0x55:
 149:src/riscv.cpp ****                 int arg;
 150:src/riscv.cpp ****                 __asm__ volatile("mv %0, a1":"=r"(arg));
 151:src/riscv.cpp ****                 arg += 6;
 152:src/riscv.cpp ****                 __asm__ volatile("mv a0, %0"::"r"(arg));
 153:src/riscv.cpp ****                 break;
 154:src/riscv.cpp ****             default: break;
 155:src/riscv.cpp ****         }
 156:src/riscv.cpp **** 
 157:src/riscv.cpp ****         __asm__ volatile("sd a0, 80(fp)"); //resava mi problem sa a0 (skontaj sta si tu radila)
 158:src/riscv.cpp ****         //PCB::dispatch();
 159:src/riscv.cpp ****         w_sstatus(sstatus);
 160:src/riscv.cpp ****         w_sepc(sepc);
 161:src/riscv.cpp **** 
 162:src/riscv.cpp ****     }
 163:src/riscv.cpp ****     else
 164:src/riscv.cpp **** 
 165:src/riscv.cpp ****     {
 166:src/riscv.cpp ****         if(scause == 0x0000000000000002UL)
 141              		.loc 1 166 9 is_stmt 1
 142 0060 93072000 		li	a5,2
 143 0064 6388F414 		beq	s1,a5,.L14
 167:src/riscv.cpp ****             printString("Ilegalna instrukcija\n:");
 168:src/riscv.cpp ****         else if (scause == 0x0000000000000005UL)
 144              		.loc 1 168 14
 145 0068 93075000 		li	a5,5
 146 006c 638EF414 		beq	s1,a5,.L15
 169:src/riscv.cpp ****             printString("Nedozvolena adresa citanja\n");
 170:src/riscv.cpp ****         else if (scause == 0x0000000000000007UL)
 147              		.loc 1 170 14
 148 0070 93077000 		li	a5,7
 149 0074 6384F416 		beq	s1,a5,.L16
 150              	.L10:
 171:src/riscv.cpp ****             printString("Nedozvolena adresa upisa\n");
 172:src/riscv.cpp **** 
 173:src/riscv.cpp **** 
 174:src/riscv.cpp ****         printString("scause: ");
 151              		.loc 1 174 9
 152              		.loc 1 174 20 is_stmt 0
 153 0078 17050000 		lla	a0,.LC3
 153      13050500 
 154 0080 97000000 		call	_Z11printStringPKc@plt
 154      E7800000 
 155              	.LVL6:
 175:src/riscv.cpp ****         printInteger(scause);
GAS LISTING /tmp/ccWMkwFO.s 			page 9


 156              		.loc 1 175 9 is_stmt 1
 157              		.loc 1 175 21 is_stmt 0
 158 0088 13850400 		mv	a0,s1
 159 008c 97000000 		call	_Z12printIntegerm@plt
 159      E7800000 
 160              	.LVL7:
 176:src/riscv.cpp ****         printString("\n");
 161              		.loc 1 176 9 is_stmt 1
 162              		.loc 1 176 20 is_stmt 0
 163 0094 17050000 		lla	a0,.LC4
 163      13050500 
 164 009c 97000000 		call	_Z11printStringPKc@plt
 164      E7800000 
 165              	.LVL8:
 177:src/riscv.cpp ****         printString("sepc: ");
 166              		.loc 1 177 9 is_stmt 1
 167              		.loc 1 177 20 is_stmt 0
 168 00a4 17050000 		lla	a0,.LC5
 168      13050500 
 169 00ac 97000000 		call	_Z11printStringPKc@plt
 169      E7800000 
 170              	.LVL9:
 178:src/riscv.cpp ****         printInteger(r_sepc());
 171              		.loc 1 178 9 is_stmt 1
 172              	.LBB33:
 173              	.LBB34:
 109:src/../h/riscv.hpp **** }
 110:src/../h/riscv.hpp **** 
 111:src/../h/riscv.hpp **** inline void Riscv::w_scause(uint64 scause)
 112:src/../h/riscv.hpp **** {
 113:src/../h/riscv.hpp ****     __asm__ volatile ("csrw scause, %[scause]" : : [scause] "r"(scause));
 114:src/../h/riscv.hpp **** }
 115:src/../h/riscv.hpp **** 
 116:src/../h/riscv.hpp **** inline uint64 Riscv::r_sepc()
 117:src/../h/riscv.hpp **** {
 118:src/../h/riscv.hpp ****     uint64 volatile sepc;
 174              		.loc 2 118 5
 119:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sepc], sepc" : [sepc] "=r"(sepc));
 175              		.loc 2 119 5
 176              		.loc 2 119 64 is_stmt 0
 177              	#APP
 178              	# 119 "src/../h/riscv.hpp" 1
 120              	    return sepc;
 179              		csrr a5, sepc
 180              	# 0 "" 2
 181              	#NO_APP
 182 00b8 233CF4FC 		sd	a5,-40(s0)
 183              		.loc 2 120 5 is_stmt 1
 184              		.loc 2 120 12 is_stmt 0
 185 00bc 033584FD 		ld	a0,-40(s0)
 186              	.LBE34:
 187              	.LBE33:
 188              		.loc 1 178 21
 189 00c0 97000000 		call	_Z12printIntegerm@plt
 189      E7800000 
 190              	.LVL10:
 179:src/riscv.cpp ****         printString("\n");
GAS LISTING /tmp/ccWMkwFO.s 			page 10


 191              		.loc 1 179 9 is_stmt 1
 192              		.loc 1 179 20 is_stmt 0
 193 00c8 17050000 		lla	a0,.LC4
 193      13050500 
 194 00d0 97000000 		call	_Z11printStringPKc@plt
 194      E7800000 
 195              	.LVL11:
 180:src/riscv.cpp ****         printString("stval: ");
 196              		.loc 1 180 9 is_stmt 1
 197              		.loc 1 180 20 is_stmt 0
 198 00d8 17050000 		lla	a0,.LC6
 198      13050500 
 199 00e0 97000000 		call	_Z11printStringPKc@plt
 199      E7800000 
 200              	.LVL12:
 181:src/riscv.cpp ****         printInteger(r_stval());
 201              		.loc 1 181 9 is_stmt 1
 202              	.LBB35:
 203              	.LBB36:
 121:src/../h/riscv.hpp **** }
 122:src/../h/riscv.hpp **** 
 123:src/../h/riscv.hpp **** inline void Riscv::w_sepc(uint64 sepc)
 124:src/../h/riscv.hpp **** {
 125:src/../h/riscv.hpp ****     __asm__ volatile ("csrw sepc, %[sepc]" : : [sepc] "r"(sepc));
 126:src/../h/riscv.hpp **** }
 127:src/../h/riscv.hpp **** 
 128:src/../h/riscv.hpp **** inline uint64 Riscv::r_stvec()
 129:src/../h/riscv.hpp **** {
 130:src/../h/riscv.hpp ****     uint64 volatile stvec;
 131:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[stvec], stvec" : [stvec] "=r"(stvec));
 132:src/../h/riscv.hpp ****     return stvec;
 133:src/../h/riscv.hpp **** }
 134:src/../h/riscv.hpp **** 
 135:src/../h/riscv.hpp **** inline void Riscv::w_stvec(uint64 stvec)
 136:src/../h/riscv.hpp **** {
 137:src/../h/riscv.hpp ****     __asm__ volatile ("csrw stvec, %[stvec]" : : [stvec] "r"(stvec));
 138:src/../h/riscv.hpp **** }
 139:src/../h/riscv.hpp **** 
 140:src/../h/riscv.hpp **** inline uint64 Riscv::r_stval()
 141:src/../h/riscv.hpp **** {
 142:src/../h/riscv.hpp ****     uint64 volatile stval;
 204              		.loc 2 142 5
 143:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[stval], stval" : [stval] "=r"(stval));
 205              		.loc 2 143 5
 206              		.loc 2 143 68 is_stmt 0
 207              	#APP
 208              	# 143 "src/../h/riscv.hpp" 1
 144              	    return stval;
 209              		csrr a5, stval
 210              	# 0 "" 2
 211              	#NO_APP
 212 00ec 2338F4FC 		sd	a5,-48(s0)
 213              		.loc 2 144 5 is_stmt 1
 214              		.loc 2 144 12 is_stmt 0
 215 00f0 033504FD 		ld	a0,-48(s0)
 216              	.LBE36:
 217              	.LBE35:
GAS LISTING /tmp/ccWMkwFO.s 			page 11


 218              		.loc 1 181 21
 219 00f4 97000000 		call	_Z12printIntegerm@plt
 219      E7800000 
 220              	.LVL13:
 182:src/riscv.cpp ****         printString("\n");
 221              		.loc 1 182 9 is_stmt 1
 222              		.loc 1 182 20 is_stmt 0
 223 00fc 17050000 		lla	a0,.LC4
 223      13050500 
 224 0104 97000000 		call	_Z11printStringPKc@plt
 224      E7800000 
 225              	.LVL14:
 226              	.L3:
 227              	.LBE32:
 183:src/riscv.cpp ****         //while(1);
 184:src/riscv.cpp ****     }
 185:src/riscv.cpp **** }
 228              		.loc 1 185 1
 229 010c 83308105 		ld	ra,88(sp)
 230              		.cfi_remember_state
 231              		.cfi_restore 1
 232 0110 03340105 		ld	s0,80(sp)
 233              		.cfi_restore 8
 234              		.cfi_def_cfa 2, 96
 235 0114 83348104 		ld	s1,72(sp)
 236              		.cfi_restore 9
 237              	.LVL15:
 238 0118 13010106 		addi	sp,sp,96
 239              		.cfi_def_cfa_offset 0
 240 011c 67800000 		jr	ra
 241              	.LVL16:
 242              	.L13:
 243              		.cfi_restore_state
 244              	.LBB49:
 245              	.LBB37:
  34:src/riscv.cpp ****         uint64 volatile sstatus = r_sstatus(); // kupim vrednost statusnog registra
 246              		.loc 1 34 9 is_stmt 1
 247              	.LBB38:
 248              	.LBB39:
 118:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sepc], sepc" : [sepc] "=r"(sepc));
 249              		.loc 2 118 5
 119:src/../h/riscv.hpp ****     return sepc;
 250              		.loc 2 119 5
 119:src/../h/riscv.hpp ****     return sepc;
 251              		.loc 2 119 64 is_stmt 0
 252              	#APP
 253              	# 119 "src/../h/riscv.hpp" 1
 254              		csrr a5, sepc
 255              	# 0 "" 2
 256              	#NO_APP
 257 0124 2334F4FC 		sd	a5,-56(s0)
 120:src/../h/riscv.hpp **** }
 258              		.loc 2 120 5 is_stmt 1
 120:src/../h/riscv.hpp **** }
 259              		.loc 2 120 12 is_stmt 0
 260 0128 833784FC 		ld	a5,-56(s0)
 261              	.LBE39:
GAS LISTING /tmp/ccWMkwFO.s 			page 12


 262              	.LBE38:
  34:src/riscv.cpp ****         uint64 volatile sstatus = r_sstatus(); // kupim vrednost statusnog registra
 263              		.loc 1 34 40
 264 012c 93874700 		addi	a5,a5,4
  34:src/riscv.cpp ****         uint64 volatile sstatus = r_sstatus(); // kupim vrednost statusnog registra
 265              		.loc 1 34 42
 266 0130 2334F4FA 		sd	a5,-88(s0)
  35:src/riscv.cpp ****         //obe stvari su mi bitne zbog desavanja kada se dodje na sret
 267              		.loc 1 35 9 is_stmt 1
 268              	.LBB40:
 269              	.LBB41:
 145:src/../h/riscv.hpp **** }
 146:src/../h/riscv.hpp **** 
 147:src/../h/riscv.hpp **** inline void Riscv::w_stval(uint64 stval)
 148:src/../h/riscv.hpp **** {
 149:src/../h/riscv.hpp ****     __asm__ volatile ("csrw stval, %[stval]" : : [stval] "r"(stval));
 150:src/../h/riscv.hpp **** }
 151:src/../h/riscv.hpp **** 
 152:src/../h/riscv.hpp **** inline void Riscv::ms_sip(uint64 mask)
 153:src/../h/riscv.hpp **** {
 154:src/../h/riscv.hpp ****     __asm__ volatile ("csrs sip, %[mask]" : : [mask] "r"(mask));
 155:src/../h/riscv.hpp **** }
 156:src/../h/riscv.hpp **** 
 157:src/../h/riscv.hpp **** inline void Riscv::mc_sip(uint64 mask)
 158:src/../h/riscv.hpp **** {
 159:src/../h/riscv.hpp ****     __asm__ volatile ("csrc sip, %[mask]" : : [mask] "r"(mask));
 160:src/../h/riscv.hpp **** }
 161:src/../h/riscv.hpp **** 
 162:src/../h/riscv.hpp **** inline uint64 Riscv::r_sip()
 163:src/../h/riscv.hpp **** {
 164:src/../h/riscv.hpp ****     uint64 volatile sip;
 165:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sip], sip" : [sip] "=r"(sip));
 166:src/../h/riscv.hpp ****     return sip;
 167:src/../h/riscv.hpp **** }
 168:src/../h/riscv.hpp **** 
 169:src/../h/riscv.hpp **** inline void Riscv::w_sip(uint64 sip)
 170:src/../h/riscv.hpp **** {
 171:src/../h/riscv.hpp ****     __asm__ volatile ("csrw sip, %[sip]" : : [sip] "r"(sip));
 172:src/../h/riscv.hpp **** }
 173:src/../h/riscv.hpp **** 
 174:src/../h/riscv.hpp **** inline void Riscv::ms_sstatus(uint64 mask)
 175:src/../h/riscv.hpp **** {
 176:src/../h/riscv.hpp ****     __asm__ volatile ("csrs sstatus, %[mask]" : : [mask] "r"(mask));
 177:src/../h/riscv.hpp **** }
 178:src/../h/riscv.hpp **** 
 179:src/../h/riscv.hpp **** inline void Riscv::mc_sstatus(uint64 mask)
 180:src/../h/riscv.hpp **** {
 181:src/../h/riscv.hpp ****     __asm__ volatile ("csrc sstatus, %[mask]" : : [mask] "r"(mask));
 182:src/../h/riscv.hpp **** }
 183:src/../h/riscv.hpp **** 
 184:src/../h/riscv.hpp **** inline uint64 Riscv::r_sstatus()
 185:src/../h/riscv.hpp **** {
 186:src/../h/riscv.hpp ****     uint64 volatile sstatus;
 270              		.loc 2 186 5
 187:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sstatus], sstatus" : [sstatus] "=r"(sstatus));
 271              		.loc 2 187 5
 272              		.loc 2 187 76 is_stmt 0
GAS LISTING /tmp/ccWMkwFO.s 			page 13


 273              	#APP
 274              	# 187 "src/../h/riscv.hpp" 1
 188              	    return sstatus;
 275              		csrr a5, sstatus
 276              	# 0 "" 2
 277              	#NO_APP
 278 0138 2330F4FC 		sd	a5,-64(s0)
 279              		.loc 2 188 5 is_stmt 1
 280              		.loc 2 188 12 is_stmt 0
 281 013c 833704FC 		ld	a5,-64(s0)
 282              	.LBE41:
 283              	.LBE40:
  35:src/riscv.cpp ****         //obe stvari su mi bitne zbog desavanja kada se dodje na sret
 284              		.loc 1 35 45
 285 0140 2338F4FA 		sd	a5,-80(s0)
  38:src/riscv.cpp ****         __asm__ volatile("mv %0, a0" : "=r"(syscall));
 286              		.loc 1 38 9 is_stmt 1
  39:src/riscv.cpp **** 
 287              		.loc 1 39 9
  39:src/riscv.cpp **** 
 288              		.loc 1 39 54 is_stmt 0
 289              	#APP
 290              	# 39 "src/riscv.cpp" 1
 291              		mv a5, a0
 292              	# 0 "" 2
 293              	.LVL17:
  41:src/riscv.cpp ****         void* ptr = nullptr;
 294              		.loc 1 41 9 is_stmt 1
  42:src/riscv.cpp ****         int ret;
 295              		.loc 1 42 9
  43:src/riscv.cpp **** //        Body body;
 296              		.loc 1 43 9
  52:src/riscv.cpp ****         {
 297              		.loc 1 52 9
 298              	#NO_APP
 299              	.LBB42:
 300 0148 13072000 		li	a4,2
 301 014c 6382E704 		beq	a5,a4,.L5
 302 0150 13075005 		li	a4,85
 303 0154 6388E704 		beq	a5,a4,.L6
 304 0158 13071000 		li	a4,1
 305 015c 638EE700 		beq	a5,a4,.L17
 306              	.LVL18:
 307              	.L7:
 308              	.LBE42:
 157:src/riscv.cpp ****         //PCB::dispatch();
 309              		.loc 1 157 9
 157:src/riscv.cpp ****         //PCB::dispatch();
 310              		.loc 1 157 42 is_stmt 0
 311              	#APP
 312              	# 157 "src/riscv.cpp" 1
 159:src/riscv.cpp ****         w_sepc(sepc);
 313              		sd a0, 80(fp)
 314              	# 0 "" 2
 315              		.loc 1 159 9 is_stmt 1
 159:src/riscv.cpp ****         w_sepc(sepc);
 316              		.loc 1 159 18 is_stmt 0
GAS LISTING /tmp/ccWMkwFO.s 			page 14


 317              	#NO_APP
 318 0164 833704FB 		ld	a5,-80(s0)
 319              	.LVL19:
 320              	.LBB44:
 321              	.LBB45:
 189:src/../h/riscv.hpp **** }
 190:src/../h/riscv.hpp **** 
 191:src/../h/riscv.hpp **** inline void Riscv::w_sstatus(uint64 sstatus)
 192:src/../h/riscv.hpp **** {
 193:src/../h/riscv.hpp ****     __asm__ volatile ("csrw sstatus, %[sstatus]" : : [sstatus] "r"(sstatus));
 322              		.loc 2 193 5 is_stmt 1
 323              		.loc 2 193 77 is_stmt 0
 324              	#APP
 325              	# 193 "src/../h/riscv.hpp" 1
 194              	}
 326              		csrw sstatus, a5
 327              	# 0 "" 2
 328              	.LVL20:
 329              	#NO_APP
 330              	.LBE45:
 331              	.LBE44:
 160:src/riscv.cpp **** 
 332              		.loc 1 160 9 is_stmt 1
 160:src/riscv.cpp **** 
 333              		.loc 1 160 15 is_stmt 0
 334 016c 833784FA 		ld	a5,-88(s0)
 335              	.LVL21:
 336              	.LBB46:
 337              	.LBB47:
 125:src/../h/riscv.hpp **** }
 338              		.loc 2 125 5 is_stmt 1
 125:src/../h/riscv.hpp **** }
 339              		.loc 2 125 65 is_stmt 0
 340              	#APP
 341              	# 125 "src/../h/riscv.hpp" 1
 126:src/../h/riscv.hpp **** 
 342              		csrw sepc, a5
 343              	# 0 "" 2
 344              		.loc 2 126 1
 345              	#NO_APP
 346 0174 6FF09FF9 		j	.L3
 347              	.LVL22:
 348              	.L17:
 349              	.LBE47:
 350              	.LBE46:
 351              	.LBB48:
 352              	.LBB43:
  54:src/riscv.cpp ****                 __asm__ volatile("mv %0, a1":"=r"(size));
 353              		.loc 1 54 13 is_stmt 1
  55:src/riscv.cpp ****                 size *= MEM_BLOCK_SIZE;
 354              		.loc 1 55 17
  55:src/riscv.cpp ****                 size *= MEM_BLOCK_SIZE;
 355              		.loc 1 55 57 is_stmt 0
 356              	#APP
 357              	# 55 "src/riscv.cpp" 1
 358              		mv a0, a1
 359              	# 0 "" 2
GAS LISTING /tmp/ccWMkwFO.s 			page 15


 360              	.LVL23:
  56:src/riscv.cpp ****                 //ptr = MemoryAllocator::kmem_alloc(size);
 361              		.loc 1 56 17 is_stmt 1
  58:src/riscv.cpp ****                 __asm__ volatile("mv a0, %0" : : "r" (ptr));
 362              		.loc 1 58 17
  58:src/riscv.cpp ****                 __asm__ volatile("mv a0, %0" : : "r" (ptr));
 363              		.loc 1 58 34 is_stmt 0
 364              	#NO_APP
 365 017c 13156500 		slli	a0,a0,6
 366              	.LVL24:
 367 0180 97000000 		call	__mem_alloc@plt
 367      E7800000 
 368              	.LVL25:
  59:src/riscv.cpp ****                 break;
 369              		.loc 1 59 17 is_stmt 1
  59:src/riscv.cpp ****                 break;
 370              		.loc 1 59 60 is_stmt 0
 371              	#APP
 372              	# 59 "src/riscv.cpp" 1
  60:src/riscv.cpp ****             case 0x02: //mem_free
 373              		mv a0, a0
 374              	# 0 "" 2
 375              		.loc 1 60 17 is_stmt 1
 376              	#NO_APP
 377 018c 6FF05FFD 		j	.L7
 378              	.LVL26:
 379              	.L5:
  61:src/riscv.cpp ****                 __asm__ volatile("mv %0, a1": "=r"(ptr));
 380              		.loc 1 61 13
  62:src/riscv.cpp ****                 //ret = MemoryAllocator::kmem_free(ptr);
 381              		.loc 1 62 17
  62:src/riscv.cpp ****                 //ret = MemoryAllocator::kmem_free(ptr);
 382              		.loc 1 62 57 is_stmt 0
 383              	#APP
 384              	# 62 "src/riscv.cpp" 1
 385              		mv a0, a1
 386              	# 0 "" 2
 387              	.LVL27:
  64:src/riscv.cpp ****                 __asm__ volatile("mv a0, %0"::"r"(ret));
 388              		.loc 1 64 17 is_stmt 1
  64:src/riscv.cpp ****                 __asm__ volatile("mv a0, %0"::"r"(ret));
 389              		.loc 1 64 33 is_stmt 0
 390              	#NO_APP
 391 0194 97000000 		call	__mem_free@plt
 391      E7800000 
 392              	.LVL28:
  65:src/riscv.cpp ****                 break;
 393              		.loc 1 65 17 is_stmt 1
  65:src/riscv.cpp ****                 break;
 394              		.loc 1 65 56 is_stmt 0
 395              	#APP
 396              	# 65 "src/riscv.cpp" 1
  66:src/riscv.cpp **** //            case 0x11://thread_create
 397              		mv a0, a0
 398              	# 0 "" 2
 399              		.loc 1 66 17 is_stmt 1
 400              	#NO_APP
GAS LISTING /tmp/ccWMkwFO.s 			page 16


 401 01a0 6FF01FFC 		j	.L7
 402              	.LVL29:
 403              	.L6:
 148:src/riscv.cpp ****                 int arg;
 404              		.loc 1 148 13
 149:src/riscv.cpp ****                 __asm__ volatile("mv %0, a1":"=r"(arg));
 405              		.loc 1 149 17
 150:src/riscv.cpp ****                 arg += 6;
 406              		.loc 1 150 17
 150:src/riscv.cpp ****                 arg += 6;
 407              		.loc 1 150 56 is_stmt 0
 408              	#APP
 409              	# 150 "src/riscv.cpp" 1
 410              		mv a5, a1
 411              	# 0 "" 2
 412              	.LVL30:
 151:src/riscv.cpp ****                 __asm__ volatile("mv a0, %0"::"r"(arg));
 413              		.loc 1 151 17 is_stmt 1
 151:src/riscv.cpp ****                 __asm__ volatile("mv a0, %0"::"r"(arg));
 414              		.loc 1 151 21 is_stmt 0
 415              	#NO_APP
 416 01a8 9B876700 		addiw	a5,a5,6
 417              	.LVL31:
 152:src/riscv.cpp ****                 break;
 418              		.loc 1 152 17 is_stmt 1
 152:src/riscv.cpp ****                 break;
 419              		.loc 1 152 56 is_stmt 0
 420              	#APP
 421              	# 152 "src/riscv.cpp" 1
 153:src/riscv.cpp ****             default: break;
 422              		mv a0, a5
 423              	# 0 "" 2
 424              		.loc 1 153 17 is_stmt 1
 425              	#NO_APP
 426 01b0 6FF01FFB 		j	.L7
 427              	.LVL32:
 428              	.L14:
 429              	.LBE43:
 430              	.LBE48:
 431              	.LBE37:
 167:src/riscv.cpp ****         else if (scause == 0x0000000000000005UL)
 432              		.loc 1 167 13
 167:src/riscv.cpp ****         else if (scause == 0x0000000000000005UL)
 433              		.loc 1 167 24 is_stmt 0
 434 01b4 17050000 		lla	a0,.LC0
 434      13050500 
 435 01bc 97000000 		call	_Z11printStringPKc@plt
 435      E7800000 
 436              	.LVL33:
 437 01c4 6FF05FEB 		j	.L10
 438              	.L15:
 169:src/riscv.cpp ****         else if (scause == 0x0000000000000007UL)
 439              		.loc 1 169 13 is_stmt 1
 169:src/riscv.cpp ****         else if (scause == 0x0000000000000007UL)
 440              		.loc 1 169 24 is_stmt 0
 441 01c8 17050000 		lla	a0,.LC1
 441      13050500 
GAS LISTING /tmp/ccWMkwFO.s 			page 17


 442 01d0 97000000 		call	_Z11printStringPKc@plt
 442      E7800000 
 443              	.LVL34:
 444 01d8 6FF01FEA 		j	.L10
 445              	.L16:
 171:src/riscv.cpp **** 
 446              		.loc 1 171 13 is_stmt 1
 171:src/riscv.cpp **** 
 447              		.loc 1 171 24 is_stmt 0
 448 01dc 17050000 		lla	a0,.LC2
 448      13050500 
 449 01e4 97000000 		call	_Z11printStringPKc@plt
 449      E7800000 
 450              	.LVL35:
 451 01ec 6FF0DFE8 		j	.L10
 452              	.LBE49:
 453              		.cfi_endproc
 454              	.LFE17:
 456              		.align	2
 457              		.globl	_ZN5Riscv20handleTimerInterruptEv
 459              	_ZN5Riscv20handleTimerInterruptEv:
 460              	.LFB18:
 186:src/riscv.cpp **** void Riscv::handleTimerInterrupt() {
 461              		.loc 1 186 36 is_stmt 1
 462              		.cfi_startproc
 463 01f0 130101FD 		addi	sp,sp,-48
 464              		.cfi_def_cfa_offset 48
 465 01f4 23348102 		sd	s0,40(sp)
 466              		.cfi_offset 8, -8
 467 01f8 13040103 		addi	s0,sp,48
 468              		.cfi_def_cfa 8, 0
 187:src/riscv.cpp **** 
 188:src/riscv.cpp ****     mc_sip(SIP_SSIP); //zasto ovo?? - ni ne radim vrv
 469              		.loc 1 188 5
 470              	.LVL36:
 471              	.LBB50:
 472              	.LBB51:
 159:src/../h/riscv.hpp **** }
 473              		.loc 2 159 5
 159:src/../h/riscv.hpp **** }
 474              		.loc 2 159 64 is_stmt 0
 475 01fc 93072000 		li	a5,2
 476              	#APP
 477              	# 159 "src/../h/riscv.hpp" 1
 478              		csrc sip, a5
 479              	# 0 "" 2
 480              	.LVL37:
 481              	#NO_APP
 482              	.LBE51:
 483              	.LBE50:
 189:src/riscv.cpp **** 
 190:src/riscv.cpp ****     uint64 volatile sepc = r_sepc();
 484              		.loc 1 190 5 is_stmt 1
 485              	.LBB52:
 486              	.LBB53:
 118:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sepc], sepc" : [sepc] "=r"(sepc));
 487              		.loc 2 118 5
GAS LISTING /tmp/ccWMkwFO.s 			page 18


 119:src/../h/riscv.hpp ****     return sepc;
 488              		.loc 2 119 5
 119:src/../h/riscv.hpp ****     return sepc;
 489              		.loc 2 119 64 is_stmt 0
 490              	#APP
 491              	# 119 "src/../h/riscv.hpp" 1
 492              		csrr a5, sepc
 493              	# 0 "" 2
 494              	#NO_APP
 495 0208 233CF4FC 		sd	a5,-40(s0)
 120:src/../h/riscv.hpp **** }
 496              		.loc 2 120 5 is_stmt 1
 120:src/../h/riscv.hpp **** }
 497              		.loc 2 120 12 is_stmt 0
 498 020c 833784FD 		ld	a5,-40(s0)
 499              	.LBE53:
 500              	.LBE52:
 501              		.loc 1 190 35
 502 0210 2334F4FE 		sd	a5,-24(s0)
 191:src/riscv.cpp ****     uint64 volatile sstatus = r_sstatus();
 503              		.loc 1 191 5 is_stmt 1
 504              	.LBB54:
 505              	.LBB55:
 186:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sstatus], sstatus" : [sstatus] "=r"(sstatus));
 506              		.loc 2 186 5
 187:src/../h/riscv.hpp ****     return sstatus;
 507              		.loc 2 187 5
 187:src/../h/riscv.hpp ****     return sstatus;
 508              		.loc 2 187 76 is_stmt 0
 509              	#APP
 510              	# 187 "src/../h/riscv.hpp" 1
 511              		csrr a5, sstatus
 512              	# 0 "" 2
 513              	#NO_APP
 514 0218 2338F4FC 		sd	a5,-48(s0)
 188:src/../h/riscv.hpp **** }
 515              		.loc 2 188 5 is_stmt 1
 188:src/../h/riscv.hpp **** }
 516              		.loc 2 188 12 is_stmt 0
 517 021c 833704FD 		ld	a5,-48(s0)
 518              	.LBE55:
 519              	.LBE54:
 520              		.loc 1 191 41
 521 0220 2330F4FE 		sd	a5,-32(s0)
 192:src/riscv.cpp ****     w_sstatus(sstatus);
 522              		.loc 1 192 5 is_stmt 1
 523              		.loc 1 192 14 is_stmt 0
 524 0224 833704FE 		ld	a5,-32(s0)
 525              	.LVL38:
 526              	.LBB56:
 527              	.LBB57:
 193:src/../h/riscv.hpp **** }
 528              		.loc 2 193 5 is_stmt 1
 193:src/../h/riscv.hpp **** }
 529              		.loc 2 193 77 is_stmt 0
 530              	#APP
 531              	# 193 "src/../h/riscv.hpp" 1
GAS LISTING /tmp/ccWMkwFO.s 			page 19


 532              		csrw sstatus, a5
 533              	# 0 "" 2
 534              	.LVL39:
 535              	#NO_APP
 536              	.LBE57:
 537              	.LBE56:
 193:src/riscv.cpp ****     w_sepc(sepc);
 538              		.loc 1 193 5 is_stmt 1
 539              		.loc 1 193 11 is_stmt 0
 540 022c 833784FE 		ld	a5,-24(s0)
 541              	.LVL40:
 542              	.LBB58:
 543              	.LBB59:
 125:src/../h/riscv.hpp **** }
 544              		.loc 2 125 5 is_stmt 1
 125:src/../h/riscv.hpp **** }
 545              		.loc 2 125 65 is_stmt 0
 546              	#APP
 547              	# 125 "src/../h/riscv.hpp" 1
 548              		csrw sepc, a5
 549              	# 0 "" 2
 550              	.LVL41:
 551              	#NO_APP
 552              	.LBE59:
 553              	.LBE58:
 194:src/riscv.cpp **** }
 554              		.loc 1 194 1
 555 0234 03348102 		ld	s0,40(sp)
 556              		.cfi_restore 8
 557              		.cfi_def_cfa 2, 48
 558 0238 13010103 		addi	sp,sp,48
 559              		.cfi_def_cfa_offset 0
 560 023c 67800000 		jr	ra
 561              		.cfi_endproc
 562              	.LFE18:
 564              		.align	2
 565              		.globl	_ZN5Riscv22handleConsoleInterruptEv
 567              	_ZN5Riscv22handleConsoleInterruptEv:
 568              	.LFB19:
 195:src/riscv.cpp **** 
 196:src/riscv.cpp **** void Riscv::handleConsoleInterrupt() {
 569              		.loc 1 196 38 is_stmt 1
 570              		.cfi_startproc
 571 0240 130101FF 		addi	sp,sp,-16
 572              		.cfi_def_cfa_offset 16
 573 0244 23341100 		sd	ra,8(sp)
 574 0248 23308100 		sd	s0,0(sp)
 575              		.cfi_offset 1, -8
 576              		.cfi_offset 8, -16
 577 024c 13040101 		addi	s0,sp,16
 578              		.cfi_def_cfa 8, 0
 197:src/riscv.cpp ****     console_handler();
 579              		.loc 1 197 5
 580              		.loc 1 197 20 is_stmt 0
 581 0250 97000000 		call	console_handler@plt
 581      E7800000 
 582              	.LVL42:
GAS LISTING /tmp/ccWMkwFO.s 			page 20


 198:src/riscv.cpp **** }
 583              		.loc 1 198 1
 584 0258 83308100 		ld	ra,8(sp)
 585              		.cfi_restore 1
 586 025c 03340100 		ld	s0,0(sp)
 587              		.cfi_restore 8
 588              		.cfi_def_cfa 2, 16
 589 0260 13010101 		addi	sp,sp,16
 590              		.cfi_def_cfa_offset 0
 591 0264 67800000 		jr	ra
 592              		.cfi_endproc
 593              	.LFE19:
 595              		.align	2
 596              		.globl	_ZN5Riscv14handleBadCauseEv
 598              	_ZN5Riscv14handleBadCauseEv:
 599              	.LFB20:
 199:src/riscv.cpp **** 
 200:src/riscv.cpp **** void Riscv::handleBadCause() {
 600              		.loc 1 200 30 is_stmt 1
 601              		.cfi_startproc
 602 0268 130101FF 		addi	sp,sp,-16
 603              		.cfi_def_cfa_offset 16
 604 026c 23348100 		sd	s0,8(sp)
 605              		.cfi_offset 8, -8
 606 0270 13040101 		addi	s0,sp,16
 607              		.cfi_def_cfa 8, 0
 201:src/riscv.cpp **** 
 202:src/riscv.cpp **** }...
 608              		.loc 1 202 1 is_stmt 0
 609 0274 03348100 		ld	s0,8(sp)
 610              		.cfi_restore 8
 611              		.cfi_def_cfa 2, 16
 612 0278 13010101 		addi	sp,sp,16
 613              		.cfi_def_cfa_offset 0
 614 027c 67800000 		jr	ra
 615              		.cfi_endproc
 616              	.LFE20:
 618              	.Letext0:
 619              		.file 3 "src/../h/../lib/hw.h"
 620              		.file 4 "src/../lib/console.h"
 621              		.file 5 "src/../lib/mem.h"
 622              		.file 6 "src/../h/print.hpp"
GAS LISTING /tmp/ccWMkwFO.s 			page 21


DEFINED SYMBOLS
                            *ABS*:0000000000000000 riscv.cpp
     /tmp/ccWMkwFO.s:9      .text:0000000000000000 _ZN5Riscv10popSppSpieEv
     /tmp/ccWMkwFO.s:13     .text:0000000000000000 .L0 
     /tmp/ccWMkwFO.s:14     .text:0000000000000000 .L0 
     /tmp/ccWMkwFO.s:15     .text:0000000000000004 .L0 
     /tmp/ccWMkwFO.s:17     .text:0000000000000008 .L0 
     /tmp/ccWMkwFO.s:19     .text:000000000000000c .L0 
     /tmp/ccWMkwFO.s:21     .text:000000000000000c .L0 
       src/riscv.cpp:14     .text:000000000000000c .L0 
     /tmp/ccWMkwFO.s:27     .text:0000000000000010 .L0 
       src/riscv.cpp:15     .text:0000000000000010 .L0 
     /tmp/ccWMkwFO.s:33     .text:0000000000000014 .L0 
     /tmp/ccWMkwFO.s:34     .text:0000000000000018 .L0 
     /tmp/ccWMkwFO.s:35     .text:0000000000000018 .L0 
     /tmp/ccWMkwFO.s:37     .text:000000000000001c .L0 
     /tmp/ccWMkwFO.s:39     .text:0000000000000020 .L0 
     /tmp/ccWMkwFO.s:68     .text:0000000000000020 _ZN5Riscv13handleSyscallEv
     /tmp/ccWMkwFO.s:71     .text:0000000000000020 .L0 
     /tmp/ccWMkwFO.s:72     .text:0000000000000020 .L0 
     /tmp/ccWMkwFO.s:73     .text:0000000000000024 .L0 
     /tmp/ccWMkwFO.s:77     .text:0000000000000030 .L0 
     /tmp/ccWMkwFO.s:78     .text:0000000000000030 .L0 
     /tmp/ccWMkwFO.s:79     .text:0000000000000030 .L0 
     /tmp/ccWMkwFO.s:81     .text:0000000000000034 .L0 
     /tmp/ccWMkwFO.s:83     .text:0000000000000034 .L0 
     /tmp/ccWMkwFO.s:84     .text:0000000000000034 .L0 
       src/riscv.cpp:22     .text:0000000000000034 .L0 
     /tmp/ccWMkwFO.s:91     .text:0000000000000038 .L0 
       src/riscv.cpp:23     .text:0000000000000038 .L0 
     /tmp/ccWMkwFO.s:97     .text:000000000000003c .L0 
       src/riscv.cpp:24     .text:000000000000003c .L0 
     /tmp/ccWMkwFO.s:103    .text:0000000000000040 .L0 
       src/riscv.cpp:25     .text:0000000000000040 .L0 
     /tmp/ccWMkwFO.s:109    .text:0000000000000044 .L0 
       src/riscv.cpp:26     .text:0000000000000044 .L0 
     /tmp/ccWMkwFO.s:119    .text:0000000000000048 .L0 
     /tmp/ccWMkwFO.s:120    .text:0000000000000048 .L0 
     /tmp/ccWMkwFO.s:121    .text:0000000000000048 .L0 
  src/../h/riscv.hpp:107    .text:0000000000000048 .L0 
     /tmp/ccWMkwFO.s:129    .text:0000000000000050 .L0 
     /tmp/ccWMkwFO.s:130    .text:0000000000000050 .L0 
     /tmp/ccWMkwFO.s:136    .text:0000000000000054 .L0 
     /tmp/ccWMkwFO.s:137    .text:0000000000000054 .L0 
     /tmp/ccWMkwFO.s:139    .text:0000000000000058 .L0 
     /tmp/ccWMkwFO.s:142    .text:0000000000000060 .L0 
     /tmp/ccWMkwFO.s:145    .text:0000000000000068 .L0 
     /tmp/ccWMkwFO.s:148    .text:0000000000000070 .L0 
     /tmp/ccWMkwFO.s:152    .text:0000000000000078 .L0 
     /tmp/ccWMkwFO.s:153    .text:0000000000000078 .L0 
     /tmp/ccWMkwFO.s:157    .text:0000000000000088 .L0 
     /tmp/ccWMkwFO.s:158    .text:0000000000000088 .L0 
     /tmp/ccWMkwFO.s:162    .text:0000000000000094 .L0 
     /tmp/ccWMkwFO.s:163    .text:0000000000000094 .L0 
     /tmp/ccWMkwFO.s:167    .text:00000000000000a4 .L0 
     /tmp/ccWMkwFO.s:168    .text:00000000000000a4 .L0 
     /tmp/ccWMkwFO.s:174    .text:00000000000000b4 .L0 
GAS LISTING /tmp/ccWMkwFO.s 			page 22


     /tmp/ccWMkwFO.s:175    .text:00000000000000b4 .L0 
     /tmp/ccWMkwFO.s:176    .text:00000000000000b4 .L0 
  src/../h/riscv.hpp:119    .text:00000000000000b4 .L0 
     /tmp/ccWMkwFO.s:184    .text:00000000000000bc .L0 
     /tmp/ccWMkwFO.s:185    .text:00000000000000bc .L0 
     /tmp/ccWMkwFO.s:189    .text:00000000000000c0 .L0 
     /tmp/ccWMkwFO.s:192    .text:00000000000000c8 .L0 
     /tmp/ccWMkwFO.s:193    .text:00000000000000c8 .L0 
     /tmp/ccWMkwFO.s:197    .text:00000000000000d8 .L0 
     /tmp/ccWMkwFO.s:198    .text:00000000000000d8 .L0 
     /tmp/ccWMkwFO.s:204    .text:00000000000000e8 .L0 
     /tmp/ccWMkwFO.s:205    .text:00000000000000e8 .L0 
     /tmp/ccWMkwFO.s:206    .text:00000000000000e8 .L0 
  src/../h/riscv.hpp:143    .text:00000000000000e8 .L0 
     /tmp/ccWMkwFO.s:214    .text:00000000000000f0 .L0 
     /tmp/ccWMkwFO.s:215    .text:00000000000000f0 .L0 
     /tmp/ccWMkwFO.s:219    .text:00000000000000f4 .L0 
     /tmp/ccWMkwFO.s:222    .text:00000000000000fc .L0 
     /tmp/ccWMkwFO.s:223    .text:00000000000000fc .L0 
     /tmp/ccWMkwFO.s:229    .text:000000000000010c .L0 
     /tmp/ccWMkwFO.s:230    .text:0000000000000110 .L0 
     /tmp/ccWMkwFO.s:231    .text:0000000000000110 .L0 
     /tmp/ccWMkwFO.s:233    .text:0000000000000114 .L0 
     /tmp/ccWMkwFO.s:234    .text:0000000000000114 .L0 
     /tmp/ccWMkwFO.s:236    .text:0000000000000118 .L0 
     /tmp/ccWMkwFO.s:239    .text:000000000000011c .L0 
     /tmp/ccWMkwFO.s:243    .text:0000000000000120 .L0 
     /tmp/ccWMkwFO.s:249    .text:0000000000000120 .L0 
     /tmp/ccWMkwFO.s:250    .text:0000000000000120 .L0 
     /tmp/ccWMkwFO.s:251    .text:0000000000000120 .L0 
  src/../h/riscv.hpp:119    .text:0000000000000120 .L0 
     /tmp/ccWMkwFO.s:259    .text:0000000000000128 .L0 
     /tmp/ccWMkwFO.s:260    .text:0000000000000128 .L0 
     /tmp/ccWMkwFO.s:264    .text:000000000000012c .L0 
     /tmp/ccWMkwFO.s:266    .text:0000000000000130 .L0 
     /tmp/ccWMkwFO.s:270    .text:0000000000000134 .L0 
     /tmp/ccWMkwFO.s:271    .text:0000000000000134 .L0 
     /tmp/ccWMkwFO.s:272    .text:0000000000000134 .L0 
  src/../h/riscv.hpp:187    .text:0000000000000134 .L0 
     /tmp/ccWMkwFO.s:280    .text:000000000000013c .L0 
     /tmp/ccWMkwFO.s:281    .text:000000000000013c .L0 
     /tmp/ccWMkwFO.s:285    .text:0000000000000140 .L0 
     /tmp/ccWMkwFO.s:287    .text:0000000000000144 .L0 
     /tmp/ccWMkwFO.s:288    .text:0000000000000144 .L0 
       src/riscv.cpp:39     .text:0000000000000144 .L0 
     /tmp/ccWMkwFO.s:295    .text:0000000000000148 .L0 
     /tmp/ccWMkwFO.s:296    .text:0000000000000148 .L0 
     /tmp/ccWMkwFO.s:297    .text:0000000000000148 .L0 
     /tmp/ccWMkwFO.s:300    .text:0000000000000148 .L0 
     /tmp/ccWMkwFO.s:310    .text:0000000000000160 .L0 
       src/riscv.cpp:157    .text:0000000000000160 .L0 
     /tmp/ccWMkwFO.s:316    .text:0000000000000164 .L0 
     /tmp/ccWMkwFO.s:318    .text:0000000000000164 .L0 
     /tmp/ccWMkwFO.s:323    .text:0000000000000168 .L0 
  src/../h/riscv.hpp:193    .text:0000000000000168 .L0 
     /tmp/ccWMkwFO.s:333    .text:000000000000016c .L0 
     /tmp/ccWMkwFO.s:334    .text:000000000000016c .L0 
GAS LISTING /tmp/ccWMkwFO.s 			page 23


     /tmp/ccWMkwFO.s:339    .text:0000000000000170 .L0 
  src/../h/riscv.hpp:125    .text:0000000000000170 .L0 
     /tmp/ccWMkwFO.s:346    .text:0000000000000174 .L0 
     /tmp/ccWMkwFO.s:354    .text:0000000000000178 .L0 
     /tmp/ccWMkwFO.s:355    .text:0000000000000178 .L0 
       src/riscv.cpp:55     .text:0000000000000178 .L0 
     /tmp/ccWMkwFO.s:362    .text:000000000000017c .L0 
     /tmp/ccWMkwFO.s:363    .text:000000000000017c .L0 
     /tmp/ccWMkwFO.s:365    .text:000000000000017c .L0 
     /tmp/ccWMkwFO.s:370    .text:0000000000000188 .L0 
       src/riscv.cpp:59     .text:0000000000000188 .L0 
     /tmp/ccWMkwFO.s:377    .text:000000000000018c .L0 
     /tmp/ccWMkwFO.s:381    .text:0000000000000190 .L0 
     /tmp/ccWMkwFO.s:382    .text:0000000000000190 .L0 
       src/riscv.cpp:62     .text:0000000000000190 .L0 
     /tmp/ccWMkwFO.s:389    .text:0000000000000194 .L0 
     /tmp/ccWMkwFO.s:391    .text:0000000000000194 .L0 
     /tmp/ccWMkwFO.s:394    .text:000000000000019c .L0 
       src/riscv.cpp:65     .text:000000000000019c .L0 
     /tmp/ccWMkwFO.s:401    .text:00000000000001a0 .L0 
     /tmp/ccWMkwFO.s:405    .text:00000000000001a4 .L0 
     /tmp/ccWMkwFO.s:406    .text:00000000000001a4 .L0 
     /tmp/ccWMkwFO.s:407    .text:00000000000001a4 .L0 
       src/riscv.cpp:150    .text:00000000000001a4 .L0 
     /tmp/ccWMkwFO.s:414    .text:00000000000001a8 .L0 
     /tmp/ccWMkwFO.s:416    .text:00000000000001a8 .L0 
     /tmp/ccWMkwFO.s:419    .text:00000000000001ac .L0 
       src/riscv.cpp:152    .text:00000000000001ac .L0 
     /tmp/ccWMkwFO.s:426    .text:00000000000001b0 .L0 
     /tmp/ccWMkwFO.s:433    .text:00000000000001b4 .L0 
     /tmp/ccWMkwFO.s:434    .text:00000000000001b4 .L0 
     /tmp/ccWMkwFO.s:440    .text:00000000000001c8 .L0 
     /tmp/ccWMkwFO.s:441    .text:00000000000001c8 .L0 
     /tmp/ccWMkwFO.s:447    .text:00000000000001dc .L0 
     /tmp/ccWMkwFO.s:448    .text:00000000000001dc .L0 
     /tmp/ccWMkwFO.s:453    .text:00000000000001f0 .L0 
     /tmp/ccWMkwFO.s:459    .text:00000000000001f0 _ZN5Riscv20handleTimerInterruptEv
     /tmp/ccWMkwFO.s:462    .text:00000000000001f0 .L0 
     /tmp/ccWMkwFO.s:463    .text:00000000000001f0 .L0 
     /tmp/ccWMkwFO.s:464    .text:00000000000001f4 .L0 
     /tmp/ccWMkwFO.s:466    .text:00000000000001f8 .L0 
     /tmp/ccWMkwFO.s:468    .text:00000000000001fc .L0 
     /tmp/ccWMkwFO.s:473    .text:00000000000001fc .L0 
     /tmp/ccWMkwFO.s:474    .text:00000000000001fc .L0 
     /tmp/ccWMkwFO.s:475    .text:00000000000001fc .L0 
     /tmp/ccWMkwFO.s:487    .text:0000000000000204 .L0 
     /tmp/ccWMkwFO.s:488    .text:0000000000000204 .L0 
     /tmp/ccWMkwFO.s:489    .text:0000000000000204 .L0 
  src/../h/riscv.hpp:119    .text:0000000000000204 .L0 
     /tmp/ccWMkwFO.s:497    .text:000000000000020c .L0 
     /tmp/ccWMkwFO.s:498    .text:000000000000020c .L0 
     /tmp/ccWMkwFO.s:502    .text:0000000000000210 .L0 
     /tmp/ccWMkwFO.s:506    .text:0000000000000214 .L0 
     /tmp/ccWMkwFO.s:507    .text:0000000000000214 .L0 
     /tmp/ccWMkwFO.s:508    .text:0000000000000214 .L0 
  src/../h/riscv.hpp:187    .text:0000000000000214 .L0 
     /tmp/ccWMkwFO.s:516    .text:000000000000021c .L0 
GAS LISTING /tmp/ccWMkwFO.s 			page 24


     /tmp/ccWMkwFO.s:517    .text:000000000000021c .L0 
     /tmp/ccWMkwFO.s:521    .text:0000000000000220 .L0 
     /tmp/ccWMkwFO.s:523    .text:0000000000000224 .L0 
     /tmp/ccWMkwFO.s:524    .text:0000000000000224 .L0 
     /tmp/ccWMkwFO.s:529    .text:0000000000000228 .L0 
  src/../h/riscv.hpp:193    .text:0000000000000228 .L0 
     /tmp/ccWMkwFO.s:539    .text:000000000000022c .L0 
     /tmp/ccWMkwFO.s:540    .text:000000000000022c .L0 
     /tmp/ccWMkwFO.s:545    .text:0000000000000230 .L0 
  src/../h/riscv.hpp:125    .text:0000000000000230 .L0 
     /tmp/ccWMkwFO.s:555    .text:0000000000000234 .L0 
     /tmp/ccWMkwFO.s:556    .text:0000000000000238 .L0 
     /tmp/ccWMkwFO.s:557    .text:0000000000000238 .L0 
     /tmp/ccWMkwFO.s:559    .text:000000000000023c .L0 
     /tmp/ccWMkwFO.s:561    .text:0000000000000240 .L0 
     /tmp/ccWMkwFO.s:567    .text:0000000000000240 _ZN5Riscv22handleConsoleInterruptEv
     /tmp/ccWMkwFO.s:570    .text:0000000000000240 .L0 
     /tmp/ccWMkwFO.s:571    .text:0000000000000240 .L0 
     /tmp/ccWMkwFO.s:572    .text:0000000000000244 .L0 
     /tmp/ccWMkwFO.s:575    .text:000000000000024c .L0 
     /tmp/ccWMkwFO.s:576    .text:000000000000024c .L0 
     /tmp/ccWMkwFO.s:578    .text:0000000000000250 .L0 
     /tmp/ccWMkwFO.s:580    .text:0000000000000250 .L0 
     /tmp/ccWMkwFO.s:581    .text:0000000000000250 .L0 
     /tmp/ccWMkwFO.s:584    .text:0000000000000258 .L0 
     /tmp/ccWMkwFO.s:585    .text:000000000000025c .L0 
     /tmp/ccWMkwFO.s:587    .text:0000000000000260 .L0 
     /tmp/ccWMkwFO.s:588    .text:0000000000000260 .L0 
     /tmp/ccWMkwFO.s:590    .text:0000000000000264 .L0 
     /tmp/ccWMkwFO.s:592    .text:0000000000000268 .L0 
     /tmp/ccWMkwFO.s:598    .text:0000000000000268 _ZN5Riscv14handleBadCauseEv
     /tmp/ccWMkwFO.s:601    .text:0000000000000268 .L0 
     /tmp/ccWMkwFO.s:602    .text:0000000000000268 .L0 
     /tmp/ccWMkwFO.s:603    .text:000000000000026c .L0 
     /tmp/ccWMkwFO.s:605    .text:0000000000000270 .L0 
     /tmp/ccWMkwFO.s:607    .text:0000000000000274 .L0 
     /tmp/ccWMkwFO.s:609    .text:0000000000000274 .L0 
     /tmp/ccWMkwFO.s:610    .text:0000000000000278 .L0 
     /tmp/ccWMkwFO.s:611    .text:0000000000000278 .L0 
     /tmp/ccWMkwFO.s:613    .text:000000000000027c .L0 
     /tmp/ccWMkwFO.s:615    .text:0000000000000280 .L0 
     /tmp/ccWMkwFO.s:623    .text:0000000000000280 .L0 
     /tmp/ccWMkwFO.s:53     .rodata.str1.8:0000000000000058 .LC3
     /tmp/ccWMkwFO.s:153    .text:0000000000000078 .L0 
     /tmp/ccWMkwFO.s:56     .rodata.str1.8:0000000000000068 .LC4
     /tmp/ccWMkwFO.s:163    .text:0000000000000094 .L0 
     /tmp/ccWMkwFO.s:59     .rodata.str1.8:0000000000000070 .LC5
     /tmp/ccWMkwFO.s:168    .text:00000000000000a4 .L0 
     /tmp/ccWMkwFO.s:193    .text:00000000000000c8 .L0 
     /tmp/ccWMkwFO.s:62     .rodata.str1.8:0000000000000078 .LC6
     /tmp/ccWMkwFO.s:198    .text:00000000000000d8 .L0 
     /tmp/ccWMkwFO.s:223    .text:00000000000000fc .L0 
     /tmp/ccWMkwFO.s:44     .rodata.str1.8:0000000000000000 .LC0
     /tmp/ccWMkwFO.s:434    .text:00000000000001b4 .L0 
     /tmp/ccWMkwFO.s:47     .rodata.str1.8:0000000000000018 .LC1
     /tmp/ccWMkwFO.s:441    .text:00000000000001c8 .L0 
     /tmp/ccWMkwFO.s:50     .rodata.str1.8:0000000000000038 .LC2
GAS LISTING /tmp/ccWMkwFO.s 			page 25


     /tmp/ccWMkwFO.s:448    .text:00000000000001dc .L0 
     /tmp/ccWMkwFO.s:242    .text:0000000000000120 .L13
     /tmp/ccWMkwFO.s:428    .text:00000000000001b4 .L14
     /tmp/ccWMkwFO.s:438    .text:00000000000001c8 .L15
     /tmp/ccWMkwFO.s:445    .text:00000000000001dc .L16
     /tmp/ccWMkwFO.s:379    .text:0000000000000190 .L5
     /tmp/ccWMkwFO.s:403    .text:00000000000001a4 .L6
     /tmp/ccWMkwFO.s:348    .text:0000000000000178 .L17
     /tmp/ccWMkwFO.s:226    .text:000000000000010c .L3
     /tmp/ccWMkwFO.s:307    .text:0000000000000160 .L7
     /tmp/ccWMkwFO.s:150    .text:0000000000000078 .L10
     /tmp/ccWMkwFO.s:1563   .debug_abbrev:0000000000000000 .Ldebug_abbrev0
     /tmp/ccWMkwFO.s:2430   .debug_str:0000000000000459 .LASF82
     /tmp/ccWMkwFO.s:2390   .debug_str:0000000000000319 .LASF83
     /tmp/ccWMkwFO.s:2450   .debug_str:00000000000005b3 .LASF84
     /tmp/ccWMkwFO.s:5      .text:0000000000000000 .Ltext0
     /tmp/ccWMkwFO.s:618    .text:0000000000000280 .Letext0
     /tmp/ccWMkwFO.s:2278   .debug_line:0000000000000000 .Ldebug_line0
     /tmp/ccWMkwFO.s:2368   .debug_str:0000000000000295 .LASF0
     /tmp/ccWMkwFO.s:2384   .debug_str:00000000000002de .LASF1
     /tmp/ccWMkwFO.s:2360   .debug_str:000000000000025d .LASF2
     /tmp/ccWMkwFO.s:2348   .debug_str:0000000000000218 .LASF4
     /tmp/ccWMkwFO.s:2410   .debug_str:00000000000003bc .LASF3
     /tmp/ccWMkwFO.s:2300   .debug_str:0000000000000089 .LASF5
     /tmp/ccWMkwFO.s:2388   .debug_str:0000000000000306 .LASF6
     /tmp/ccWMkwFO.s:2366   .debug_str:0000000000000282 .LASF7
     /tmp/ccWMkwFO.s:2436   .debug_str:000000000000053e .LASF8
     /tmp/ccWMkwFO.s:2340   .debug_str:00000000000001ca .LASF9
     /tmp/ccWMkwFO.s:2394   .debug_str:0000000000000349 .LASF10
     /tmp/ccWMkwFO.s:2432   .debug_str:000000000000051d .LASF11
     /tmp/ccWMkwFO.s:2302   .debug_str:0000000000000090 .LASF12
     /tmp/ccWMkwFO.s:2284   .debug_str:0000000000000022 .LASF13
     /tmp/ccWMkwFO.s:2310   .debug_str:00000000000000da .LASF14
     /tmp/ccWMkwFO.s:2404   .debug_str:0000000000000383 .LASF15
     /tmp/ccWMkwFO.s:2314   .debug_str:00000000000000eb .LASF16
     /tmp/ccWMkwFO.s:2380   .debug_str:00000000000002cd .LASF85
     /tmp/ccWMkwFO.s:2354   .debug_str:0000000000000234 .LASF86
     /tmp/ccWMkwFO.s:2420   .debug_str:0000000000000417 .LASF17
     /tmp/ccWMkwFO.s:2378   .debug_str:00000000000002c4 .LASF18
     /tmp/ccWMkwFO.s:2350   .debug_str:000000000000021f .LASF19
     /tmp/ccWMkwFO.s:2402   .debug_str:0000000000000378 .LASF20
     /tmp/ccWMkwFO.s:2444   .debug_str:0000000000000588 .LASF22
     /tmp/ccWMkwFO.s:2296   .debug_str:0000000000000073 .LASF21
     /tmp/ccWMkwFO.s:2328   .debug_str:0000000000000165 .LASF23
     /tmp/ccWMkwFO.s:2422   .debug_str:0000000000000420 .LASF24
     /tmp/ccWMkwFO.s:2282   .debug_str:0000000000000008 .LASF25
     /tmp/ccWMkwFO.s:2414   .debug_str:00000000000003d5 .LASF26
     /tmp/ccWMkwFO.s:2306   .debug_str:00000000000000b4 .LASF27
     /tmp/ccWMkwFO.s:2286   .debug_str:0000000000000032 .LASF28
     /tmp/ccWMkwFO.s:2330   .debug_str:0000000000000180 .LASF30
     /tmp/ccWMkwFO.s:2324   .debug_str:000000000000014d .LASF32
     /tmp/ccWMkwFO.s:2322   .debug_str:0000000000000138 .LASF34
     /tmp/ccWMkwFO.s:2412   .debug_str:00000000000003ce .LASF29
     /tmp/ccWMkwFO.s:2396   .debug_str:0000000000000358 .LASF31
     /tmp/ccWMkwFO.s:2428   .debug_str:0000000000000452 .LASF33
     /tmp/ccWMkwFO.s:2424   .debug_str:000000000000042d .LASF35
     /tmp/ccWMkwFO.s:2336   .debug_str:00000000000001bc .LASF36
GAS LISTING /tmp/ccWMkwFO.s 			page 26


     /tmp/ccWMkwFO.s:2316   .debug_str:0000000000000101 .LASF37
     /tmp/ccWMkwFO.s:2280   .debug_str:0000000000000000 .LASF38
     /tmp/ccWMkwFO.s:2344   .debug_str:00000000000001ee .LASF39
     /tmp/ccWMkwFO.s:2298   .debug_str:0000000000000081 .LASF40
     /tmp/ccWMkwFO.s:2304   .debug_str:00000000000000a0 .LASF41
     /tmp/ccWMkwFO.s:2448   .debug_str:00000000000005ab .LASF42
     /tmp/ccWMkwFO.s:2332   .debug_str:0000000000000195 .LASF43
     /tmp/ccWMkwFO.s:2370   .debug_str:00000000000002a2 .LASF44
     /tmp/ccWMkwFO.s:2442   .debug_str:0000000000000575 .LASF45
     /tmp/ccWMkwFO.s:2294   .debug_str:000000000000006c .LASF46
     /tmp/ccWMkwFO.s:2334   .debug_str:00000000000001a9 .LASF47
     /tmp/ccWMkwFO.s:2338   .debug_str:00000000000001c4 .LASF48
     /tmp/ccWMkwFO.s:2426   .debug_str:0000000000000440 .LASF49
     /tmp/ccWMkwFO.s:2292   .debug_str:0000000000000066 .LASF50
     /tmp/ccWMkwFO.s:2452   .debug_str:00000000000005d7 .LASF51
     /tmp/ccWMkwFO.s:2446   .debug_str:00000000000005a0 .LASF52
     /tmp/ccWMkwFO.s:2408   .debug_str:00000000000003a4 .LASF53
     /tmp/ccWMkwFO.s:2382   .debug_str:00000000000002d3 .LASF54
     /tmp/ccWMkwFO.s:2356   .debug_str:000000000000023f .LASF55
     /tmp/ccWMkwFO.s:2308   .debug_str:00000000000000d0 .LASF56
     /tmp/ccWMkwFO.s:2346   .debug_str:0000000000000202 .LASF57
     /tmp/ccWMkwFO.s:2362   .debug_str:000000000000026b .LASF58
     /tmp/ccWMkwFO.s:2342   .debug_str:00000000000001d8 .LASF59
     /tmp/ccWMkwFO.s:2372   .debug_str:00000000000002a9 .LASF60
     /tmp/ccWMkwFO.s:2440   .debug_str:000000000000055a .LASF62
     /tmp/ccWMkwFO.s:2386   .debug_str:00000000000002f1 .LASF61
     /tmp/ccWMkwFO.s:2392   .debug_str:0000000000000327 .LASF63
     /tmp/ccWMkwFO.s:2418   .debug_str:0000000000000400 .LASF64
     /tmp/ccWMkwFO.s:2290   .debug_str:0000000000000042 .LASF65
     /tmp/ccWMkwFO.s:2326   .debug_str:0000000000000156 .LASF66
     /tmp/ccWMkwFO.s:2416   .debug_str:00000000000003e4 .LASF67
     /tmp/ccWMkwFO.s:599    .text:0000000000000268 .LFB20
     /tmp/ccWMkwFO.s:616    .text:0000000000000280 .LFE20
     /tmp/ccWMkwFO.s:568    .text:0000000000000240 .LFB19
     /tmp/ccWMkwFO.s:593    .text:0000000000000268 .LFE19
     /tmp/ccWMkwFO.s:582    .text:0000000000000258 .LVL42
     /tmp/ccWMkwFO.s:460    .text:00000000000001f0 .LFB18
     /tmp/ccWMkwFO.s:562    .text:0000000000000240 .LFE18
     /tmp/ccWMkwFO.s:2374   .debug_str:00000000000002b7 .LASF68
     /tmp/ccWMkwFO.s:2398   .debug_str:000000000000036b .LASF69
     /tmp/ccWMkwFO.s:471    .text:00000000000001fc .LBB50
     /tmp/ccWMkwFO.s:483    .text:0000000000000204 .LBE50
     /tmp/ccWMkwFO.s:2139   .debug_loc:0000000000000000 .LLST8
     /tmp/ccWMkwFO.s:485    .text:0000000000000204 .LBB52
     /tmp/ccWMkwFO.s:500    .text:0000000000000210 .LBE52
     /tmp/ccWMkwFO.s:504    .text:0000000000000214 .LBB54
     /tmp/ccWMkwFO.s:519    .text:0000000000000220 .LBE54
     /tmp/ccWMkwFO.s:526    .text:0000000000000228 .LBB56
     /tmp/ccWMkwFO.s:537    .text:000000000000022c .LBE56
     /tmp/ccWMkwFO.s:2147   .debug_loc:0000000000000024 .LLST9
     /tmp/ccWMkwFO.s:542    .text:0000000000000230 .LBB58
     /tmp/ccWMkwFO.s:553    .text:0000000000000234 .LBE58
     /tmp/ccWMkwFO.s:2154   .debug_loc:0000000000000047 .LLST10
     /tmp/ccWMkwFO.s:69     .text:0000000000000020 .LFB17
     /tmp/ccWMkwFO.s:454    .text:00000000000001f0 .LFE17
     /tmp/ccWMkwFO.s:2288   .debug_str:000000000000003b .LASF70
     /tmp/ccWMkwFO.s:2161   .debug_loc:000000000000006a .LLST0
GAS LISTING /tmp/ccWMkwFO.s 			page 27


     /tmp/ccWMkwFO.s:245    .text:0000000000000120 .LBB37
     /tmp/ccWMkwFO.s:431    .text:00000000000001b4 .LBE37
     /tmp/ccWMkwFO.s:2376   .debug_str:00000000000002bc .LASF71
     /tmp/ccWMkwFO.s:2172   .debug_loc:00000000000000a0 .LLST1
     /tmp/ccWMkwFO.s:2400   .debug_str:0000000000000373 .LASF72
     /tmp/ccWMkwFO.s:2191   .debug_loc:00000000000000fc .LLST2
     /tmp/ccWMkwFO.s:2206   .debug_loc:0000000000000136 .LLST3
     /tmp/ccWMkwFO.s:2237   .debug_loc:00000000000001bc .LLST4
     /tmp/ccWMkwFO.s:352    .text:0000000000000178 .LBB43
     /tmp/ccWMkwFO.s:429    .text:00000000000001b4 .LBE43
     /tmp/ccWMkwFO.s:2244   .debug_loc:00000000000001df .LLST5
     /tmp/ccWMkwFO.s:368    .text:0000000000000188 .LVL25
     /tmp/ccWMkwFO.s:392    .text:000000000000019c .LVL28
     /tmp/ccWMkwFO.s:247    .text:0000000000000120 .LBB38
     /tmp/ccWMkwFO.s:262    .text:000000000000012c .LBE38
     /tmp/ccWMkwFO.s:268    .text:0000000000000134 .LBB40
     /tmp/ccWMkwFO.s:283    .text:0000000000000140 .LBE40
     /tmp/ccWMkwFO.s:320    .text:0000000000000168 .LBB44
     /tmp/ccWMkwFO.s:331    .text:000000000000016c .LBE44
     /tmp/ccWMkwFO.s:2251   .debug_loc:0000000000000202 .LLST6
     /tmp/ccWMkwFO.s:336    .text:0000000000000170 .LBB46
     /tmp/ccWMkwFO.s:350    .text:0000000000000178 .LBE46
     /tmp/ccWMkwFO.s:2258   .debug_loc:0000000000000225 .LLST7
     /tmp/ccWMkwFO.s:116    .text:0000000000000048 .LBB30
     /tmp/ccWMkwFO.s:133    .text:0000000000000054 .LBE30
     /tmp/ccWMkwFO.s:172    .text:00000000000000b4 .LBB33
     /tmp/ccWMkwFO.s:187    .text:00000000000000c0 .LBE33
     /tmp/ccWMkwFO.s:202    .text:00000000000000e8 .LBB35
     /tmp/ccWMkwFO.s:217    .text:00000000000000f4 .LBE35
     /tmp/ccWMkwFO.s:155    .text:0000000000000088 .LVL6
     /tmp/ccWMkwFO.s:160    .text:0000000000000094 .LVL7
     /tmp/ccWMkwFO.s:165    .text:00000000000000a4 .LVL8
     /tmp/ccWMkwFO.s:170    .text:00000000000000b4 .LVL9
     /tmp/ccWMkwFO.s:190    .text:00000000000000c8 .LVL10
     /tmp/ccWMkwFO.s:195    .text:00000000000000d8 .LVL11
     /tmp/ccWMkwFO.s:200    .text:00000000000000e8 .LVL12
     /tmp/ccWMkwFO.s:220    .text:00000000000000fc .LVL13
     /tmp/ccWMkwFO.s:225    .text:000000000000010c .LVL14
     /tmp/ccWMkwFO.s:436    .text:00000000000001c4 .LVL33
     /tmp/ccWMkwFO.s:443    .text:00000000000001d8 .LVL34
     /tmp/ccWMkwFO.s:450    .text:00000000000001ec .LVL35
     /tmp/ccWMkwFO.s:10     .text:0000000000000000 .LFB16
     /tmp/ccWMkwFO.s:40     .text:0000000000000020 .LFE16
     /tmp/ccWMkwFO.s:2312   .debug_str:00000000000000e6 .LASF73
     /tmp/ccWMkwFO.s:2358   .debug_str:0000000000000257 .LASF74
     /tmp/ccWMkwFO.s:2320   .debug_str:0000000000000128 .LASF75
     /tmp/ccWMkwFO.s:2438   .debug_str:000000000000054e .LASF76
     /tmp/ccWMkwFO.s:2406   .debug_str:0000000000000399 .LASF77
     /tmp/ccWMkwFO.s:2318   .debug_str:0000000000000115 .LASF78
     /tmp/ccWMkwFO.s:2352   .debug_str:0000000000000228 .LASF79
     /tmp/ccWMkwFO.s:2434   .debug_str:000000000000052c .LASF80
     /tmp/ccWMkwFO.s:2364   .debug_str:0000000000000275 .LASF81
     /tmp/ccWMkwFO.s:470    .text:00000000000001fc .LVL36
     /tmp/ccWMkwFO.s:480    .text:0000000000000204 .LVL37
     /tmp/ccWMkwFO.s:525    .text:0000000000000228 .LVL38
     /tmp/ccWMkwFO.s:534    .text:000000000000022c .LVL39
     /tmp/ccWMkwFO.s:541    .text:0000000000000230 .LVL40
GAS LISTING /tmp/ccWMkwFO.s 			page 28


     /tmp/ccWMkwFO.s:550    .text:0000000000000234 .LVL41
     /tmp/ccWMkwFO.s:131    .text:0000000000000054 .LVL5
     /tmp/ccWMkwFO.s:237    .text:0000000000000118 .LVL15
     /tmp/ccWMkwFO.s:241    .text:0000000000000120 .LVL16
     /tmp/ccWMkwFO.s:293    .text:0000000000000148 .LVL17
     /tmp/ccWMkwFO.s:306    .text:0000000000000160 .LVL18
     /tmp/ccWMkwFO.s:347    .text:0000000000000178 .LVL22
     /tmp/ccWMkwFO.s:378    .text:0000000000000190 .LVL26
     /tmp/ccWMkwFO.s:402    .text:00000000000001a4 .LVL29
     /tmp/ccWMkwFO.s:412    .text:00000000000001a8 .LVL30
     /tmp/ccWMkwFO.s:360    .text:000000000000017c .LVL23
     /tmp/ccWMkwFO.s:366    .text:0000000000000180 .LVL24
     /tmp/ccWMkwFO.s:387    .text:0000000000000194 .LVL27
     /tmp/ccWMkwFO.s:427    .text:00000000000001b4 .LVL32
     /tmp/ccWMkwFO.s:319    .text:0000000000000168 .LVL19
     /tmp/ccWMkwFO.s:328    .text:000000000000016c .LVL20
     /tmp/ccWMkwFO.s:335    .text:0000000000000170 .LVL21
     /tmp/ccWMkwFO.s:624    .debug_info:0000000000000000 .Ldebug_info0

UNDEFINED SYMBOLS
_Z11printStringPKc
_Z12printIntegerm
__mem_alloc
__mem_free
console_handler
