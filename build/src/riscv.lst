GAS LISTING /tmp/ccW8jD6Z.s 			page 1


   1              		.file	"riscv.cpp"
   2              		.option pic
   3              		.option norelax
   4              		.text
   5              	.Ltext0:
   6              		.align	2
   7              		.globl	_ZN5Riscv10popSppSpieEv
   9              	_ZN5Riscv10popSppSpieEv:
  10              	.LFB21:
  11              		.file 1 "src/riscv.cpp"
   1:src/riscv.cpp **** //
   2:src/riscv.cpp **** // Created by marko on 20.4.22..
   3:src/riscv.cpp **** //
   4:src/riscv.cpp **** 
   5:src/riscv.cpp **** #include "../h/riscv.hpp"
   6:src/riscv.cpp **** #include "../lib/console.h"
   7:src/riscv.cpp **** #include "../h/print.hpp"
   8:src/riscv.cpp **** #include "../lib/mem.h"
   9:src/riscv.cpp **** #include "../h/kThread.hpp"
  10:src/riscv.cpp **** 
  11:src/riscv.cpp **** using Body = void (*)(void *);
  12:src/riscv.cpp **** 
  13:src/riscv.cpp **** void Riscv::popSppSpie()
  14:src/riscv.cpp **** {
  12              		.loc 1 14 1
  13              		.cfi_startproc
  14 0000 130101FF 		addi	sp,sp,-16
  15              		.cfi_def_cfa_offset 16
  16 0004 23348100 		sd	s0,8(sp)
  17              		.cfi_offset 8, -8
  18 0008 13040101 		addi	s0,sp,16
  19              		.cfi_def_cfa 8, 0
  15:src/riscv.cpp ****     __asm__ volatile ("csrw sepc, ra");
  20              		.loc 1 15 5
  21              		.loc 1 15 39 is_stmt 0
  22              	#APP
  23              	# 15 "src/riscv.cpp" 1
  16              	    __asm__ volatile ("sret");
  24              		csrw sepc, ra
  25              	# 0 "" 2
  26              		.loc 1 16 5 is_stmt 1
  27              		.loc 1 16 30 is_stmt 0
  28              	# 16 "src/riscv.cpp" 1
  17              	}
  29              		sret
  30              	# 0 "" 2
  31              		.loc 1 17 1
  32              	#NO_APP
  33 0014 03348100 		ld	s0,8(sp)
  34              		.cfi_restore 8
  35              		.cfi_def_cfa 2, 16
  36 0018 13010101 		addi	sp,sp,16
  37              		.cfi_def_cfa_offset 0
  38 001c 67800000 		jr	ra
  39              		.cfi_endproc
  40              	.LFE21:
  42              		.section	.rodata.str1.8,"aMS",@progbits,1
GAS LISTING /tmp/ccW8jD6Z.s 			page 2


  43              		.align	3
  44              	.LC0:
  45 0000 75737065 		.string	"uspesno kreirana nit\n"
  45      736E6F20 
  45      6B726569 
  45      72616E61 
  45      206E6974 
  46 0016 0000     		.align	3
  47              	.LC1:
  48 0018 496C6567 		.string	"Ilegalna instrukcija\n:"
  48      616C6E61 
  48      20696E73 
  48      7472756B 
  48      63696A61 
  49 002f 00       		.align	3
  50              	.LC2:
  51 0030 4E65646F 		.string	"Nedozvolena adresa citanja\n"
  51      7A766F6C 
  51      656E6120 
  51      61647265 
  51      73612063 
  52 004c 00000000 		.align	3
  53              	.LC3:
  54 0050 4E65646F 		.string	"Nedozvolena adresa upisa\n"
  54      7A766F6C 
  54      656E6120 
  54      61647265 
  54      73612075 
  55 006a 00000000 		.align	3
  55      0000
  56              	.LC4:
  57 0070 73636175 		.string	"scause: "
  57      73653A20 
  57      00
  58 0079 00000000 		.align	3
  58      000000
  59              	.LC5:
  60 0080 0A00     		.string	"\n"
  61 0082 00000000 		.align	3
  61      0000
  62              	.LC6:
  63 0088 73657063 		.string	"sepc: "
  63      3A2000
  64 008f 00       		.align	3
  65              	.LC7:
  66 0090 73747661 		.string	"stval: "
  66      6C3A2000 
  67              		.text
  68              		.align	2
  69              		.globl	_ZN5Riscv13handleSyscallEv
  71              	_ZN5Riscv13handleSyscallEv:
  72              	.LFB22:
  18:src/riscv.cpp **** 
  19:src/riscv.cpp **** void Riscv::handleSyscall() {
  73              		.loc 1 19 29 is_stmt 1
  74              		.cfi_startproc
  75 0020 130101FA 		addi	sp,sp,-96
GAS LISTING /tmp/ccW8jD6Z.s 			page 3


  76              		.cfi_def_cfa_offset 96
  77 0024 233C1104 		sd	ra,88(sp)
  78 0028 23388104 		sd	s0,80(sp)
  79 002c 23349104 		sd	s1,72(sp)
  80              		.cfi_offset 1, -8
  81              		.cfi_offset 8, -16
  82              		.cfi_offset 9, -24
  83 0030 13040106 		addi	s0,sp,96
  84              		.cfi_def_cfa 8, 0
  20:src/riscv.cpp **** 
  21:src/riscv.cpp ****     uint64  scause = r_scause();
  85              		.loc 1 21 5
  86              	.LBB30:
  87              	.LBB31:
  88              		.file 2 "src/../h/riscv.hpp"
   1:src/../h/riscv.hpp **** //
   2:src/../h/riscv.hpp **** // Created by marko on 20.4.22..
   3:src/../h/riscv.hpp **** //
   4:src/../h/riscv.hpp **** 
   5:src/../h/riscv.hpp **** #ifndef OS_PROJECT_BASE_RISCV_HPP
   6:src/../h/riscv.hpp **** #define OS_PROJECT_BASE_RISCV_HPP
   7:src/../h/riscv.hpp **** 
   8:src/../h/riscv.hpp **** #include "../lib/hw.h"
   9:src/../h/riscv.hpp **** //inline fje - bitno: nece se generisati masinski kod za poziv fje na mestu koriscenja u cpp kodu
  10:src/../h/riscv.hpp **** //ako imamo poziv u ra reg ce biti upisana adresa na koju prog treba da se vrati (sa inline nema to
  11:src/../h/riscv.hpp **** class Riscv
  12:src/../h/riscv.hpp **** {
  13:src/../h/riscv.hpp **** public:
  14:src/../h/riscv.hpp **** 
  15:src/../h/riscv.hpp ****     // pop sstatus.spp and sstatus.spie bits (has to be a non inline function)
  16:src/../h/riscv.hpp ****     static void popSppSpie();
  17:src/../h/riscv.hpp **** 
  18:src/../h/riscv.hpp ****     // push x3..x31 registers onto stack
  19:src/../h/riscv.hpp ****     static void pushRegisters();
  20:src/../h/riscv.hpp **** 
  21:src/../h/riscv.hpp ****     // pop x3..x31 registers onto stack
  22:src/../h/riscv.hpp ****     static void popRegisters();
  23:src/../h/riscv.hpp ****     //supervisor trap
  24:src/../h/riscv.hpp ****     static void supervisorTrap();
  25:src/../h/riscv.hpp **** 
  26:src/../h/riscv.hpp **** 
  27:src/../h/riscv.hpp ****     // read register scause
  28:src/../h/riscv.hpp ****     static uint64 r_scause();
  29:src/../h/riscv.hpp **** 
  30:src/../h/riscv.hpp ****     // write register scause
  31:src/../h/riscv.hpp ****     static void w_scause(uint64 scause);
  32:src/../h/riscv.hpp **** 
  33:src/../h/riscv.hpp ****     // read register sepc
  34:src/../h/riscv.hpp ****     static uint64 r_sepc();
  35:src/../h/riscv.hpp **** 
  36:src/../h/riscv.hpp ****     // write register sepc
  37:src/../h/riscv.hpp ****     static void w_sepc(uint64 sepc);
  38:src/../h/riscv.hpp **** 
  39:src/../h/riscv.hpp ****     // read register stvec
  40:src/../h/riscv.hpp ****     static uint64 r_stvec();
  41:src/../h/riscv.hpp **** 
  42:src/../h/riscv.hpp ****     // write register stvec
GAS LISTING /tmp/ccW8jD6Z.s 			page 4


  43:src/../h/riscv.hpp ****     static void w_stvec(uint64 stvec);
  44:src/../h/riscv.hpp **** 
  45:src/../h/riscv.hpp ****     // read register stval
  46:src/../h/riscv.hpp ****     static uint64 r_stval();
  47:src/../h/riscv.hpp **** 
  48:src/../h/riscv.hpp ****     // write register stval
  49:src/../h/riscv.hpp ****     static void w_stval(uint64 stval);
  50:src/../h/riscv.hpp **** 
  51:src/../h/riscv.hpp ****     enum BitMaskSip
  52:src/../h/riscv.hpp ****     {
  53:src/../h/riscv.hpp ****         SIP_SSIP = (1 << 1),
  54:src/../h/riscv.hpp ****         SIP_STIP = (1 << 5),
  55:src/../h/riscv.hpp ****         SIP_SEIP = (1 << 9),
  56:src/../h/riscv.hpp ****     };
  57:src/../h/riscv.hpp **** 
  58:src/../h/riscv.hpp ****     // mask set register sip
  59:src/../h/riscv.hpp ****     static void ms_sip(uint64 mask);
  60:src/../h/riscv.hpp **** 
  61:src/../h/riscv.hpp ****     // mask clear register sip
  62:src/../h/riscv.hpp ****     static void mc_sip(uint64 mask);
  63:src/../h/riscv.hpp **** 
  64:src/../h/riscv.hpp ****     // read register sip
  65:src/../h/riscv.hpp ****     static uint64 r_sip();
  66:src/../h/riscv.hpp **** 
  67:src/../h/riscv.hpp ****     // write register sip
  68:src/../h/riscv.hpp ****     static void w_sip(uint64 sip);
  69:src/../h/riscv.hpp **** 
  70:src/../h/riscv.hpp ****     enum BitMaskSstatus
  71:src/../h/riscv.hpp ****     {
  72:src/../h/riscv.hpp ****         SSTATUS_SIE = (1 << 1),
  73:src/../h/riscv.hpp ****         SSTATUS_SPIE = (1 << 5),
  74:src/../h/riscv.hpp ****         SSTATUS_SPP = (1 << 8),
  75:src/../h/riscv.hpp ****     };
  76:src/../h/riscv.hpp **** 
  77:src/../h/riscv.hpp ****     // mask set register sstatus
  78:src/../h/riscv.hpp ****     static void ms_sstatus(uint64 mask);
  79:src/../h/riscv.hpp **** 
  80:src/../h/riscv.hpp ****     // mask clear register sstatus
  81:src/../h/riscv.hpp ****     static void mc_sstatus(uint64 mask);
  82:src/../h/riscv.hpp **** 
  83:src/../h/riscv.hpp ****     // read register sstatus
  84:src/../h/riscv.hpp ****     static uint64 r_sstatus();
  85:src/../h/riscv.hpp **** 
  86:src/../h/riscv.hpp ****     // write register sstatus
  87:src/../h/riscv.hpp ****     static void w_sstatus(uint64 sstatus);
  88:src/../h/riscv.hpp **** 
  89:src/../h/riscv.hpp **** private:
  90:src/../h/riscv.hpp **** 
  91:src/../h/riscv.hpp ****     //handle za sistemske pzoive
  92:src/../h/riscv.hpp ****     static void handleSyscall();
  93:src/../h/riscv.hpp **** 
  94:src/../h/riscv.hpp ****     //handle za prekide od tajmera
  95:src/../h/riscv.hpp ****     static void handleTimerInterrupt();
  96:src/../h/riscv.hpp **** 
  97:src/../h/riscv.hpp ****     //handle za prekide od konzozle
  98:src/../h/riscv.hpp ****     static void handleConsoleInterrupt();
  99:src/../h/riscv.hpp **** 
GAS LISTING /tmp/ccW8jD6Z.s 			page 5


 100:src/../h/riscv.hpp ****     //handle za bad cause
 101:src/../h/riscv.hpp ****     static void handleBadCause();
 102:src/../h/riscv.hpp **** };
 103:src/../h/riscv.hpp **** 
 104:src/../h/riscv.hpp **** inline uint64 Riscv::r_scause()
 105:src/../h/riscv.hpp **** {
 106:src/../h/riscv.hpp ****     uint64 volatile scause;
  89              		.loc 2 106 5
 107:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[scause], scause" : [scause] "=r"(scause));
  90              		.loc 2 107 5
  91              		.loc 2 107 72 is_stmt 0
  92              	#APP
  93              	# 107 "src/../h/riscv.hpp" 1
 108              	    return scause;
  94              		csrr a5, scause
  95              	# 0 "" 2
  96              	#NO_APP
  97 0038 233CF4FA 		sd	a5,-72(s0)
  98              		.loc 2 108 5 is_stmt 1
  99              		.loc 2 108 12 is_stmt 0
 100 003c 833484FB 		ld	s1,-72(s0)
 101              	.LVL0:
 102              	.LBE31:
 103              	.LBE30:
  22:src/riscv.cpp **** 
  23:src/riscv.cpp ****     //ecall iz korisnickog, ecall iz sistemskog rezima
  24:src/riscv.cpp ****     if(scause == 0x0000000000000008UL || scause == 0x0000000000000009UL)//syscall  PROMENIO MI SE A
 104              		.loc 1 24 5 is_stmt 1
 105              	.LBB32:
 106              		.loc 1 24 39 is_stmt 0
 107 0040 138784FF 		addi	a4,s1,-8
 108              		.loc 1 24 5
 109 0044 93071000 		li	a5,1
 110 0048 63F2E70C 		bleu	a4,a5,.L25
  25:src/riscv.cpp ****     {
  26:src/riscv.cpp **** 
  27:src/riscv.cpp ****         uint64 volatile sepc = r_sepc()+ 4; // jer pc pokazuje na trenutnu instrukciju tj ecall, a 
  28:src/riscv.cpp ****         uint64 volatile sstatus = r_sstatus(); // kupim vrednost statusnog registra
  29:src/riscv.cpp ****         //obe stvari su mi bitne zbog desavanja kada se dodje na sret
  30:src/riscv.cpp **** 
  31:src/riscv.cpp ****         uint64  syscall;
  32:src/riscv.cpp ****         __asm__ volatile("mv %0, a0" : "=r"(syscall));
  33:src/riscv.cpp **** 
  34:src/riscv.cpp ****         size_t  size;
  35:src/riscv.cpp ****         void* ptr = nullptr;
  36:src/riscv.cpp ****         int ret;
  37:src/riscv.cpp **** //        Body body;
  38:src/riscv.cpp **** //        void* arg;
  39:src/riscv.cpp **** //        void* stack_space;
  40:src/riscv.cpp **** //        PCB** handleCreate;
  41:src/riscv.cpp **** //        thread_t handle;
  42:src/riscv.cpp **** //        struct kSemaphore* sem;
  43:src/riscv.cpp **** //          char character= 'A';
  44:src/riscv.cpp **** 
  45:src/riscv.cpp ****         switch(syscall)
  46:src/riscv.cpp ****         {
  47:src/riscv.cpp ****             case 0x01: //mem_alloc
GAS LISTING /tmp/ccW8jD6Z.s 			page 6


  48:src/riscv.cpp ****                 __asm__ volatile("mv %0, a1":"=r"(size));
  49:src/riscv.cpp ****                 size *= MEM_BLOCK_SIZE;
  50:src/riscv.cpp ****                 //ptr = MemoryAllocator::kmem_alloc(size);
  51:src/riscv.cpp ****                 ptr = __mem_alloc(size);
  52:src/riscv.cpp ****                 __asm__ volatile("mv a0, %0" : : "r" (ptr));
  53:src/riscv.cpp ****                 break;
  54:src/riscv.cpp ****             case 0x02: //mem_free
  55:src/riscv.cpp ****                 __asm__ volatile("mv %0, a1": "=r"(ptr));
  56:src/riscv.cpp ****                 //ret = MemoryAllocator::kmem_free(ptr);
  57:src/riscv.cpp ****                 ret = __mem_free(ptr);
  58:src/riscv.cpp ****                 __asm__ volatile("mv a0, %0"::"r"(ret));
  59:src/riscv.cpp ****                 break;
  60:src/riscv.cpp ****             case 0x11://thread_create
  61:src/riscv.cpp ****                 kThread** handle;
  62:src/riscv.cpp ****                 Body body;
  63:src/riscv.cpp ****                 void * arg;
  64:src/riscv.cpp ****                 void * stack_space;
  65:src/riscv.cpp ****                 __asm__ volatile("mv %0, a1":"=r"(handle));
  66:src/riscv.cpp ****                 __asm__ volatile("mv %0, a2":"=r"(body));
  67:src/riscv.cpp ****                 __asm__ volatile("mv %0, a3":"=r"(arg));
  68:src/riscv.cpp ****                 if(body!= nullptr){
  69:src/riscv.cpp ****                     __asm__ volatile("mv %0, a6":"=r"(stack_space));
  70:src/riscv.cpp ****                 }
  71:src/riscv.cpp ****                 else stack_space = nullptr;
  72:src/riscv.cpp **** 
  73:src/riscv.cpp ****                 *handle = kThread::createProcess(body,arg,stack_space);
  74:src/riscv.cpp ****                 if(handle!= nullptr)
  75:src/riscv.cpp ****                 {
  76:src/riscv.cpp ****                     ret = 0;
  77:src/riscv.cpp ****                     printString("uspesno kreirana nit\n");
  78:src/riscv.cpp **** 
  79:src/riscv.cpp **** 
  80:src/riscv.cpp ****                 }
  81:src/riscv.cpp ****                 else ret = -0x11;
  82:src/riscv.cpp **** 
  83:src/riscv.cpp ****                 __asm__ volatile("mv a0, %0"::"r"(ret));
  84:src/riscv.cpp **** 
  85:src/riscv.cpp ****                 break;
  86:src/riscv.cpp ****             case 0x12://thread_exit
  87:src/riscv.cpp ****                 if(kThread::running->body == nullptr){
  88:src/riscv.cpp ****                     ret = -0x12;
  89:src/riscv.cpp ****                 }
  90:src/riscv.cpp ****                 else
  91:src/riscv.cpp ****                 {
  92:src/riscv.cpp ****                     kThread::running->kThreadExit();
  93:src/riscv.cpp ****                     ret = 0;
  94:src/riscv.cpp ****                 }
  95:src/riscv.cpp ****                 __asm__ volatile("mv a0, %0"::"r"(ret));
  96:src/riscv.cpp ****                 break;
  97:src/riscv.cpp ****             case 0x13: //thread_dispatch
  98:src/riscv.cpp ****                 kThread::yield();
  99:src/riscv.cpp ****                 break;
 100:src/riscv.cpp **** //            case 0x14: //thread_join
 101:src/riscv.cpp **** //                __asm__ volatile("mv %0, a1":"=r"(handle));
 102:src/riscv.cpp **** //                PCB::join(handle);
 103:src/riscv.cpp **** //                break;
 104:src/riscv.cpp **** //            case 0x21: //sem_open
GAS LISTING /tmp/ccW8jD6Z.s 			page 7


 105:src/riscv.cpp **** //                struct kSemaphore** handle;
 106:src/riscv.cpp **** //                int  init;
 107:src/riscv.cpp **** //                __asm__ volatile("mv %0, a1":"=r"(handle));
 108:src/riscv.cpp **** //                __asm__ volatile("mv %0, a2":"=r"(init));
 109:src/riscv.cpp **** //                *handle = kSemaphore::ksem_open(init);
 110:src/riscv.cpp **** //                if(*handle == nullptr) {
 111:src/riscv.cpp **** //                    ret = -21;
 112:src/riscv.cpp **** //                } else {
 113:src/riscv.cpp **** //                    ret=0;
 114:src/riscv.cpp **** //                }
 115:src/riscv.cpp **** //                __asm__ volatile("mv a0, %0"::"r"(ret));
 116:src/riscv.cpp **** //                break;
 117:src/riscv.cpp **** //            case 0x22://sem_close
 118:src/riscv.cpp **** //                __asm__ volatile("mv %0, a1":"=r"(sem));
 119:src/riscv.cpp **** //                if(sem == nullptr) {
 120:src/riscv.cpp **** //                    ret = -22;
 121:src/riscv.cpp **** //                    __asm__ volatile("mv a0, %0"::"r"(ret));
 122:src/riscv.cpp **** //                    return;
 123:src/riscv.cpp **** //                } else ret = 0;
 124:src/riscv.cpp **** //                kSemaphore::ksem_close(sem);
 125:src/riscv.cpp **** //                __asm__ volatile("mv a0, %0"::"r"(ret));
 126:src/riscv.cpp **** //                break;
 127:src/riscv.cpp **** //            case 0x23: //sem_wait
 128:src/riscv.cpp **** //                __asm__ volatile("mv %0, a1":"=r"(sem));
 129:src/riscv.cpp **** //                if(sem == nullptr) {
 130:src/riscv.cpp **** //                    ret = -23;
 131:src/riscv.cpp **** //                    __asm__ volatile("mv a0, %0"::"r"(ret));
 132:src/riscv.cpp **** //                } else ret =0;
 133:src/riscv.cpp **** //                kSemaphore::ksem_wait(sem);
 134:src/riscv.cpp **** //                __asm__ volatile("mv a0, %0"::"r"(ret));
 135:src/riscv.cpp **** //                break;
 136:src/riscv.cpp **** //            case 0x24: //sem_signal
 137:src/riscv.cpp **** //                __asm__ volatile("mv %0, a1":"=r"(sem));
 138:src/riscv.cpp **** //                if(sem == nullptr) {
 139:src/riscv.cpp **** //                    ret = -24;
 140:src/riscv.cpp **** //                    __asm__ volatile("mv a0, %0"::"r"(ret));
 141:src/riscv.cpp **** //                    return;
 142:src/riscv.cpp **** //                } else ret=0;
 143:src/riscv.cpp **** //                kSemaphore::ksem_signal(sem);
 144:src/riscv.cpp **** //                __asm__ volatile("mv a0, %0"::"r"(ret));
 145:src/riscv.cpp **** //                break;
 146:src/riscv.cpp **** //            case 0x41: //getc
 147:src/riscv.cpp **** //                character = __getc(); //odlazim u timer interrupt umesto u console interrupt
 148:src/riscv.cpp **** //                __asm__ volatile("mv a0, %0"::"r"(character));
 149:src/riscv.cpp **** //                break;
 150:src/riscv.cpp **** //            case 0x42: //putc
 151:src/riscv.cpp **** //                char c;
 152:src/riscv.cpp **** //                __asm__ volatile("mv %0, a1":"=r"(c));
 153:src/riscv.cpp **** //                __putc(c);
 154:src/riscv.cpp **** //                break;
 155:src/riscv.cpp ****             case 0x55:
 156:src/riscv.cpp ****                 int arg1,arg2,arg3,arg4;
 157:src/riscv.cpp ****                 __asm__ volatile("mv %0, a1":"=r"(arg1));
 158:src/riscv.cpp ****                 __asm__ volatile("mv %0, a2":"=r"(arg2));
 159:src/riscv.cpp ****                 __asm__ volatile("mv %0, a3":"=r"(arg3));
 160:src/riscv.cpp ****                 __asm__ volatile("mv %0, a6":"=r"(arg4));
 161:src/riscv.cpp ****                 arg1 += arg2+arg3+arg4;
GAS LISTING /tmp/ccW8jD6Z.s 			page 8


 162:src/riscv.cpp ****                 __asm__ volatile("mv a0, %0"::"r"(arg1));
 163:src/riscv.cpp ****                 break;
 164:src/riscv.cpp ****             default: break;
 165:src/riscv.cpp ****         }
 166:src/riscv.cpp **** 
 167:src/riscv.cpp ****         __asm__ volatile("sd a0, 80(fp)"); //
 168:src/riscv.cpp ****         w_sstatus(sstatus);
 169:src/riscv.cpp ****         w_sepc(sepc);
 170:src/riscv.cpp **** 
 171:src/riscv.cpp ****     }
 172:src/riscv.cpp ****     else
 173:src/riscv.cpp **** 
 174:src/riscv.cpp ****     {
 175:src/riscv.cpp ****         if(scause == 0x0000000000000002UL)
 111              		.loc 1 175 9 is_stmt 1
 112 004c 93072000 		li	a5,2
 113 0050 6384F420 		beq	s1,a5,.L26
 176:src/riscv.cpp ****             printString("Ilegalna instrukcija\n:");
 177:src/riscv.cpp ****         else if (scause == 0x0000000000000005UL)
 114              		.loc 1 177 14
 115 0054 93075000 		li	a5,5
 116 0058 638AF420 		beq	s1,a5,.L27
 178:src/riscv.cpp ****             printString("Nedozvolena adresa citanja\n");
 179:src/riscv.cpp ****         else if (scause == 0x0000000000000007UL)
 117              		.loc 1 179 14
 118 005c 93077000 		li	a5,7
 119 0060 6380F422 		beq	s1,a5,.L28
 120              	.L19:
 180:src/riscv.cpp ****             printString("Nedozvolena adresa upisa\n");
 181:src/riscv.cpp **** 
 182:src/riscv.cpp **** 
 183:src/riscv.cpp ****         printString("scause: ");
 121              		.loc 1 183 9
 122              		.loc 1 183 20 is_stmt 0
 123 0064 17050000 		lla	a0,.LC4
 123      13050500 
 124 006c 97000000 		call	_Z11printStringPKc@plt
 124      E7800000 
 125              	.LVL1:
 184:src/riscv.cpp ****         printInteger(scause);
 126              		.loc 1 184 9 is_stmt 1
 127              		.loc 1 184 21 is_stmt 0
 128 0074 13850400 		mv	a0,s1
 129 0078 97000000 		call	_Z12printIntegerm@plt
 129      E7800000 
 130              	.LVL2:
 185:src/riscv.cpp ****         printString("\n");
 131              		.loc 1 185 9 is_stmt 1
 132              		.loc 1 185 20 is_stmt 0
 133 0080 17050000 		lla	a0,.LC5
 133      13050500 
 134 0088 97000000 		call	_Z11printStringPKc@plt
 134      E7800000 
 135              	.LVL3:
 186:src/riscv.cpp ****         printString("sepc: ");
 136              		.loc 1 186 9 is_stmt 1
 137              		.loc 1 186 20 is_stmt 0
GAS LISTING /tmp/ccW8jD6Z.s 			page 9


 138 0090 17050000 		lla	a0,.LC6
 138      13050500 
 139 0098 97000000 		call	_Z11printStringPKc@plt
 139      E7800000 
 140              	.LVL4:
 187:src/riscv.cpp ****         printInteger(r_sepc());
 141              		.loc 1 187 9 is_stmt 1
 142              	.LBB33:
 143              	.LBB34:
 109:src/../h/riscv.hpp **** }
 110:src/../h/riscv.hpp **** 
 111:src/../h/riscv.hpp **** inline void Riscv::w_scause(uint64 scause)
 112:src/../h/riscv.hpp **** {
 113:src/../h/riscv.hpp ****     __asm__ volatile ("csrw scause, %[scause]" : : [scause] "r"(scause));
 114:src/../h/riscv.hpp **** }
 115:src/../h/riscv.hpp **** 
 116:src/../h/riscv.hpp **** inline uint64 Riscv::r_sepc()
 117:src/../h/riscv.hpp **** {
 118:src/../h/riscv.hpp ****     uint64 volatile sepc;
 144              		.loc 2 118 5
 119:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sepc], sepc" : [sepc] "=r"(sepc));
 145              		.loc 2 119 5
 146              		.loc 2 119 64 is_stmt 0
 147              	#APP
 148              	# 119 "src/../h/riscv.hpp" 1
 120              	    return sepc;
 149              		csrr a5, sepc
 150              	# 0 "" 2
 151              	#NO_APP
 152 00a4 233CF4FC 		sd	a5,-40(s0)
 153              		.loc 2 120 5 is_stmt 1
 154              		.loc 2 120 12 is_stmt 0
 155 00a8 033584FD 		ld	a0,-40(s0)
 156              	.LBE34:
 157              	.LBE33:
 158              		.loc 1 187 21
 159 00ac 97000000 		call	_Z12printIntegerm@plt
 159      E7800000 
 160              	.LVL5:
 188:src/riscv.cpp ****         printString("\n");
 161              		.loc 1 188 9 is_stmt 1
 162              		.loc 1 188 20 is_stmt 0
 163 00b4 17050000 		lla	a0,.LC5
 163      13050500 
 164 00bc 97000000 		call	_Z11printStringPKc@plt
 164      E7800000 
 165              	.LVL6:
 189:src/riscv.cpp ****         printString("stval: ");
 166              		.loc 1 189 9 is_stmt 1
 167              		.loc 1 189 20 is_stmt 0
 168 00c4 17050000 		lla	a0,.LC7
 168      13050500 
 169 00cc 97000000 		call	_Z11printStringPKc@plt
 169      E7800000 
 170              	.LVL7:
 190:src/riscv.cpp ****         printInteger(r_stval());
 171              		.loc 1 190 9 is_stmt 1
GAS LISTING /tmp/ccW8jD6Z.s 			page 10


 172              	.LBB35:
 173              	.LBB36:
 121:src/../h/riscv.hpp **** }
 122:src/../h/riscv.hpp **** 
 123:src/../h/riscv.hpp **** inline void Riscv::w_sepc(uint64 sepc)
 124:src/../h/riscv.hpp **** {
 125:src/../h/riscv.hpp ****     __asm__ volatile ("csrw sepc, %[sepc]" : : [sepc] "r"(sepc));
 126:src/../h/riscv.hpp **** }
 127:src/../h/riscv.hpp **** 
 128:src/../h/riscv.hpp **** inline uint64 Riscv::r_stvec()
 129:src/../h/riscv.hpp **** {
 130:src/../h/riscv.hpp ****     uint64 volatile stvec;
 131:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[stvec], stvec" : [stvec] "=r"(stvec));
 132:src/../h/riscv.hpp ****     return stvec;
 133:src/../h/riscv.hpp **** }
 134:src/../h/riscv.hpp **** 
 135:src/../h/riscv.hpp **** inline void Riscv::w_stvec(uint64 stvec)
 136:src/../h/riscv.hpp **** {
 137:src/../h/riscv.hpp ****     __asm__ volatile ("csrw stvec, %[stvec]" : : [stvec] "r"(stvec));
 138:src/../h/riscv.hpp **** }
 139:src/../h/riscv.hpp **** 
 140:src/../h/riscv.hpp **** inline uint64 Riscv::r_stval()
 141:src/../h/riscv.hpp **** {
 142:src/../h/riscv.hpp ****     uint64 volatile stval;
 174              		.loc 2 142 5
 143:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[stval], stval" : [stval] "=r"(stval));
 175              		.loc 2 143 5
 176              		.loc 2 143 68 is_stmt 0
 177              	#APP
 178              	# 143 "src/../h/riscv.hpp" 1
 144              	    return stval;
 179              		csrr a5, stval
 180              	# 0 "" 2
 181              	#NO_APP
 182 00d8 2338F4FC 		sd	a5,-48(s0)
 183              		.loc 2 144 5 is_stmt 1
 184              		.loc 2 144 12 is_stmt 0
 185 00dc 033504FD 		ld	a0,-48(s0)
 186              	.LBE36:
 187              	.LBE35:
 188              		.loc 1 190 21
 189 00e0 97000000 		call	_Z12printIntegerm@plt
 189      E7800000 
 190              	.LVL8:
 191:src/riscv.cpp ****         printString("\n");
 191              		.loc 1 191 9 is_stmt 1
 192              		.loc 1 191 20 is_stmt 0
 193 00e8 17050000 		lla	a0,.LC5
 193      13050500 
 194 00f0 97000000 		call	_Z11printStringPKc@plt
 194      E7800000 
 195              	.LVL9:
 196              	.L3:
 197              	.LBE32:
 192:src/riscv.cpp ****         //while(1);
 193:src/riscv.cpp ****     }
 194:src/riscv.cpp **** }
GAS LISTING /tmp/ccW8jD6Z.s 			page 11


 198              		.loc 1 194 1
 199 00f8 83308105 		ld	ra,88(sp)
 200              		.cfi_remember_state
 201              		.cfi_restore 1
 202 00fc 03340105 		ld	s0,80(sp)
 203              		.cfi_restore 8
 204              		.cfi_def_cfa 2, 96
 205 0100 83348104 		ld	s1,72(sp)
 206              		.cfi_restore 9
 207 0104 13010106 		addi	sp,sp,96
 208              		.cfi_def_cfa_offset 0
 209 0108 67800000 		jr	ra
 210              	.LVL10:
 211              	.L25:
 212              		.cfi_restore_state
 213              	.LBB50:
 214              	.LBB37:
  27:src/riscv.cpp ****         uint64 volatile sstatus = r_sstatus(); // kupim vrednost statusnog registra
 215              		.loc 1 27 9 is_stmt 1
 216              	.LBB38:
 217              	.LBB39:
 118:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sepc], sepc" : [sepc] "=r"(sepc));
 218              		.loc 2 118 5
 119:src/../h/riscv.hpp ****     return sepc;
 219              		.loc 2 119 5
 119:src/../h/riscv.hpp ****     return sepc;
 220              		.loc 2 119 64 is_stmt 0
 221              	#APP
 222              	# 119 "src/../h/riscv.hpp" 1
 223              		csrr a5, sepc
 224              	# 0 "" 2
 225              	#NO_APP
 226 0110 2334F4FC 		sd	a5,-56(s0)
 120:src/../h/riscv.hpp **** }
 227              		.loc 2 120 5 is_stmt 1
 120:src/../h/riscv.hpp **** }
 228              		.loc 2 120 12 is_stmt 0
 229 0114 833784FC 		ld	a5,-56(s0)
 230              	.LBE39:
 231              	.LBE38:
  27:src/riscv.cpp ****         uint64 volatile sstatus = r_sstatus(); // kupim vrednost statusnog registra
 232              		.loc 1 27 40
 233 0118 93874700 		addi	a5,a5,4
  27:src/riscv.cpp ****         uint64 volatile sstatus = r_sstatus(); // kupim vrednost statusnog registra
 234              		.loc 1 27 42
 235 011c 2334F4FA 		sd	a5,-88(s0)
  28:src/riscv.cpp ****         //obe stvari su mi bitne zbog desavanja kada se dodje na sret
 236              		.loc 1 28 9 is_stmt 1
 237              	.LBB40:
 238              	.LBB41:
 145:src/../h/riscv.hpp **** }
 146:src/../h/riscv.hpp **** 
 147:src/../h/riscv.hpp **** inline void Riscv::w_stval(uint64 stval)
 148:src/../h/riscv.hpp **** {
 149:src/../h/riscv.hpp ****     __asm__ volatile ("csrw stval, %[stval]" : : [stval] "r"(stval));
 150:src/../h/riscv.hpp **** }
 151:src/../h/riscv.hpp **** 
GAS LISTING /tmp/ccW8jD6Z.s 			page 12


 152:src/../h/riscv.hpp **** inline void Riscv::ms_sip(uint64 mask)
 153:src/../h/riscv.hpp **** {
 154:src/../h/riscv.hpp ****     __asm__ volatile ("csrs sip, %[mask]" : : [mask] "r"(mask));
 155:src/../h/riscv.hpp **** }
 156:src/../h/riscv.hpp **** 
 157:src/../h/riscv.hpp **** inline void Riscv::mc_sip(uint64 mask)
 158:src/../h/riscv.hpp **** {
 159:src/../h/riscv.hpp ****     __asm__ volatile ("csrc sip, %[mask]" : : [mask] "r"(mask));
 160:src/../h/riscv.hpp **** }
 161:src/../h/riscv.hpp **** 
 162:src/../h/riscv.hpp **** inline uint64 Riscv::r_sip()
 163:src/../h/riscv.hpp **** {
 164:src/../h/riscv.hpp ****     uint64 volatile sip;
 165:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sip], sip" : [sip] "=r"(sip));
 166:src/../h/riscv.hpp ****     return sip;
 167:src/../h/riscv.hpp **** }
 168:src/../h/riscv.hpp **** 
 169:src/../h/riscv.hpp **** inline void Riscv::w_sip(uint64 sip)
 170:src/../h/riscv.hpp **** {
 171:src/../h/riscv.hpp ****     __asm__ volatile ("csrw sip, %[sip]" : : [sip] "r"(sip));
 172:src/../h/riscv.hpp **** }
 173:src/../h/riscv.hpp **** 
 174:src/../h/riscv.hpp **** inline void Riscv::ms_sstatus(uint64 mask)
 175:src/../h/riscv.hpp **** {
 176:src/../h/riscv.hpp ****     __asm__ volatile ("csrs sstatus, %[mask]" : : [mask] "r"(mask));
 177:src/../h/riscv.hpp **** }
 178:src/../h/riscv.hpp **** 
 179:src/../h/riscv.hpp **** inline void Riscv::mc_sstatus(uint64 mask)
 180:src/../h/riscv.hpp **** {
 181:src/../h/riscv.hpp ****     __asm__ volatile ("csrc sstatus, %[mask]" : : [mask] "r"(mask));
 182:src/../h/riscv.hpp **** }
 183:src/../h/riscv.hpp **** 
 184:src/../h/riscv.hpp **** inline uint64 Riscv::r_sstatus()
 185:src/../h/riscv.hpp **** {
 186:src/../h/riscv.hpp ****     uint64 volatile sstatus;
 239              		.loc 2 186 5
 187:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sstatus], sstatus" : [sstatus] "=r"(sstatus));
 240              		.loc 2 187 5
 241              		.loc 2 187 76 is_stmt 0
 242              	#APP
 243              	# 187 "src/../h/riscv.hpp" 1
 188              	    return sstatus;
 244              		csrr a5, sstatus
 245              	# 0 "" 2
 246              	#NO_APP
 247 0124 2330F4FC 		sd	a5,-64(s0)
 248              		.loc 2 188 5 is_stmt 1
 249              		.loc 2 188 12 is_stmt 0
 250 0128 833704FC 		ld	a5,-64(s0)
 251              	.LBE41:
 252              	.LBE40:
  28:src/riscv.cpp ****         //obe stvari su mi bitne zbog desavanja kada se dodje na sret
 253              		.loc 1 28 45
 254 012c 2338F4FA 		sd	a5,-80(s0)
  31:src/riscv.cpp ****         __asm__ volatile("mv %0, a0" : "=r"(syscall));
 255              		.loc 1 31 9 is_stmt 1
  32:src/riscv.cpp **** 
GAS LISTING /tmp/ccW8jD6Z.s 			page 13


 256              		.loc 1 32 9
  32:src/riscv.cpp **** 
 257              		.loc 1 32 54 is_stmt 0
 258              	#APP
 259              	# 32 "src/riscv.cpp" 1
 260              		mv a5, a0
 261              	# 0 "" 2
 262              	.LVL11:
  34:src/riscv.cpp ****         void* ptr = nullptr;
 263              		.loc 1 34 9 is_stmt 1
  35:src/riscv.cpp ****         int ret;
 264              		.loc 1 35 9
  36:src/riscv.cpp **** //        Body body;
 265              		.loc 1 36 9
  45:src/riscv.cpp ****         {
 266              		.loc 1 45 9
 267              	#NO_APP
 268              	.LBB42:
 269 0134 13073001 		li	a4,19
 270 0138 6364F702 		bgtu	a5,a4,.L5
 271 013c 63820706 		beqz	a5,.L6
 272 0140 6360F706 		bgtu	a5,a4,.L6
 273 0144 93972700 		slli	a5,a5,2
 274              	.LVL12:
 275 0148 17070000 		lla	a4,.L8
 275      13070700 
 276 0150 B387E700 		add	a5,a5,a4
 277 0154 83A70700 		lw	a5,0(a5)
 278 0158 B387E700 		add	a5,a5,a4
 279 015c 67800700 		jr	a5
 280              		.section	.rodata
 281              		.align	2
 282              		.align	2
 283              	.L8:
 284 0000 00000000 		.word	.L6-.L8
 285 0004 00000000 		.word	.L12-.L8
 286 0008 00000000 		.word	.L11-.L8
 287 000c 00000000 		.word	.L6-.L8
 288 0010 00000000 		.word	.L6-.L8
 289 0014 00000000 		.word	.L6-.L8
 290 0018 00000000 		.word	.L6-.L8
 291 001c 00000000 		.word	.L6-.L8
 292 0020 00000000 		.word	.L6-.L8
 293 0024 00000000 		.word	.L6-.L8
 294 0028 00000000 		.word	.L6-.L8
 295 002c 00000000 		.word	.L6-.L8
 296 0030 00000000 		.word	.L6-.L8
 297 0034 00000000 		.word	.L6-.L8
 298 0038 00000000 		.word	.L6-.L8
 299 003c 00000000 		.word	.L6-.L8
 300 0040 00000000 		.word	.L6-.L8
 301 0044 00000000 		.word	.L10-.L8
 302 0048 00000000 		.word	.L9-.L8
 303 004c 00000000 		.word	.L7-.L8
 304              		.text
 305              	.LVL13:
 306              	.L5:
GAS LISTING /tmp/ccW8jD6Z.s 			page 14


 307 0160 13075005 		li	a4,85
 308 0164 639EE702 		bne	a5,a4,.L6
 309              	.LBB43:
 155:src/riscv.cpp ****                 int arg1,arg2,arg3,arg4;
 310              		.loc 1 155 13
 156:src/riscv.cpp ****                 __asm__ volatile("mv %0, a1":"=r"(arg1));
 311              		.loc 1 156 17
 157:src/riscv.cpp ****                 __asm__ volatile("mv %0, a2":"=r"(arg2));
 312              		.loc 1 157 17
 157:src/riscv.cpp ****                 __asm__ volatile("mv %0, a2":"=r"(arg2));
 313              		.loc 1 157 57 is_stmt 0
 314              	#APP
 315              	# 157 "src/riscv.cpp" 1
 316              		mv a4, a1
 317              	# 0 "" 2
 318              	.LVL14:
 158:src/riscv.cpp ****                 __asm__ volatile("mv %0, a3":"=r"(arg3));
 319              		.loc 1 158 17 is_stmt 1
 158:src/riscv.cpp ****                 __asm__ volatile("mv %0, a3":"=r"(arg3));
 320              		.loc 1 158 57 is_stmt 0
 321              	# 158 "src/riscv.cpp" 1
 322              		mv a5, a2
 323              	# 0 "" 2
 324              	.LVL15:
 159:src/riscv.cpp ****                 __asm__ volatile("mv %0, a6":"=r"(arg4));
 325              		.loc 1 159 17 is_stmt 1
 159:src/riscv.cpp ****                 __asm__ volatile("mv %0, a6":"=r"(arg4));
 326              		.loc 1 159 57 is_stmt 0
 327              	# 159 "src/riscv.cpp" 1
 328              		mv a2, a3
 329              	# 0 "" 2
 330              	.LVL16:
 160:src/riscv.cpp ****                 arg1 += arg2+arg3+arg4;
 331              		.loc 1 160 17 is_stmt 1
 160:src/riscv.cpp ****                 arg1 += arg2+arg3+arg4;
 332              		.loc 1 160 57 is_stmt 0
 333              	# 160 "src/riscv.cpp" 1
 334              		mv a3, a6
 335              	# 0 "" 2
 336              	.LVL17:
 161:src/riscv.cpp ****                 __asm__ volatile("mv a0, %0"::"r"(arg1));
 337              		.loc 1 161 17 is_stmt 1
 161:src/riscv.cpp ****                 __asm__ volatile("mv a0, %0"::"r"(arg1));
 338              		.loc 1 161 29 is_stmt 0
 339              	#NO_APP
 340 0178 BB87C700 		addw	a5,a5,a2
 341              	.LVL18:
 161:src/riscv.cpp ****                 __asm__ volatile("mv a0, %0"::"r"(arg1));
 342              		.loc 1 161 34
 343 017c BB87D700 		addw	a5,a5,a3
 161:src/riscv.cpp ****                 __asm__ volatile("mv a0, %0"::"r"(arg1));
 344              		.loc 1 161 22
 345 0180 BB87E700 		addw	a5,a5,a4
 346              	.LVL19:
 162:src/riscv.cpp ****                 break;
 347              		.loc 1 162 17 is_stmt 1
 162:src/riscv.cpp ****                 break;
GAS LISTING /tmp/ccW8jD6Z.s 			page 15


 348              		.loc 1 162 57 is_stmt 0
 349              	#APP
 350              	# 162 "src/riscv.cpp" 1
 163:src/riscv.cpp ****             default: break;
 351              		mv a0, a5
 352              	# 0 "" 2
 353              		.loc 1 163 17 is_stmt 1
 354              	#NO_APP
 355 0188 6F008001 		j	.L6
 356              	.LVL20:
 357              	.L12:
  47:src/riscv.cpp ****                 __asm__ volatile("mv %0, a1":"=r"(size));
 358              		.loc 1 47 13
  48:src/riscv.cpp ****                 size *= MEM_BLOCK_SIZE;
 359              		.loc 1 48 17
  48:src/riscv.cpp ****                 size *= MEM_BLOCK_SIZE;
 360              		.loc 1 48 57 is_stmt 0
 361              	#APP
 362              	# 48 "src/riscv.cpp" 1
 363              		mv a0, a1
 364              	# 0 "" 2
 365              	.LVL21:
  49:src/riscv.cpp ****                 //ptr = MemoryAllocator::kmem_alloc(size);
 366              		.loc 1 49 17 is_stmt 1
  51:src/riscv.cpp ****                 __asm__ volatile("mv a0, %0" : : "r" (ptr));
 367              		.loc 1 51 17
  51:src/riscv.cpp ****                 __asm__ volatile("mv a0, %0" : : "r" (ptr));
 368              		.loc 1 51 34 is_stmt 0
 369              	#NO_APP
 370 0190 13156500 		slli	a0,a0,6
 371              	.LVL22:
 372 0194 97000000 		call	__mem_alloc@plt
 372      E7800000 
 373              	.LVL23:
  52:src/riscv.cpp ****                 break;
 374              		.loc 1 52 17 is_stmt 1
  52:src/riscv.cpp ****                 break;
 375              		.loc 1 52 60 is_stmt 0
 376              	#APP
 377              	# 52 "src/riscv.cpp" 1
  53:src/riscv.cpp ****             case 0x02: //mem_free
 378              		mv a0, a0
 379              	# 0 "" 2
 380              		.loc 1 53 17 is_stmt 1
 381              	.LVL24:
 382              	#NO_APP
 383              	.L6:
 384              	.LBE43:
 385              	.LBE42:
 167:src/riscv.cpp ****         w_sstatus(sstatus);
 386              		.loc 1 167 9
 167:src/riscv.cpp ****         w_sstatus(sstatus);
 387              		.loc 1 167 42 is_stmt 0
 388              	#APP
 389              	# 167 "src/riscv.cpp" 1
 168:src/riscv.cpp ****         w_sepc(sepc);
 390              		sd a0, 80(fp)
GAS LISTING /tmp/ccW8jD6Z.s 			page 16


 391              	# 0 "" 2
 392              		.loc 1 168 9 is_stmt 1
 168:src/riscv.cpp ****         w_sepc(sepc);
 393              		.loc 1 168 18 is_stmt 0
 394              	#NO_APP
 395 01a4 833704FB 		ld	a5,-80(s0)
 396              	.LVL25:
 397              	.LBB45:
 398              	.LBB46:
 189:src/../h/riscv.hpp **** }
 190:src/../h/riscv.hpp **** 
 191:src/../h/riscv.hpp **** inline void Riscv::w_sstatus(uint64 sstatus)
 192:src/../h/riscv.hpp **** {
 193:src/../h/riscv.hpp ****     __asm__ volatile ("csrw sstatus, %[sstatus]" : : [sstatus] "r"(sstatus));
 399              		.loc 2 193 5 is_stmt 1
 400              		.loc 2 193 77 is_stmt 0
 401              	#APP
 402              	# 193 "src/../h/riscv.hpp" 1
 194              	}
 403              		csrw sstatus, a5
 404              	# 0 "" 2
 405              	.LVL26:
 406              	#NO_APP
 407              	.LBE46:
 408              	.LBE45:
 169:src/riscv.cpp **** 
 409              		.loc 1 169 9 is_stmt 1
 169:src/riscv.cpp **** 
 410              		.loc 1 169 15 is_stmt 0
 411 01ac 833784FA 		ld	a5,-88(s0)
 412              	.LVL27:
 413              	.LBB47:
 414              	.LBB48:
 125:src/../h/riscv.hpp **** }
 415              		.loc 2 125 5 is_stmt 1
 125:src/../h/riscv.hpp **** }
 416              		.loc 2 125 65 is_stmt 0
 417              	#APP
 418              	# 125 "src/../h/riscv.hpp" 1
 126:src/../h/riscv.hpp **** 
 419              		csrw sepc, a5
 420              	# 0 "" 2
 421              		.loc 2 126 1
 422              	#NO_APP
 423 01b4 6FF05FF4 		j	.L3
 424              	.LVL28:
 425              	.L11:
 426              	.LBE48:
 427              	.LBE47:
 428              	.LBB49:
 429              	.LBB44:
  54:src/riscv.cpp ****                 __asm__ volatile("mv %0, a1": "=r"(ptr));
 430              		.loc 1 54 13 is_stmt 1
  55:src/riscv.cpp ****                 //ret = MemoryAllocator::kmem_free(ptr);
 431              		.loc 1 55 17
  55:src/riscv.cpp ****                 //ret = MemoryAllocator::kmem_free(ptr);
 432              		.loc 1 55 57 is_stmt 0
GAS LISTING /tmp/ccW8jD6Z.s 			page 17


 433              	#APP
 434              	# 55 "src/riscv.cpp" 1
 435              		mv a0, a1
 436              	# 0 "" 2
 437              	.LVL29:
  57:src/riscv.cpp ****                 __asm__ volatile("mv a0, %0"::"r"(ret));
 438              		.loc 1 57 17 is_stmt 1
  57:src/riscv.cpp ****                 __asm__ volatile("mv a0, %0"::"r"(ret));
 439              		.loc 1 57 33 is_stmt 0
 440              	#NO_APP
 441 01bc 97000000 		call	__mem_free@plt
 441      E7800000 
 442              	.LVL30:
  58:src/riscv.cpp ****                 break;
 443              		.loc 1 58 17 is_stmt 1
  58:src/riscv.cpp ****                 break;
 444              		.loc 1 58 56 is_stmt 0
 445              	#APP
 446              	# 58 "src/riscv.cpp" 1
  59:src/riscv.cpp ****             case 0x11://thread_create
 447              		mv a0, a0
 448              	# 0 "" 2
 449              		.loc 1 59 17 is_stmt 1
 450              	#NO_APP
 451 01c8 6FF09FFD 		j	.L6
 452              	.LVL31:
 453              	.L10:
  60:src/riscv.cpp ****                 kThread** handle;
 454              		.loc 1 60 13
  61:src/riscv.cpp ****                 Body body;
 455              		.loc 1 61 17
  62:src/riscv.cpp ****                 void * arg;
 456              		.loc 1 62 17
  63:src/riscv.cpp ****                 void * stack_space;
 457              		.loc 1 63 17
  64:src/riscv.cpp ****                 __asm__ volatile("mv %0, a1":"=r"(handle));
 458              		.loc 1 64 17
  65:src/riscv.cpp ****                 __asm__ volatile("mv %0, a2":"=r"(body));
 459              		.loc 1 65 17
  65:src/riscv.cpp ****                 __asm__ volatile("mv %0, a2":"=r"(body));
 460              		.loc 1 65 59 is_stmt 0
 461              	#APP
 462              	# 65 "src/riscv.cpp" 1
 463              		mv s1, a1
 464              	# 0 "" 2
 465              	.LVL32:
  66:src/riscv.cpp ****                 __asm__ volatile("mv %0, a3":"=r"(arg));
 466              		.loc 1 66 17 is_stmt 1
  66:src/riscv.cpp ****                 __asm__ volatile("mv %0, a3":"=r"(arg));
 467              		.loc 1 66 57 is_stmt 0
 468              	# 66 "src/riscv.cpp" 1
 469              		mv a0, a2
 470              	# 0 "" 2
 471              	.LVL33:
  67:src/riscv.cpp ****                 if(body!= nullptr){
 472              		.loc 1 67 17 is_stmt 1
  67:src/riscv.cpp ****                 if(body!= nullptr){
GAS LISTING /tmp/ccW8jD6Z.s 			page 18


 473              		.loc 1 67 56 is_stmt 0
 474              	# 67 "src/riscv.cpp" 1
 475              		mv a1, a3
 476              	# 0 "" 2
 477              	.LVL34:
  68:src/riscv.cpp ****                     __asm__ volatile("mv %0, a6":"=r"(stack_space));
 478              		.loc 1 68 17 is_stmt 1
 479              	#NO_APP
 480 01d8 630A0502 		beqz	a0,.L21
  69:src/riscv.cpp ****                 }
 481              		.loc 1 69 21
  69:src/riscv.cpp ****                 }
 482              		.loc 1 69 68 is_stmt 0
 483              	#APP
 484              	# 69 "src/riscv.cpp" 1
 485              		mv a2, a6
 486              	# 0 "" 2
 487              	.LVL35:
 488              	#NO_APP
 489              	.L14:
  73:src/riscv.cpp ****                 if(handle!= nullptr)
 490              		.loc 1 73 17 is_stmt 1
  73:src/riscv.cpp ****                 if(handle!= nullptr)
 491              		.loc 1 73 49 is_stmt 0
 492 01e0 97000000 		call	_ZN7kThread13createProcessEPFvPvES0_S0_@plt
 492      E7800000 
 493              	.LVL36:
  73:src/riscv.cpp ****                 if(handle!= nullptr)
 494              		.loc 1 73 25
 495 01e8 23B0A400 		sd	a0,0(s1)
  74:src/riscv.cpp ****                 {
 496              		.loc 1 74 17 is_stmt 1
 497 01ec 63840402 		beqz	s1,.L22
  76:src/riscv.cpp ****                     printString("uspesno kreirana nit\n");
 498              		.loc 1 76 21
 499              	.LVL37:
  77:src/riscv.cpp **** 
 500              		.loc 1 77 21
  77:src/riscv.cpp **** 
 501              		.loc 1 77 32 is_stmt 0
 502 01f0 17050000 		lla	a0,.LC0
 502      13050500 
 503 01f8 97000000 		call	_Z11printStringPKc@plt
 503      E7800000 
 504              	.LVL38:
  76:src/riscv.cpp ****                     printString("uspesno kreirana nit\n");
 505              		.loc 1 76 25
 506 0200 93070000 		li	a5,0
 507              	.LVL39:
 508              	.L15:
  83:src/riscv.cpp **** 
 509              		.loc 1 83 17 is_stmt 1
  83:src/riscv.cpp **** 
 510              		.loc 1 83 56 is_stmt 0
 511              	#APP
 512              	# 83 "src/riscv.cpp" 1
  85:src/riscv.cpp ****             case 0x12://thread_exit
GAS LISTING /tmp/ccW8jD6Z.s 			page 19


 513              		mv a0, a5
 514              	# 0 "" 2
 515              		.loc 1 85 17 is_stmt 1
 516              	#NO_APP
 517 0208 6FF09FF9 		j	.L6
 518              	.LVL40:
 519              	.L21:
  71:src/riscv.cpp **** 
 520              		.loc 1 71 34 is_stmt 0
 521 020c 13060000 		li	a2,0
 522 0210 6FF01FFD 		j	.L14
 523              	.LVL41:
 524              	.L22:
  81:src/riscv.cpp **** 
 525              		.loc 1 81 26
 526 0214 9307F0FE 		li	a5,-17
 527 0218 6FF0DFFE 		j	.L15
 528              	.LVL42:
 529              	.L9:
  86:src/riscv.cpp ****                 if(kThread::running->body == nullptr){
 530              		.loc 1 86 13 is_stmt 1
  87:src/riscv.cpp ****                     ret = -0x12;
 531              		.loc 1 87 17
  87:src/riscv.cpp ****                     ret = -0x12;
 532              		.loc 1 87 38 is_stmt 0
 533 021c 97070000 		la	a5,_ZN7kThread7runningE
 533      83B70700 
 534 0224 03B50700 		ld	a0,0(a5)
 535 0228 83378500 		ld	a5,8(a0)
  87:src/riscv.cpp ****                     ret = -0x12;
 536              		.loc 1 87 17
 537 022c 638C0700 		beqz	a5,.L23
  92:src/riscv.cpp ****                     ret = 0;
 538              		.loc 1 92 21 is_stmt 1
  92:src/riscv.cpp ****                     ret = 0;
 539              		.loc 1 92 50 is_stmt 0
 540 0230 97000000 		call	_ZN7kThread11kThreadExitEv@plt
 540      E7800000 
 541              	.LVL43:
  93:src/riscv.cpp ****                 }
 542              		.loc 1 93 21 is_stmt 1
  93:src/riscv.cpp ****                 }
 543              		.loc 1 93 25 is_stmt 0
 544 0238 93070000 		li	a5,0
 545              	.LVL44:
 546              	.L16:
  95:src/riscv.cpp ****                 break;
 547              		.loc 1 95 17 is_stmt 1
  95:src/riscv.cpp ****                 break;
 548              		.loc 1 95 56 is_stmt 0
 549              	#APP
 550              	# 95 "src/riscv.cpp" 1
  96:src/riscv.cpp ****             case 0x13: //thread_dispatch
 551              		mv a0, a5
 552              	# 0 "" 2
 553              		.loc 1 96 17 is_stmt 1
 554              	#NO_APP
GAS LISTING /tmp/ccW8jD6Z.s 			page 20


 555 0240 6FF01FF6 		j	.L6
 556              	.LVL45:
 557              	.L23:
  88:src/riscv.cpp ****                 }
 558              		.loc 1 88 25 is_stmt 0
 559 0244 9307E0FE 		li	a5,-18
 560 0248 6FF05FFF 		j	.L16
 561              	.L7:
  97:src/riscv.cpp ****                 kThread::yield();
 562              		.loc 1 97 13 is_stmt 1
  98:src/riscv.cpp ****                 break;
 563              		.loc 1 98 17
  98:src/riscv.cpp ****                 break;
 564              		.loc 1 98 31 is_stmt 0
 565 024c 97000000 		call	_ZN7kThread5yieldEv@plt
 565      E7800000 
 566              	.LVL46:
  99:src/riscv.cpp **** //            case 0x14: //thread_join
 567              		.loc 1 99 17 is_stmt 1
 568 0254 6FF0DFF4 		j	.L6
 569              	.LVL47:
 570              	.L26:
 571              	.LBE44:
 572              	.LBE49:
 573              	.LBE37:
 176:src/riscv.cpp ****         else if (scause == 0x0000000000000005UL)
 574              		.loc 1 176 13
 176:src/riscv.cpp ****         else if (scause == 0x0000000000000005UL)
 575              		.loc 1 176 24 is_stmt 0
 576 0258 17050000 		lla	a0,.LC1
 576      13050500 
 577 0260 97000000 		call	_Z11printStringPKc@plt
 577      E7800000 
 578              	.LVL48:
 579 0268 6FF0DFDF 		j	.L19
 580              	.L27:
 178:src/riscv.cpp ****         else if (scause == 0x0000000000000007UL)
 581              		.loc 1 178 13 is_stmt 1
 178:src/riscv.cpp ****         else if (scause == 0x0000000000000007UL)
 582              		.loc 1 178 24 is_stmt 0
 583 026c 17050000 		lla	a0,.LC2
 583      13050500 
 584 0274 97000000 		call	_Z11printStringPKc@plt
 584      E7800000 
 585              	.LVL49:
 586 027c 6FF09FDE 		j	.L19
 587              	.L28:
 180:src/riscv.cpp **** 
 588              		.loc 1 180 13 is_stmt 1
 180:src/riscv.cpp **** 
 589              		.loc 1 180 24 is_stmt 0
 590 0280 17050000 		lla	a0,.LC3
 590      13050500 
 591 0288 97000000 		call	_Z11printStringPKc@plt
 591      E7800000 
 592              	.LVL50:
 593 0290 6FF05FDD 		j	.L19
GAS LISTING /tmp/ccW8jD6Z.s 			page 21


 594              	.LBE50:
 595              		.cfi_endproc
 596              	.LFE22:
 598              		.align	2
 599              		.globl	_ZN5Riscv20handleTimerInterruptEv
 601              	_ZN5Riscv20handleTimerInterruptEv:
 602              	.LFB23:
 195:src/riscv.cpp **** void Riscv::handleTimerInterrupt() {
 603              		.loc 1 195 36 is_stmt 1
 604              		.cfi_startproc
 605 0294 130101FD 		addi	sp,sp,-48
 606              		.cfi_def_cfa_offset 48
 607 0298 23348102 		sd	s0,40(sp)
 608              		.cfi_offset 8, -8
 609 029c 13040103 		addi	s0,sp,48
 610              		.cfi_def_cfa 8, 0
 196:src/riscv.cpp **** 
 197:src/riscv.cpp ****     mc_sip(SIP_SSIP); //zasto ovo?? - ni ne radim vrv
 611              		.loc 1 197 5
 612              	.LVL51:
 613              	.LBB51:
 614              	.LBB52:
 159:src/../h/riscv.hpp **** }
 615              		.loc 2 159 5
 159:src/../h/riscv.hpp **** }
 616              		.loc 2 159 64 is_stmt 0
 617 02a0 93072000 		li	a5,2
 618              	#APP
 619              	# 159 "src/../h/riscv.hpp" 1
 620              		csrc sip, a5
 621              	# 0 "" 2
 622              	.LVL52:
 623              	#NO_APP
 624              	.LBE52:
 625              	.LBE51:
 198:src/riscv.cpp **** 
 199:src/riscv.cpp ****     uint64 volatile sepc = r_sepc();
 626              		.loc 1 199 5 is_stmt 1
 627              	.LBB53:
 628              	.LBB54:
 118:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sepc], sepc" : [sepc] "=r"(sepc));
 629              		.loc 2 118 5
 119:src/../h/riscv.hpp ****     return sepc;
 630              		.loc 2 119 5
 119:src/../h/riscv.hpp ****     return sepc;
 631              		.loc 2 119 64 is_stmt 0
 632              	#APP
 633              	# 119 "src/../h/riscv.hpp" 1
 634              		csrr a5, sepc
 635              	# 0 "" 2
 636              	#NO_APP
 637 02ac 233CF4FC 		sd	a5,-40(s0)
 120:src/../h/riscv.hpp **** }
 638              		.loc 2 120 5 is_stmt 1
 120:src/../h/riscv.hpp **** }
 639              		.loc 2 120 12 is_stmt 0
 640 02b0 833784FD 		ld	a5,-40(s0)
GAS LISTING /tmp/ccW8jD6Z.s 			page 22


 641              	.LBE54:
 642              	.LBE53:
 643              		.loc 1 199 35
 644 02b4 2334F4FE 		sd	a5,-24(s0)
 200:src/riscv.cpp ****     uint64 volatile sstatus = r_sstatus();
 645              		.loc 1 200 5 is_stmt 1
 646              	.LBB55:
 647              	.LBB56:
 186:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sstatus], sstatus" : [sstatus] "=r"(sstatus));
 648              		.loc 2 186 5
 187:src/../h/riscv.hpp ****     return sstatus;
 649              		.loc 2 187 5
 187:src/../h/riscv.hpp ****     return sstatus;
 650              		.loc 2 187 76 is_stmt 0
 651              	#APP
 652              	# 187 "src/../h/riscv.hpp" 1
 653              		csrr a5, sstatus
 654              	# 0 "" 2
 655              	#NO_APP
 656 02bc 2338F4FC 		sd	a5,-48(s0)
 188:src/../h/riscv.hpp **** }
 657              		.loc 2 188 5 is_stmt 1
 188:src/../h/riscv.hpp **** }
 658              		.loc 2 188 12 is_stmt 0
 659 02c0 833704FD 		ld	a5,-48(s0)
 660              	.LBE56:
 661              	.LBE55:
 662              		.loc 1 200 41
 663 02c4 2330F4FE 		sd	a5,-32(s0)
 201:src/riscv.cpp ****     w_sstatus(sstatus);
 664              		.loc 1 201 5 is_stmt 1
 665              		.loc 1 201 14 is_stmt 0
 666 02c8 833704FE 		ld	a5,-32(s0)
 667              	.LVL53:
 668              	.LBB57:
 669              	.LBB58:
 193:src/../h/riscv.hpp **** }
 670              		.loc 2 193 5 is_stmt 1
 193:src/../h/riscv.hpp **** }
 671              		.loc 2 193 77 is_stmt 0
 672              	#APP
 673              	# 193 "src/../h/riscv.hpp" 1
 674              		csrw sstatus, a5
 675              	# 0 "" 2
 676              	.LVL54:
 677              	#NO_APP
 678              	.LBE58:
 679              	.LBE57:
 202:src/riscv.cpp ****     w_sepc(sepc);
 680              		.loc 1 202 5 is_stmt 1
 681              		.loc 1 202 11 is_stmt 0
 682 02d0 833784FE 		ld	a5,-24(s0)
 683              	.LVL55:
 684              	.LBB59:
 685              	.LBB60:
 125:src/../h/riscv.hpp **** }
 686              		.loc 2 125 5 is_stmt 1
GAS LISTING /tmp/ccW8jD6Z.s 			page 23


 125:src/../h/riscv.hpp **** }
 687              		.loc 2 125 65 is_stmt 0
 688              	#APP
 689              	# 125 "src/../h/riscv.hpp" 1
 690              		csrw sepc, a5
 691              	# 0 "" 2
 692              	.LVL56:
 693              	#NO_APP
 694              	.LBE60:
 695              	.LBE59:
 203:src/riscv.cpp **** }
 696              		.loc 1 203 1
 697 02d8 03348102 		ld	s0,40(sp)
 698              		.cfi_restore 8
 699              		.cfi_def_cfa 2, 48
 700 02dc 13010103 		addi	sp,sp,48
 701              		.cfi_def_cfa_offset 0
 702 02e0 67800000 		jr	ra
 703              		.cfi_endproc
 704              	.LFE23:
 706              		.align	2
 707              		.globl	_ZN5Riscv22handleConsoleInterruptEv
 709              	_ZN5Riscv22handleConsoleInterruptEv:
 710              	.LFB24:
 204:src/riscv.cpp **** 
 205:src/riscv.cpp **** void Riscv::handleConsoleInterrupt() {
 711              		.loc 1 205 38 is_stmt 1
 712              		.cfi_startproc
 713 02e4 130101FF 		addi	sp,sp,-16
 714              		.cfi_def_cfa_offset 16
 715 02e8 23341100 		sd	ra,8(sp)
 716 02ec 23308100 		sd	s0,0(sp)
 717              		.cfi_offset 1, -8
 718              		.cfi_offset 8, -16
 719 02f0 13040101 		addi	s0,sp,16
 720              		.cfi_def_cfa 8, 0
 206:src/riscv.cpp ****     console_handler();
 721              		.loc 1 206 5
 722              		.loc 1 206 20 is_stmt 0
 723 02f4 97000000 		call	console_handler@plt
 723      E7800000 
 724              	.LVL57:
 207:src/riscv.cpp **** }
 725              		.loc 1 207 1
 726 02fc 83308100 		ld	ra,8(sp)
 727              		.cfi_restore 1
 728 0300 03340100 		ld	s0,0(sp)
 729              		.cfi_restore 8
 730              		.cfi_def_cfa 2, 16
 731 0304 13010101 		addi	sp,sp,16
 732              		.cfi_def_cfa_offset 0
 733 0308 67800000 		jr	ra
 734              		.cfi_endproc
 735              	.LFE24:
 737              		.align	2
 738              		.globl	_ZN5Riscv14handleBadCauseEv
 740              	_ZN5Riscv14handleBadCauseEv:
GAS LISTING /tmp/ccW8jD6Z.s 			page 24


 741              	.LFB25:
 208:src/riscv.cpp **** 
 209:src/riscv.cpp **** void Riscv::handleBadCause() {
 742              		.loc 1 209 30 is_stmt 1
 743              		.cfi_startproc
 744 030c 130101FF 		addi	sp,sp,-16
 745              		.cfi_def_cfa_offset 16
 746 0310 23348100 		sd	s0,8(sp)
 747              		.cfi_offset 8, -8
 748 0314 13040101 		addi	s0,sp,16
 749              		.cfi_def_cfa 8, 0
 210:src/riscv.cpp **** 
 211:src/riscv.cpp **** }...
 750              		.loc 1 211 1 is_stmt 0
 751 0318 03348100 		ld	s0,8(sp)
 752              		.cfi_restore 8
 753              		.cfi_def_cfa 2, 16
 754 031c 13010101 		addi	sp,sp,16
 755              		.cfi_def_cfa_offset 0
 756 0320 67800000 		jr	ra
 757              		.cfi_endproc
 758              	.LFE25:
 760              	.Letext0:
 761              		.file 3 "src/../h/../lib/hw.h"
 762              		.file 4 "src/../h/kThread.hpp"
 763              		.file 5 "src/../lib/console.h"
 764              		.file 6 "src/../lib/mem.h"
 765              		.file 7 "src/../h/print.hpp"
GAS LISTING /tmp/ccW8jD6Z.s 			page 25


DEFINED SYMBOLS
                            *ABS*:0000000000000000 riscv.cpp
     /tmp/ccW8jD6Z.s:9      .text:0000000000000000 _ZN5Riscv10popSppSpieEv
     /tmp/ccW8jD6Z.s:13     .text:0000000000000000 .L0 
     /tmp/ccW8jD6Z.s:14     .text:0000000000000000 .L0 
     /tmp/ccW8jD6Z.s:15     .text:0000000000000004 .L0 
     /tmp/ccW8jD6Z.s:17     .text:0000000000000008 .L0 
     /tmp/ccW8jD6Z.s:19     .text:000000000000000c .L0 
     /tmp/ccW8jD6Z.s:21     .text:000000000000000c .L0 
       src/riscv.cpp:15     .text:000000000000000c .L0 
     /tmp/ccW8jD6Z.s:27     .text:0000000000000010 .L0 
       src/riscv.cpp:16     .text:0000000000000010 .L0 
     /tmp/ccW8jD6Z.s:33     .text:0000000000000014 .L0 
     /tmp/ccW8jD6Z.s:34     .text:0000000000000018 .L0 
     /tmp/ccW8jD6Z.s:35     .text:0000000000000018 .L0 
     /tmp/ccW8jD6Z.s:37     .text:000000000000001c .L0 
     /tmp/ccW8jD6Z.s:39     .text:0000000000000020 .L0 
     /tmp/ccW8jD6Z.s:71     .text:0000000000000020 _ZN5Riscv13handleSyscallEv
     /tmp/ccW8jD6Z.s:74     .text:0000000000000020 .L0 
     /tmp/ccW8jD6Z.s:75     .text:0000000000000020 .L0 
     /tmp/ccW8jD6Z.s:76     .text:0000000000000024 .L0 
     /tmp/ccW8jD6Z.s:80     .text:0000000000000030 .L0 
     /tmp/ccW8jD6Z.s:81     .text:0000000000000030 .L0 
     /tmp/ccW8jD6Z.s:82     .text:0000000000000030 .L0 
     /tmp/ccW8jD6Z.s:84     .text:0000000000000034 .L0 
     /tmp/ccW8jD6Z.s:89     .text:0000000000000034 .L0 
     /tmp/ccW8jD6Z.s:90     .text:0000000000000034 .L0 
     /tmp/ccW8jD6Z.s:91     .text:0000000000000034 .L0 
  src/../h/riscv.hpp:107    .text:0000000000000034 .L0 
     /tmp/ccW8jD6Z.s:99     .text:000000000000003c .L0 
     /tmp/ccW8jD6Z.s:100    .text:000000000000003c .L0 
     /tmp/ccW8jD6Z.s:106    .text:0000000000000040 .L0 
     /tmp/ccW8jD6Z.s:107    .text:0000000000000040 .L0 
     /tmp/ccW8jD6Z.s:109    .text:0000000000000044 .L0 
     /tmp/ccW8jD6Z.s:112    .text:000000000000004c .L0 
     /tmp/ccW8jD6Z.s:115    .text:0000000000000054 .L0 
     /tmp/ccW8jD6Z.s:118    .text:000000000000005c .L0 
     /tmp/ccW8jD6Z.s:122    .text:0000000000000064 .L0 
     /tmp/ccW8jD6Z.s:123    .text:0000000000000064 .L0 
     /tmp/ccW8jD6Z.s:127    .text:0000000000000074 .L0 
     /tmp/ccW8jD6Z.s:128    .text:0000000000000074 .L0 
     /tmp/ccW8jD6Z.s:132    .text:0000000000000080 .L0 
     /tmp/ccW8jD6Z.s:133    .text:0000000000000080 .L0 
     /tmp/ccW8jD6Z.s:137    .text:0000000000000090 .L0 
     /tmp/ccW8jD6Z.s:138    .text:0000000000000090 .L0 
     /tmp/ccW8jD6Z.s:144    .text:00000000000000a0 .L0 
     /tmp/ccW8jD6Z.s:145    .text:00000000000000a0 .L0 
     /tmp/ccW8jD6Z.s:146    .text:00000000000000a0 .L0 
  src/../h/riscv.hpp:119    .text:00000000000000a0 .L0 
     /tmp/ccW8jD6Z.s:154    .text:00000000000000a8 .L0 
     /tmp/ccW8jD6Z.s:155    .text:00000000000000a8 .L0 
     /tmp/ccW8jD6Z.s:159    .text:00000000000000ac .L0 
     /tmp/ccW8jD6Z.s:162    .text:00000000000000b4 .L0 
     /tmp/ccW8jD6Z.s:163    .text:00000000000000b4 .L0 
     /tmp/ccW8jD6Z.s:167    .text:00000000000000c4 .L0 
     /tmp/ccW8jD6Z.s:168    .text:00000000000000c4 .L0 
     /tmp/ccW8jD6Z.s:174    .text:00000000000000d4 .L0 
GAS LISTING /tmp/ccW8jD6Z.s 			page 26


     /tmp/ccW8jD6Z.s:175    .text:00000000000000d4 .L0 
     /tmp/ccW8jD6Z.s:176    .text:00000000000000d4 .L0 
  src/../h/riscv.hpp:143    .text:00000000000000d4 .L0 
     /tmp/ccW8jD6Z.s:184    .text:00000000000000dc .L0 
     /tmp/ccW8jD6Z.s:185    .text:00000000000000dc .L0 
     /tmp/ccW8jD6Z.s:189    .text:00000000000000e0 .L0 
     /tmp/ccW8jD6Z.s:192    .text:00000000000000e8 .L0 
     /tmp/ccW8jD6Z.s:193    .text:00000000000000e8 .L0 
     /tmp/ccW8jD6Z.s:199    .text:00000000000000f8 .L0 
     /tmp/ccW8jD6Z.s:200    .text:00000000000000fc .L0 
     /tmp/ccW8jD6Z.s:201    .text:00000000000000fc .L0 
     /tmp/ccW8jD6Z.s:203    .text:0000000000000100 .L0 
     /tmp/ccW8jD6Z.s:204    .text:0000000000000100 .L0 
     /tmp/ccW8jD6Z.s:206    .text:0000000000000104 .L0 
     /tmp/ccW8jD6Z.s:208    .text:0000000000000108 .L0 
     /tmp/ccW8jD6Z.s:212    .text:000000000000010c .L0 
     /tmp/ccW8jD6Z.s:218    .text:000000000000010c .L0 
     /tmp/ccW8jD6Z.s:219    .text:000000000000010c .L0 
     /tmp/ccW8jD6Z.s:220    .text:000000000000010c .L0 
  src/../h/riscv.hpp:119    .text:000000000000010c .L0 
     /tmp/ccW8jD6Z.s:228    .text:0000000000000114 .L0 
     /tmp/ccW8jD6Z.s:229    .text:0000000000000114 .L0 
     /tmp/ccW8jD6Z.s:233    .text:0000000000000118 .L0 
     /tmp/ccW8jD6Z.s:235    .text:000000000000011c .L0 
     /tmp/ccW8jD6Z.s:239    .text:0000000000000120 .L0 
     /tmp/ccW8jD6Z.s:240    .text:0000000000000120 .L0 
     /tmp/ccW8jD6Z.s:241    .text:0000000000000120 .L0 
  src/../h/riscv.hpp:187    .text:0000000000000120 .L0 
     /tmp/ccW8jD6Z.s:249    .text:0000000000000128 .L0 
     /tmp/ccW8jD6Z.s:250    .text:0000000000000128 .L0 
     /tmp/ccW8jD6Z.s:254    .text:000000000000012c .L0 
     /tmp/ccW8jD6Z.s:256    .text:0000000000000130 .L0 
     /tmp/ccW8jD6Z.s:257    .text:0000000000000130 .L0 
       src/riscv.cpp:32     .text:0000000000000130 .L0 
     /tmp/ccW8jD6Z.s:264    .text:0000000000000134 .L0 
     /tmp/ccW8jD6Z.s:265    .text:0000000000000134 .L0 
     /tmp/ccW8jD6Z.s:266    .text:0000000000000134 .L0 
     /tmp/ccW8jD6Z.s:269    .text:0000000000000134 .L0 
     /tmp/ccW8jD6Z.s:311    .text:0000000000000168 .L0 
     /tmp/ccW8jD6Z.s:312    .text:0000000000000168 .L0 
     /tmp/ccW8jD6Z.s:313    .text:0000000000000168 .L0 
       src/riscv.cpp:157    .text:0000000000000168 .L0 
     /tmp/ccW8jD6Z.s:320    .text:000000000000016c .L0 
       src/riscv.cpp:158    .text:000000000000016c .L0 
     /tmp/ccW8jD6Z.s:326    .text:0000000000000170 .L0 
       src/riscv.cpp:159    .text:0000000000000170 .L0 
     /tmp/ccW8jD6Z.s:332    .text:0000000000000174 .L0 
       src/riscv.cpp:160    .text:0000000000000174 .L0 
     /tmp/ccW8jD6Z.s:338    .text:0000000000000178 .L0 
     /tmp/ccW8jD6Z.s:340    .text:0000000000000178 .L0 
     /tmp/ccW8jD6Z.s:343    .text:000000000000017c .L0 
     /tmp/ccW8jD6Z.s:345    .text:0000000000000180 .L0 
     /tmp/ccW8jD6Z.s:348    .text:0000000000000184 .L0 
       src/riscv.cpp:162    .text:0000000000000184 .L0 
     /tmp/ccW8jD6Z.s:355    .text:0000000000000188 .L0 
     /tmp/ccW8jD6Z.s:359    .text:000000000000018c .L0 
     /tmp/ccW8jD6Z.s:360    .text:000000000000018c .L0 
GAS LISTING /tmp/ccW8jD6Z.s 			page 27


       src/riscv.cpp:48     .text:000000000000018c .L0 
     /tmp/ccW8jD6Z.s:367    .text:0000000000000190 .L0 
     /tmp/ccW8jD6Z.s:368    .text:0000000000000190 .L0 
     /tmp/ccW8jD6Z.s:370    .text:0000000000000190 .L0 
     /tmp/ccW8jD6Z.s:375    .text:000000000000019c .L0 
       src/riscv.cpp:52     .text:000000000000019c .L0 
     /tmp/ccW8jD6Z.s:386    .text:00000000000001a0 .L0 
     /tmp/ccW8jD6Z.s:387    .text:00000000000001a0 .L0 
       src/riscv.cpp:167    .text:00000000000001a0 .L0 
     /tmp/ccW8jD6Z.s:393    .text:00000000000001a4 .L0 
     /tmp/ccW8jD6Z.s:395    .text:00000000000001a4 .L0 
     /tmp/ccW8jD6Z.s:400    .text:00000000000001a8 .L0 
  src/../h/riscv.hpp:193    .text:00000000000001a8 .L0 
     /tmp/ccW8jD6Z.s:410    .text:00000000000001ac .L0 
     /tmp/ccW8jD6Z.s:411    .text:00000000000001ac .L0 
     /tmp/ccW8jD6Z.s:416    .text:00000000000001b0 .L0 
  src/../h/riscv.hpp:125    .text:00000000000001b0 .L0 
     /tmp/ccW8jD6Z.s:423    .text:00000000000001b4 .L0 
     /tmp/ccW8jD6Z.s:431    .text:00000000000001b8 .L0 
     /tmp/ccW8jD6Z.s:432    .text:00000000000001b8 .L0 
       src/riscv.cpp:55     .text:00000000000001b8 .L0 
     /tmp/ccW8jD6Z.s:439    .text:00000000000001bc .L0 
     /tmp/ccW8jD6Z.s:441    .text:00000000000001bc .L0 
     /tmp/ccW8jD6Z.s:444    .text:00000000000001c4 .L0 
       src/riscv.cpp:58     .text:00000000000001c4 .L0 
     /tmp/ccW8jD6Z.s:451    .text:00000000000001c8 .L0 
     /tmp/ccW8jD6Z.s:455    .text:00000000000001cc .L0 
     /tmp/ccW8jD6Z.s:456    .text:00000000000001cc .L0 
     /tmp/ccW8jD6Z.s:457    .text:00000000000001cc .L0 
     /tmp/ccW8jD6Z.s:458    .text:00000000000001cc .L0 
     /tmp/ccW8jD6Z.s:459    .text:00000000000001cc .L0 
     /tmp/ccW8jD6Z.s:460    .text:00000000000001cc .L0 
       src/riscv.cpp:65     .text:00000000000001cc .L0 
     /tmp/ccW8jD6Z.s:467    .text:00000000000001d0 .L0 
       src/riscv.cpp:66     .text:00000000000001d0 .L0 
     /tmp/ccW8jD6Z.s:473    .text:00000000000001d4 .L0 
       src/riscv.cpp:67     .text:00000000000001d4 .L0 
     /tmp/ccW8jD6Z.s:480    .text:00000000000001d8 .L0 
     /tmp/ccW8jD6Z.s:482    .text:00000000000001dc .L0 
       src/riscv.cpp:69     .text:00000000000001dc .L0 
     /tmp/ccW8jD6Z.s:491    .text:00000000000001e0 .L0 
     /tmp/ccW8jD6Z.s:492    .text:00000000000001e0 .L0 
     /tmp/ccW8jD6Z.s:495    .text:00000000000001e8 .L0 
     /tmp/ccW8jD6Z.s:497    .text:00000000000001ec .L0 
     /tmp/ccW8jD6Z.s:500    .text:00000000000001f0 .L0 
     /tmp/ccW8jD6Z.s:501    .text:00000000000001f0 .L0 
     /tmp/ccW8jD6Z.s:502    .text:00000000000001f0 .L0 
     /tmp/ccW8jD6Z.s:506    .text:0000000000000200 .L0 
     /tmp/ccW8jD6Z.s:510    .text:0000000000000204 .L0 
       src/riscv.cpp:83     .text:0000000000000204 .L0 
     /tmp/ccW8jD6Z.s:517    .text:0000000000000208 .L0 
     /tmp/ccW8jD6Z.s:521    .text:000000000000020c .L0 
     /tmp/ccW8jD6Z.s:526    .text:0000000000000214 .L0 
     /tmp/ccW8jD6Z.s:531    .text:000000000000021c .L0 
     /tmp/ccW8jD6Z.s:532    .text:000000000000021c .L0 
     /tmp/ccW8jD6Z.s:533    .text:000000000000021c .L0 
     /tmp/ccW8jD6Z.s:537    .text:000000000000022c .L0 
GAS LISTING /tmp/ccW8jD6Z.s 			page 28


     /tmp/ccW8jD6Z.s:539    .text:0000000000000230 .L0 
     /tmp/ccW8jD6Z.s:540    .text:0000000000000230 .L0 
     /tmp/ccW8jD6Z.s:543    .text:0000000000000238 .L0 
     /tmp/ccW8jD6Z.s:544    .text:0000000000000238 .L0 
     /tmp/ccW8jD6Z.s:548    .text:000000000000023c .L0 
       src/riscv.cpp:95     .text:000000000000023c .L0 
     /tmp/ccW8jD6Z.s:555    .text:0000000000000240 .L0 
     /tmp/ccW8jD6Z.s:559    .text:0000000000000244 .L0 
     /tmp/ccW8jD6Z.s:563    .text:000000000000024c .L0 
     /tmp/ccW8jD6Z.s:564    .text:000000000000024c .L0 
     /tmp/ccW8jD6Z.s:565    .text:000000000000024c .L0 
     /tmp/ccW8jD6Z.s:568    .text:0000000000000254 .L0 
     /tmp/ccW8jD6Z.s:575    .text:0000000000000258 .L0 
     /tmp/ccW8jD6Z.s:576    .text:0000000000000258 .L0 
     /tmp/ccW8jD6Z.s:582    .text:000000000000026c .L0 
     /tmp/ccW8jD6Z.s:583    .text:000000000000026c .L0 
     /tmp/ccW8jD6Z.s:589    .text:0000000000000280 .L0 
     /tmp/ccW8jD6Z.s:590    .text:0000000000000280 .L0 
     /tmp/ccW8jD6Z.s:595    .text:0000000000000294 .L0 
     /tmp/ccW8jD6Z.s:601    .text:0000000000000294 _ZN5Riscv20handleTimerInterruptEv
     /tmp/ccW8jD6Z.s:604    .text:0000000000000294 .L0 
     /tmp/ccW8jD6Z.s:605    .text:0000000000000294 .L0 
     /tmp/ccW8jD6Z.s:606    .text:0000000000000298 .L0 
     /tmp/ccW8jD6Z.s:608    .text:000000000000029c .L0 
     /tmp/ccW8jD6Z.s:610    .text:00000000000002a0 .L0 
     /tmp/ccW8jD6Z.s:615    .text:00000000000002a0 .L0 
     /tmp/ccW8jD6Z.s:616    .text:00000000000002a0 .L0 
     /tmp/ccW8jD6Z.s:617    .text:00000000000002a0 .L0 
     /tmp/ccW8jD6Z.s:629    .text:00000000000002a8 .L0 
     /tmp/ccW8jD6Z.s:630    .text:00000000000002a8 .L0 
     /tmp/ccW8jD6Z.s:631    .text:00000000000002a8 .L0 
  src/../h/riscv.hpp:119    .text:00000000000002a8 .L0 
     /tmp/ccW8jD6Z.s:639    .text:00000000000002b0 .L0 
     /tmp/ccW8jD6Z.s:640    .text:00000000000002b0 .L0 
     /tmp/ccW8jD6Z.s:644    .text:00000000000002b4 .L0 
     /tmp/ccW8jD6Z.s:648    .text:00000000000002b8 .L0 
     /tmp/ccW8jD6Z.s:649    .text:00000000000002b8 .L0 
     /tmp/ccW8jD6Z.s:650    .text:00000000000002b8 .L0 
  src/../h/riscv.hpp:187    .text:00000000000002b8 .L0 
     /tmp/ccW8jD6Z.s:658    .text:00000000000002c0 .L0 
     /tmp/ccW8jD6Z.s:659    .text:00000000000002c0 .L0 
     /tmp/ccW8jD6Z.s:663    .text:00000000000002c4 .L0 
     /tmp/ccW8jD6Z.s:665    .text:00000000000002c8 .L0 
     /tmp/ccW8jD6Z.s:666    .text:00000000000002c8 .L0 
     /tmp/ccW8jD6Z.s:671    .text:00000000000002cc .L0 
  src/../h/riscv.hpp:193    .text:00000000000002cc .L0 
     /tmp/ccW8jD6Z.s:681    .text:00000000000002d0 .L0 
     /tmp/ccW8jD6Z.s:682    .text:00000000000002d0 .L0 
     /tmp/ccW8jD6Z.s:687    .text:00000000000002d4 .L0 
  src/../h/riscv.hpp:125    .text:00000000000002d4 .L0 
     /tmp/ccW8jD6Z.s:697    .text:00000000000002d8 .L0 
     /tmp/ccW8jD6Z.s:698    .text:00000000000002dc .L0 
     /tmp/ccW8jD6Z.s:699    .text:00000000000002dc .L0 
     /tmp/ccW8jD6Z.s:701    .text:00000000000002e0 .L0 
     /tmp/ccW8jD6Z.s:703    .text:00000000000002e4 .L0 
     /tmp/ccW8jD6Z.s:709    .text:00000000000002e4 _ZN5Riscv22handleConsoleInterruptEv
     /tmp/ccW8jD6Z.s:712    .text:00000000000002e4 .L0 
GAS LISTING /tmp/ccW8jD6Z.s 			page 29


     /tmp/ccW8jD6Z.s:713    .text:00000000000002e4 .L0 
     /tmp/ccW8jD6Z.s:714    .text:00000000000002e8 .L0 
     /tmp/ccW8jD6Z.s:717    .text:00000000000002f0 .L0 
     /tmp/ccW8jD6Z.s:718    .text:00000000000002f0 .L0 
     /tmp/ccW8jD6Z.s:720    .text:00000000000002f4 .L0 
     /tmp/ccW8jD6Z.s:722    .text:00000000000002f4 .L0 
     /tmp/ccW8jD6Z.s:723    .text:00000000000002f4 .L0 
     /tmp/ccW8jD6Z.s:726    .text:00000000000002fc .L0 
     /tmp/ccW8jD6Z.s:727    .text:0000000000000300 .L0 
     /tmp/ccW8jD6Z.s:729    .text:0000000000000304 .L0 
     /tmp/ccW8jD6Z.s:730    .text:0000000000000304 .L0 
     /tmp/ccW8jD6Z.s:732    .text:0000000000000308 .L0 
     /tmp/ccW8jD6Z.s:734    .text:000000000000030c .L0 
     /tmp/ccW8jD6Z.s:740    .text:000000000000030c _ZN5Riscv14handleBadCauseEv
     /tmp/ccW8jD6Z.s:743    .text:000000000000030c .L0 
     /tmp/ccW8jD6Z.s:744    .text:000000000000030c .L0 
     /tmp/ccW8jD6Z.s:745    .text:0000000000000310 .L0 
     /tmp/ccW8jD6Z.s:747    .text:0000000000000314 .L0 
     /tmp/ccW8jD6Z.s:749    .text:0000000000000318 .L0 
     /tmp/ccW8jD6Z.s:751    .text:0000000000000318 .L0 
     /tmp/ccW8jD6Z.s:752    .text:000000000000031c .L0 
     /tmp/ccW8jD6Z.s:753    .text:000000000000031c .L0 
     /tmp/ccW8jD6Z.s:755    .text:0000000000000320 .L0 
     /tmp/ccW8jD6Z.s:757    .text:0000000000000324 .L0 
     /tmp/ccW8jD6Z.s:766    .text:0000000000000324 .L0 
     /tmp/ccW8jD6Z.s:56     .rodata.str1.8:0000000000000070 .LC4
     /tmp/ccW8jD6Z.s:123    .text:0000000000000064 .L0 
     /tmp/ccW8jD6Z.s:59     .rodata.str1.8:0000000000000080 .LC5
     /tmp/ccW8jD6Z.s:133    .text:0000000000000080 .L0 
     /tmp/ccW8jD6Z.s:62     .rodata.str1.8:0000000000000088 .LC6
     /tmp/ccW8jD6Z.s:138    .text:0000000000000090 .L0 
     /tmp/ccW8jD6Z.s:163    .text:00000000000000b4 .L0 
     /tmp/ccW8jD6Z.s:65     .rodata.str1.8:0000000000000090 .LC7
     /tmp/ccW8jD6Z.s:168    .text:00000000000000c4 .L0 
     /tmp/ccW8jD6Z.s:193    .text:00000000000000e8 .L0 
     /tmp/ccW8jD6Z.s:283    .rodata:0000000000000000 .L8
     /tmp/ccW8jD6Z.s:275    .text:0000000000000148 .L0 
     /tmp/ccW8jD6Z.s:44     .rodata.str1.8:0000000000000000 .LC0
     /tmp/ccW8jD6Z.s:502    .text:00000000000001f0 .L0 
     /tmp/ccW8jD6Z.s:533    .text:000000000000021c .L0 
     /tmp/ccW8jD6Z.s:47     .rodata.str1.8:0000000000000018 .LC1
     /tmp/ccW8jD6Z.s:576    .text:0000000000000258 .L0 
     /tmp/ccW8jD6Z.s:50     .rodata.str1.8:0000000000000030 .LC2
     /tmp/ccW8jD6Z.s:583    .text:000000000000026c .L0 
     /tmp/ccW8jD6Z.s:53     .rodata.str1.8:0000000000000050 .LC3
     /tmp/ccW8jD6Z.s:590    .text:0000000000000280 .L0 
     /tmp/ccW8jD6Z.s:211    .text:000000000000010c .L25
     /tmp/ccW8jD6Z.s:570    .text:0000000000000258 .L26
     /tmp/ccW8jD6Z.s:580    .text:000000000000026c .L27
     /tmp/ccW8jD6Z.s:587    .text:0000000000000280 .L28
     /tmp/ccW8jD6Z.s:306    .text:0000000000000160 .L5
     /tmp/ccW8jD6Z.s:383    .text:00000000000001a0 .L6
     /tmp/ccW8jD6Z.s:196    .text:00000000000000f8 .L3
     /tmp/ccW8jD6Z.s:519    .text:000000000000020c .L21
     /tmp/ccW8jD6Z.s:524    .text:0000000000000214 .L22
     /tmp/ccW8jD6Z.s:489    .text:00000000000001e0 .L14
     /tmp/ccW8jD6Z.s:508    .text:0000000000000204 .L15
GAS LISTING /tmp/ccW8jD6Z.s 			page 30


     /tmp/ccW8jD6Z.s:557    .text:0000000000000244 .L23
     /tmp/ccW8jD6Z.s:546    .text:000000000000023c .L16
     /tmp/ccW8jD6Z.s:120    .text:0000000000000064 .L19
     /tmp/ccW8jD6Z.s:357    .text:000000000000018c .L12
     /tmp/ccW8jD6Z.s:425    .text:00000000000001b8 .L11
     /tmp/ccW8jD6Z.s:453    .text:00000000000001cc .L10
     /tmp/ccW8jD6Z.s:529    .text:000000000000021c .L9
     /tmp/ccW8jD6Z.s:561    .text:000000000000024c .L7
     /tmp/ccW8jD6Z.s:1983   .debug_abbrev:0000000000000000 .Ldebug_abbrev0
     /tmp/ccW8jD6Z.s:3227   .debug_str:00000000000005cf .LASF111
     /tmp/ccW8jD6Z.s:3175   .debug_str:0000000000000438 .LASF112
     /tmp/ccW8jD6Z.s:3259   .debug_str:000000000000079b .LASF113
     /tmp/ccW8jD6Z.s:5      .text:0000000000000000 .Ltext0
     /tmp/ccW8jD6Z.s:760    .text:0000000000000324 .Letext0
     /tmp/ccW8jD6Z.s:3019   .debug_line:0000000000000000 .Ldebug_line0
     /tmp/ccW8jD6Z.s:3151   .debug_str:00000000000003ab .LASF0
     /tmp/ccW8jD6Z.s:3169   .debug_str:00000000000003fd .LASF1
     /tmp/ccW8jD6Z.s:3137   .debug_str:0000000000000334 .LASF2
     /tmp/ccW8jD6Z.s:3119   .debug_str:00000000000002d7 .LASF4
     /tmp/ccW8jD6Z.s:3205   .debug_str:000000000000052a .LASF3
     /tmp/ccW8jD6Z.s:3045   .debug_str:00000000000000b5 .LASF5
     /tmp/ccW8jD6Z.s:3173   .debug_str:0000000000000425 .LASF6
     /tmp/ccW8jD6Z.s:3149   .debug_str:0000000000000398 .LASF7
     /tmp/ccW8jD6Z.s:3235   .debug_str:00000000000006cf .LASF8
     /tmp/ccW8jD6Z.s:3107   .debug_str:000000000000027f .LASF9
     /tmp/ccW8jD6Z.s:3183   .debug_str:000000000000047f .LASF10
     /tmp/ccW8jD6Z.s:3229   .debug_str:0000000000000693 .LASF11
     /tmp/ccW8jD6Z.s:3047   .debug_str:00000000000000bc .LASF12
     /tmp/ccW8jD6Z.s:3025   .debug_str:0000000000000022 .LASF13
     /tmp/ccW8jD6Z.s:3061   .debug_str:0000000000000135 .LASF14
     /tmp/ccW8jD6Z.s:3199   .debug_str:00000000000004f6 .LASF15
     /tmp/ccW8jD6Z.s:3067   .debug_str:0000000000000162 .LASF16
     /tmp/ccW8jD6Z.s:3165   .debug_str:00000000000003ec .LASF68
     /tmp/ccW8jD6Z.s:3129   .debug_str:00000000000002fd .LASF114
     /tmp/ccW8jD6Z.s:3215   .debug_str:0000000000000585 .LASF17
     /tmp/ccW8jD6Z.s:3163   .debug_str:00000000000003e3 .LASF18
     /tmp/ccW8jD6Z.s:3125   .debug_str:00000000000002ec .LASF19
     /tmp/ccW8jD6Z.s:3197   .debug_str:00000000000004eb .LASF20
     /tmp/ccW8jD6Z.s:3251   .debug_str:0000000000000764 .LASF22
     /tmp/ccW8jD6Z.s:3041   .debug_str:000000000000009f .LASF21
     /tmp/ccW8jD6Z.s:3083   .debug_str:00000000000001f7 .LASF23
     /tmp/ccW8jD6Z.s:3217   .debug_str:000000000000058e .LASF24
     /tmp/ccW8jD6Z.s:3023   .debug_str:0000000000000008 .LASF25
     /tmp/ccW8jD6Z.s:3209   .debug_str:0000000000000543 .LASF26
     /tmp/ccW8jD6Z.s:3055   .debug_str:0000000000000104 .LASF27
     /tmp/ccW8jD6Z.s:3027   .debug_str:0000000000000032 .LASF28
     /tmp/ccW8jD6Z.s:3087   .debug_str:000000000000021a .LASF30
     /tmp/ccW8jD6Z.s:3079   .debug_str:00000000000001df .LASF32
     /tmp/ccW8jD6Z.s:3077   .debug_str:00000000000001ca .LASF34
     /tmp/ccW8jD6Z.s:3207   .debug_str:000000000000053c .LASF29
     /tmp/ccW8jD6Z.s:3189   .debug_str:00000000000004bd .LASF31
     /tmp/ccW8jD6Z.s:3225   .debug_str:00000000000005c8 .LASF33
     /tmp/ccW8jD6Z.s:3221   .debug_str:00000000000005a3 .LASF35
     /tmp/ccW8jD6Z.s:3097   .debug_str:0000000000000262 .LASF36
     /tmp/ccW8jD6Z.s:3069   .debug_str:0000000000000178 .LASF37
     /tmp/ccW8jD6Z.s:3021   .debug_str:0000000000000000 .LASF38
     /tmp/ccW8jD6Z.s:3113   .debug_str:00000000000002a8 .LASF39
GAS LISTING /tmp/ccW8jD6Z.s 			page 31


     /tmp/ccW8jD6Z.s:3043   .debug_str:00000000000000ad .LASF40
     /tmp/ccW8jD6Z.s:3053   .debug_str:00000000000000f0 .LASF41
     /tmp/ccW8jD6Z.s:3257   .debug_str:0000000000000793 .LASF42
     /tmp/ccW8jD6Z.s:3089   .debug_str:000000000000022f .LASF43
     /tmp/ccW8jD6Z.s:3153   .debug_str:00000000000003b8 .LASF44
     /tmp/ccW8jD6Z.s:3249   .debug_str:0000000000000751 .LASF45
     /tmp/ccW8jD6Z.s:3039   .debug_str:0000000000000098 .LASF46
     /tmp/ccW8jD6Z.s:3095   .debug_str:000000000000024f .LASF47
     /tmp/ccW8jD6Z.s:3105   .debug_str:0000000000000279 .LASF48
     /tmp/ccW8jD6Z.s:3223   .debug_str:00000000000005b6 .LASF49
     /tmp/ccW8jD6Z.s:3037   .debug_str:0000000000000092 .LASF50
     /tmp/ccW8jD6Z.s:3263   .debug_str:00000000000007cb .LASF51
     /tmp/ccW8jD6Z.s:3255   .debug_str:0000000000000788 .LASF52
     /tmp/ccW8jD6Z.s:3203   .debug_str:0000000000000512 .LASF53
     /tmp/ccW8jD6Z.s:3167   .debug_str:00000000000003f2 .LASF54
     /tmp/ccW8jD6Z.s:3131   .debug_str:0000000000000308 .LASF55
     /tmp/ccW8jD6Z.s:3059   .debug_str:000000000000012b .LASF56
     /tmp/ccW8jD6Z.s:3117   .debug_str:00000000000002c1 .LASF57
     /tmp/ccW8jD6Z.s:3143   .debug_str:0000000000000355 .LASF58
     /tmp/ccW8jD6Z.s:3111   .debug_str:0000000000000292 .LASF59
     /tmp/ccW8jD6Z.s:3157   .debug_str:00000000000003c8 .LASF60
     /tmp/ccW8jD6Z.s:3243   .debug_str:0000000000000709 .LASF62
     /tmp/ccW8jD6Z.s:3171   .debug_str:0000000000000410 .LASF61
     /tmp/ccW8jD6Z.s:3179   .debug_str:0000000000000451 .LASF63
     /tmp/ccW8jD6Z.s:3213   .debug_str:000000000000056e .LASF64
     /tmp/ccW8jD6Z.s:3035   .debug_str:000000000000006e .LASF65
     /tmp/ccW8jD6Z.s:3081   .debug_str:00000000000001e8 .LASF66
     /tmp/ccW8jD6Z.s:3211   .debug_str:0000000000000552 .LASF67
     /tmp/ccW8jD6Z.s:3219   .debug_str:000000000000059b .LASF69
     /tmp/ccW8jD6Z.s:3033   .debug_str:0000000000000066 .LASF115
     /tmp/ccW8jD6Z.s:3051   .debug_str:00000000000000e7 .LASF70
     /tmp/ccW8jD6Z.s:3239   .debug_str:00000000000006eb .LASF72
     /tmp/ccW8jD6Z.s:3177   .debug_str:0000000000000446 .LASF116
     /tmp/ccW8jD6Z.s:3233   .debug_str:00000000000006b4 .LASF117
     /tmp/ccW8jD6Z.s:3139   .debug_str:0000000000000342 .LASF71
     /tmp/ccW8jD6Z.s:3049   .debug_str:00000000000000cc .LASF73
     /tmp/ccW8jD6Z.s:3195   .debug_str:00000000000004dd .LASF74
     /tmp/ccW8jD6Z.s:3247   .debug_str:0000000000000729 .LASF75
     /tmp/ccW8jD6Z.s:3193   .debug_str:00000000000004d8 .LASF90
     /tmp/ccW8jD6Z.s:3201   .debug_str:000000000000050c .LASF76
     /tmp/ccW8jD6Z.s:3029   .debug_str:000000000000003b .LASF77
     /tmp/ccW8jD6Z.s:3085   .debug_str:0000000000000212 .LASF118
     /tmp/ccW8jD6Z.s:3181   .debug_str:0000000000000473 .LASF78
     /tmp/ccW8jD6Z.s:3063   .debug_str:0000000000000141 .LASF79
     /tmp/ccW8jD6Z.s:3185   .debug_str:000000000000048e .LASF119
     /tmp/ccW8jD6Z.s:3071   .debug_str:000000000000018c .LASF80
     /tmp/ccW8jD6Z.s:3123   .debug_str:00000000000002e7 .LASF81
     /tmp/ccW8jD6Z.s:3065   .debug_str:000000000000015c .LASF82
     /tmp/ccW8jD6Z.s:3127   .debug_str:00000000000002f5 .LASF83
     /tmp/ccW8jD6Z.s:3121   .debug_str:00000000000002de .LASF84
     /tmp/ccW8jD6Z.s:3241   .debug_str:00000000000006fb .LASF120
     /tmp/ccW8jD6Z.s:3147   .debug_str:000000000000036c .LASF121
     /tmp/ccW8jD6Z.s:3135   .debug_str:0000000000000326 .LASF85
     /tmp/ccW8jD6Z.s:3187   .debug_str:00000000000004a0 .LASF86
     /tmp/ccW8jD6Z.s:3155   .debug_str:00000000000003bf .LASF87
     /tmp/ccW8jD6Z.s:3031   .debug_str:000000000000004f .LASF88
     /tmp/ccW8jD6Z.s:3091   .debug_str:0000000000000243 .LASF89
GAS LISTING /tmp/ccW8jD6Z.s 			page 32


     /tmp/ccW8jD6Z.s:741    .text:000000000000030c .LFB25
     /tmp/ccW8jD6Z.s:758    .text:0000000000000324 .LFE25
     /tmp/ccW8jD6Z.s:710    .text:00000000000002e4 .LFB24
     /tmp/ccW8jD6Z.s:735    .text:000000000000030c .LFE24
     /tmp/ccW8jD6Z.s:724    .text:00000000000002fc .LVL57
     /tmp/ccW8jD6Z.s:602    .text:0000000000000294 .LFB23
     /tmp/ccW8jD6Z.s:704    .text:00000000000002e4 .LFE23
     /tmp/ccW8jD6Z.s:3159   .debug_str:00000000000003d6 .LASF91
     /tmp/ccW8jD6Z.s:3191   .debug_str:00000000000004d0 .LASF92
     /tmp/ccW8jD6Z.s:613    .text:00000000000002a0 .LBB51
     /tmp/ccW8jD6Z.s:625    .text:00000000000002a8 .LBE51
     /tmp/ccW8jD6Z.s:2798   .debug_loc:0000000000000000 .LLST15
     /tmp/ccW8jD6Z.s:627    .text:00000000000002a8 .LBB53
     /tmp/ccW8jD6Z.s:642    .text:00000000000002b4 .LBE53
     /tmp/ccW8jD6Z.s:646    .text:00000000000002b8 .LBB55
     /tmp/ccW8jD6Z.s:661    .text:00000000000002c4 .LBE55
     /tmp/ccW8jD6Z.s:668    .text:00000000000002cc .LBB57
     /tmp/ccW8jD6Z.s:679    .text:00000000000002d0 .LBE57
     /tmp/ccW8jD6Z.s:2806   .debug_loc:0000000000000024 .LLST16
     /tmp/ccW8jD6Z.s:684    .text:00000000000002d4 .LBB59
     /tmp/ccW8jD6Z.s:695    .text:00000000000002d8 .LBE59
     /tmp/ccW8jD6Z.s:2813   .debug_loc:0000000000000047 .LLST17
     /tmp/ccW8jD6Z.s:72     .text:0000000000000020 .LFB22
     /tmp/ccW8jD6Z.s:596    .text:0000000000000294 .LFE22
     /tmp/ccW8jD6Z.s:3093   .debug_str:0000000000000248 .LASF93
     /tmp/ccW8jD6Z.s:2820   .debug_loc:000000000000006a .LLST0
     /tmp/ccW8jD6Z.s:214    .text:000000000000010c .LBB37
     /tmp/ccW8jD6Z.s:573    .text:0000000000000258 .LBE37
     /tmp/ccW8jD6Z.s:3161   .debug_str:00000000000003db .LASF94
     /tmp/ccW8jD6Z.s:2839   .debug_loc:00000000000000c6 .LLST1
     /tmp/ccW8jD6Z.s:3115   .debug_str:00000000000002bc .LASF95
     /tmp/ccW8jD6Z.s:2850   .debug_loc:00000000000000fc .LLST2
     /tmp/ccW8jD6Z.s:2865   .debug_loc:0000000000000136 .LLST3
     /tmp/ccW8jD6Z.s:2891   .debug_loc:00000000000001a8 .LLST4
     /tmp/ccW8jD6Z.s:3011   .debug_ranges:0000000000000000 .Ldebug_ranges0
     /tmp/ccW8jD6Z.s:3141   .debug_str:000000000000034e .LASF96
     /tmp/ccW8jD6Z.s:2916   .debug_loc:0000000000000219 .LLST5
     /tmp/ccW8jD6Z.s:2923   .debug_loc:000000000000023c .LLST6
     /tmp/ccW8jD6Z.s:2934   .debug_loc:0000000000000272 .LLST7
     /tmp/ccW8jD6Z.s:3261   .debug_str:00000000000007bf .LASF97
     /tmp/ccW8jD6Z.s:2945   .debug_loc:00000000000002a8 .LLST8
     /tmp/ccW8jD6Z.s:3099   .debug_str:000000000000026a .LASF98
     /tmp/ccW8jD6Z.s:2952   .debug_loc:00000000000002cb .LLST9
     /tmp/ccW8jD6Z.s:3101   .debug_str:000000000000026f .LASF99
     /tmp/ccW8jD6Z.s:2963   .debug_loc:0000000000000301 .LLST10
     /tmp/ccW8jD6Z.s:3103   .debug_str:0000000000000274 .LASF100
     /tmp/ccW8jD6Z.s:2970   .debug_loc:0000000000000324 .LLST11
     /tmp/ccW8jD6Z.s:3245   .debug_str:0000000000000724 .LASF101
     /tmp/ccW8jD6Z.s:2977   .debug_loc:0000000000000347 .LLST12
     /tmp/ccW8jD6Z.s:373    .text:000000000000019c .LVL23
     /tmp/ccW8jD6Z.s:442    .text:00000000000001c4 .LVL30
     /tmp/ccW8jD6Z.s:493    .text:00000000000001e8 .LVL36
     /tmp/ccW8jD6Z.s:504    .text:0000000000000200 .LVL38
     /tmp/ccW8jD6Z.s:541    .text:0000000000000238 .LVL43
     /tmp/ccW8jD6Z.s:566    .text:0000000000000254 .LVL46
     /tmp/ccW8jD6Z.s:216    .text:000000000000010c .LBB38
     /tmp/ccW8jD6Z.s:231    .text:0000000000000118 .LBE38
GAS LISTING /tmp/ccW8jD6Z.s 			page 33


     /tmp/ccW8jD6Z.s:237    .text:0000000000000120 .LBB40
     /tmp/ccW8jD6Z.s:252    .text:000000000000012c .LBE40
     /tmp/ccW8jD6Z.s:397    .text:00000000000001a8 .LBB45
     /tmp/ccW8jD6Z.s:408    .text:00000000000001ac .LBE45
     /tmp/ccW8jD6Z.s:2984   .debug_loc:000000000000036a .LLST13
     /tmp/ccW8jD6Z.s:413    .text:00000000000001b0 .LBB47
     /tmp/ccW8jD6Z.s:427    .text:00000000000001b8 .LBE47
     /tmp/ccW8jD6Z.s:2991   .debug_loc:000000000000038d .LLST14
     /tmp/ccW8jD6Z.s:86     .text:0000000000000034 .LBB30
     /tmp/ccW8jD6Z.s:103    .text:0000000000000040 .LBE30
     /tmp/ccW8jD6Z.s:142    .text:00000000000000a0 .LBB33
     /tmp/ccW8jD6Z.s:157    .text:00000000000000ac .LBE33
     /tmp/ccW8jD6Z.s:172    .text:00000000000000d4 .LBB35
     /tmp/ccW8jD6Z.s:187    .text:00000000000000e0 .LBE35
     /tmp/ccW8jD6Z.s:125    .text:0000000000000074 .LVL1
     /tmp/ccW8jD6Z.s:130    .text:0000000000000080 .LVL2
     /tmp/ccW8jD6Z.s:135    .text:0000000000000090 .LVL3
     /tmp/ccW8jD6Z.s:140    .text:00000000000000a0 .LVL4
     /tmp/ccW8jD6Z.s:160    .text:00000000000000b4 .LVL5
     /tmp/ccW8jD6Z.s:165    .text:00000000000000c4 .LVL6
     /tmp/ccW8jD6Z.s:170    .text:00000000000000d4 .LVL7
     /tmp/ccW8jD6Z.s:190    .text:00000000000000e8 .LVL8
     /tmp/ccW8jD6Z.s:195    .text:00000000000000f8 .LVL9
     /tmp/ccW8jD6Z.s:578    .text:0000000000000268 .LVL48
     /tmp/ccW8jD6Z.s:585    .text:000000000000027c .LVL49
     /tmp/ccW8jD6Z.s:592    .text:0000000000000290 .LVL50
     /tmp/ccW8jD6Z.s:10     .text:0000000000000000 .LFB21
     /tmp/ccW8jD6Z.s:40     .text:0000000000000020 .LFE21
     /tmp/ccW8jD6Z.s:3109   .debug_str:000000000000028d .LASF102
     /tmp/ccW8jD6Z.s:3133   .debug_str:0000000000000320 .LASF103
     /tmp/ccW8jD6Z.s:3075   .debug_str:00000000000001ba .LASF104
     /tmp/ccW8jD6Z.s:3237   .debug_str:00000000000006df .LASF105
     /tmp/ccW8jD6Z.s:3057   .debug_str:0000000000000120 .LASF106
     /tmp/ccW8jD6Z.s:3073   .debug_str:00000000000001a7 .LASF107
     /tmp/ccW8jD6Z.s:3253   .debug_str:000000000000077c .LASF108
     /tmp/ccW8jD6Z.s:3231   .debug_str:00000000000006a2 .LASF109
     /tmp/ccW8jD6Z.s:3145   .debug_str:000000000000035f .LASF110
     /tmp/ccW8jD6Z.s:612    .text:00000000000002a0 .LVL51
     /tmp/ccW8jD6Z.s:622    .text:00000000000002a8 .LVL52
     /tmp/ccW8jD6Z.s:667    .text:00000000000002cc .LVL53
     /tmp/ccW8jD6Z.s:676    .text:00000000000002d0 .LVL54
     /tmp/ccW8jD6Z.s:683    .text:00000000000002d4 .LVL55
     /tmp/ccW8jD6Z.s:692    .text:00000000000002d8 .LVL56
     /tmp/ccW8jD6Z.s:101    .text:0000000000000040 .LVL0
     /tmp/ccW8jD6Z.s:210    .text:000000000000010c .LVL10
     /tmp/ccW8jD6Z.s:381    .text:00000000000001a0 .LVL24
     /tmp/ccW8jD6Z.s:424    .text:00000000000001b8 .LVL28
     /tmp/ccW8jD6Z.s:465    .text:00000000000001d0 .LVL32
     /tmp/ccW8jD6Z.s:528    .text:000000000000021c .LVL42
     /tmp/ccW8jD6Z.s:262    .text:0000000000000134 .LVL11
     /tmp/ccW8jD6Z.s:274    .text:0000000000000148 .LVL12
     /tmp/ccW8jD6Z.s:305    .text:0000000000000160 .LVL13
     /tmp/ccW8jD6Z.s:324    .text:0000000000000170 .LVL15
     /tmp/ccW8jD6Z.s:365    .text:0000000000000190 .LVL21
     /tmp/ccW8jD6Z.s:371    .text:0000000000000194 .LVL22
     /tmp/ccW8jD6Z.s:437    .text:00000000000001bc .LVL29
     /tmp/ccW8jD6Z.s:452    .text:00000000000001cc .LVL31
GAS LISTING /tmp/ccW8jD6Z.s 			page 34


     /tmp/ccW8jD6Z.s:569    .text:0000000000000258 .LVL47
     /tmp/ccW8jD6Z.s:499    .text:00000000000001f0 .LVL37
     /tmp/ccW8jD6Z.s:507    .text:0000000000000204 .LVL39
     /tmp/ccW8jD6Z.s:518    .text:000000000000020c .LVL40
     /tmp/ccW8jD6Z.s:545    .text:000000000000023c .LVL44
     /tmp/ccW8jD6Z.s:556    .text:0000000000000244 .LVL45
     /tmp/ccW8jD6Z.s:471    .text:00000000000001d4 .LVL33
     /tmp/ccW8jD6Z.s:523    .text:0000000000000214 .LVL41
     /tmp/ccW8jD6Z.s:477    .text:00000000000001d8 .LVL34
     /tmp/ccW8jD6Z.s:487    .text:00000000000001e0 .LVL35
     /tmp/ccW8jD6Z.s:318    .text:000000000000016c .LVL14
     /tmp/ccW8jD6Z.s:346    .text:0000000000000184 .LVL19
     /tmp/ccW8jD6Z.s:356    .text:000000000000018c .LVL20
     /tmp/ccW8jD6Z.s:341    .text:000000000000017c .LVL18
     /tmp/ccW8jD6Z.s:330    .text:0000000000000174 .LVL16
     /tmp/ccW8jD6Z.s:336    .text:0000000000000178 .LVL17
     /tmp/ccW8jD6Z.s:396    .text:00000000000001a8 .LVL25
     /tmp/ccW8jD6Z.s:405    .text:00000000000001ac .LVL26
     /tmp/ccW8jD6Z.s:412    .text:00000000000001b0 .LVL27
     /tmp/ccW8jD6Z.s:767    .debug_info:0000000000000000 .Ldebug_info0
     /tmp/ccW8jD6Z.s:309    .text:0000000000000168 .LBB43
     /tmp/ccW8jD6Z.s:384    .text:00000000000001a0 .LBE43
     /tmp/ccW8jD6Z.s:429    .text:00000000000001b8 .LBB44
     /tmp/ccW8jD6Z.s:571    .text:0000000000000258 .LBE44

UNDEFINED SYMBOLS
_Z11printStringPKc
_Z12printIntegerm
__mem_alloc
__mem_free
_ZN7kThread13createProcessEPFvPvES0_S0_
_ZN7kThread7runningE
_ZN7kThread11kThreadExitEv
_ZN7kThread5yieldEv
console_handler
