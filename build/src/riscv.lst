GAS LISTING /tmp/ccCREoXF.s 			page 1


   1              		.file	"riscv.cpp"
   2              		.option pic
   3              		.option norelax
   4              		.text
   5              	.Ltext0:
   6              		.align	2
   7              		.globl	_ZN5Riscv10popSppSpieEv
   9              	_ZN5Riscv10popSppSpieEv:
  10              	.LFB21:
  11              		.file 1 "src/riscv.cpp"
   1:src/riscv.cpp **** //
   2:src/riscv.cpp **** // Created by marko on 20.4.22..
   3:src/riscv.cpp **** //
   4:src/riscv.cpp **** 
   5:src/riscv.cpp **** #include "../h/riscv.hpp"
   6:src/riscv.cpp **** #include "../lib/console.h"
   7:src/riscv.cpp **** #include "../h/print.hpp"
   8:src/riscv.cpp **** #include "../lib/mem.h"
   9:src/riscv.cpp **** #include "../h/kThread.hpp"
  10:src/riscv.cpp **** 
  11:src/riscv.cpp **** using Body = void (*)(void *);
  12:src/riscv.cpp **** 
  13:src/riscv.cpp **** void Riscv::popSppSpie()
  14:src/riscv.cpp **** {
  12              		.loc 1 14 1
  13              		.cfi_startproc
  14 0000 130101FF 		addi	sp,sp,-16
  15              		.cfi_def_cfa_offset 16
  16 0004 23348100 		sd	s0,8(sp)
  17              		.cfi_offset 8, -8
  18 0008 13040101 		addi	s0,sp,16
  19              		.cfi_def_cfa 8, 0
  15:src/riscv.cpp ****     __asm__ volatile ("csrw sepc, ra"); // sepc <=ra
  20              		.loc 1 15 5
  21              		.loc 1 15 39 is_stmt 0
  22              	#APP
  23              	# 15 "src/riscv.cpp" 1
  16              	    __asm__ volatile ("sret");
  24              		csrw sepc, ra
  25              	# 0 "" 2
  26              		.loc 1 16 5 is_stmt 1
  27              		.loc 1 16 30 is_stmt 0
  28              	# 16 "src/riscv.cpp" 1
  17              	}
  29              		sret
  30              	# 0 "" 2
  31              		.loc 1 17 1
  32              	#NO_APP
  33 0014 03348100 		ld	s0,8(sp)
  34              		.cfi_restore 8
  35              		.cfi_def_cfa 2, 16
  36 0018 13010101 		addi	sp,sp,16
  37              		.cfi_def_cfa_offset 0
  38 001c 67800000 		jr	ra
  39              		.cfi_endproc
  40              	.LFE21:
  42              		.section	.rodata.str1.8,"aMS",@progbits,1
GAS LISTING /tmp/ccCREoXF.s 			page 2


  43              		.align	3
  44              	.LC0:
  45 0000 496C6567 		.string	"Ilegalna instrukcija\n:"
  45      616C6E61 
  45      20696E73 
  45      7472756B 
  45      63696A61 
  46 0017 00       		.align	3
  47              	.LC1:
  48 0018 4E65646F 		.string	"Nedozvolena adresa citanja\n"
  48      7A766F6C 
  48      656E6120 
  48      61647265 
  48      73612063 
  49 0034 00000000 		.align	3
  50              	.LC2:
  51 0038 4E65646F 		.string	"Nedozvolena adresa upisa\n"
  51      7A766F6C 
  51      656E6120 
  51      61647265 
  51      73612075 
  52 0052 00000000 		.align	3
  52      0000
  53              	.LC3:
  54 0058 73636175 		.string	"scause: "
  54      73653A20 
  54      00
  55 0061 00000000 		.align	3
  55      000000
  56              	.LC4:
  57 0068 0A00     		.string	"\n"
  58 006a 00000000 		.align	3
  58      0000
  59              	.LC5:
  60 0070 73657063 		.string	"sepc: "
  60      3A2000
  61 0077 00       		.align	3
  62              	.LC6:
  63 0078 73747661 		.string	"stval: "
  63      6C3A2000 
  64              		.text
  65              		.align	2
  66              		.globl	_ZN5Riscv13handleSyscallEv
  68              	_ZN5Riscv13handleSyscallEv:
  69              	.LFB22:
  18:src/riscv.cpp **** 
  19:src/riscv.cpp **** void Riscv::handleSyscall() {
  70              		.loc 1 19 29 is_stmt 1
  71              		.cfi_startproc
  72 0020 130101FA 		addi	sp,sp,-96
  73              		.cfi_def_cfa_offset 96
  74 0024 233C1104 		sd	ra,88(sp)
  75 0028 23388104 		sd	s0,80(sp)
  76 002c 23349104 		sd	s1,72(sp)
  77              		.cfi_offset 1, -8
  78              		.cfi_offset 8, -16
  79              		.cfi_offset 9, -24
GAS LISTING /tmp/ccCREoXF.s 			page 3


  80 0030 13040106 		addi	s0,sp,96
  81              		.cfi_def_cfa 8, 0
  20:src/riscv.cpp **** 
  21:src/riscv.cpp ****     //uzimam parametre
  22:src/riscv.cpp ****     uint64 a0, a1, a2, a3, a4;
  82              		.loc 1 22 5
  23:src/riscv.cpp ****     __asm__ volatile("mv %0, a0" : "=r"(a0));
  83              		.loc 1 23 5
  84              		.loc 1 23 45 is_stmt 0
  85              	#APP
  86              	# 23 "src/riscv.cpp" 1
  24              	    __asm__ volatile("mv %0, a1" : "=r"(a1));
  87              		mv a5, a0
  88              	# 0 "" 2
  89              	.LVL0:
  90              		.loc 1 24 5 is_stmt 1
  91              		.loc 1 24 45 is_stmt 0
  92              	# 24 "src/riscv.cpp" 1
  25              	    __asm__ volatile("mv %0, a2" : "=r"(a2));
  93              		mv a5, a1
  94              	# 0 "" 2
  95              	.LVL1:
  96              		.loc 1 25 5 is_stmt 1
  97              		.loc 1 25 45 is_stmt 0
  98              	# 25 "src/riscv.cpp" 1
  26              	    __asm__ volatile("mv %0, a4" : "=r"(a3));
  99              		mv a5, a2
 100              	# 0 "" 2
 101              	.LVL2:
 102              		.loc 1 26 5 is_stmt 1
 103              		.loc 1 26 45 is_stmt 0
 104              	# 26 "src/riscv.cpp" 1
  27              	    __asm__ volatile("mv %0, a4" : "=r"(a4));
 105              		mv a5, a4
 106              	# 0 "" 2
 107              	.LVL3:
 108              		.loc 1 27 5 is_stmt 1
 109              		.loc 1 27 45 is_stmt 0
 110              	# 27 "src/riscv.cpp" 1
  28              	
 111              		mv a5, a4
 112              	# 0 "" 2
 113              	.LVL4:
  29:src/riscv.cpp ****     uint64  scause = r_scause();
 114              		.loc 1 29 5 is_stmt 1
 115              	#NO_APP
 116              	.LBB30:
 117              	.LBB31:
 118              		.file 2 "src/../h/riscv.hpp"
   1:src/../h/riscv.hpp **** //
   2:src/../h/riscv.hpp **** // Created by marko on 20.4.22..
   3:src/../h/riscv.hpp **** //
   4:src/../h/riscv.hpp **** 
   5:src/../h/riscv.hpp **** #ifndef OS_PROJECT_BASE_RISCV_HPP
   6:src/../h/riscv.hpp **** #define OS_PROJECT_BASE_RISCV_HPP
   7:src/../h/riscv.hpp **** 
   8:src/../h/riscv.hpp **** #include "../lib/hw.h"
GAS LISTING /tmp/ccCREoXF.s 			page 4


   9:src/../h/riscv.hpp **** //inline fje - bitno: nece se generisati masinski kod za poziv fje na mestu koriscenja u cpp kodu
  10:src/../h/riscv.hpp **** //ako imamo poziv u ra reg ce biti upisana adresa na koju prog treba da se vrati (sa inline nema to
  11:src/../h/riscv.hpp **** class Riscv
  12:src/../h/riscv.hpp **** {
  13:src/../h/riscv.hpp **** public:
  14:src/../h/riscv.hpp **** 
  15:src/../h/riscv.hpp ****     // pop sstatus.spp and sstatus.spie bits (has to be a non inline function)
  16:src/../h/riscv.hpp ****     static void popSppSpie();
  17:src/../h/riscv.hpp **** 
  18:src/../h/riscv.hpp ****     // push x3..x31 registers onto stack
  19:src/../h/riscv.hpp ****     static void pushRegisters();
  20:src/../h/riscv.hpp **** 
  21:src/../h/riscv.hpp ****     // pop x3..x31 registers onto stack
  22:src/../h/riscv.hpp ****     static void popRegisters();
  23:src/../h/riscv.hpp ****     //supervisor trap
  24:src/../h/riscv.hpp ****     static void supervisorTrap();
  25:src/../h/riscv.hpp **** 
  26:src/../h/riscv.hpp **** 
  27:src/../h/riscv.hpp ****     // read register scause
  28:src/../h/riscv.hpp ****     static uint64 r_scause();
  29:src/../h/riscv.hpp **** 
  30:src/../h/riscv.hpp ****     // write register scause
  31:src/../h/riscv.hpp ****     static void w_scause(uint64 scause);
  32:src/../h/riscv.hpp **** 
  33:src/../h/riscv.hpp ****     // read register sepc
  34:src/../h/riscv.hpp ****     static uint64 r_sepc();
  35:src/../h/riscv.hpp **** 
  36:src/../h/riscv.hpp ****     // write register sepc
  37:src/../h/riscv.hpp ****     static void w_sepc(uint64 sepc);
  38:src/../h/riscv.hpp **** 
  39:src/../h/riscv.hpp ****     // read register stvec
  40:src/../h/riscv.hpp ****     static uint64 r_stvec();
  41:src/../h/riscv.hpp **** 
  42:src/../h/riscv.hpp ****     // write register stvec
  43:src/../h/riscv.hpp ****     static void w_stvec(uint64 stvec);
  44:src/../h/riscv.hpp **** 
  45:src/../h/riscv.hpp ****     // read register stval
  46:src/../h/riscv.hpp ****     static uint64 r_stval();
  47:src/../h/riscv.hpp **** 
  48:src/../h/riscv.hpp ****     // write register stval
  49:src/../h/riscv.hpp ****     static void w_stval(uint64 stval);
  50:src/../h/riscv.hpp **** 
  51:src/../h/riscv.hpp ****     enum BitMaskSip
  52:src/../h/riscv.hpp ****     {
  53:src/../h/riscv.hpp ****         SIP_SSIP = (1 << 1),
  54:src/../h/riscv.hpp ****         SIP_STIP = (1 << 5),
  55:src/../h/riscv.hpp ****         SIP_SEIP = (1 << 9),
  56:src/../h/riscv.hpp ****     };
  57:src/../h/riscv.hpp **** 
  58:src/../h/riscv.hpp ****     // mask set register sip
  59:src/../h/riscv.hpp ****     static void ms_sip(uint64 mask);
  60:src/../h/riscv.hpp **** 
  61:src/../h/riscv.hpp ****     // mask clear register sip
  62:src/../h/riscv.hpp ****     static void mc_sip(uint64 mask);
  63:src/../h/riscv.hpp **** 
  64:src/../h/riscv.hpp ****     // read register sip
  65:src/../h/riscv.hpp ****     static uint64 r_sip();
GAS LISTING /tmp/ccCREoXF.s 			page 5


  66:src/../h/riscv.hpp **** 
  67:src/../h/riscv.hpp ****     // write register sip
  68:src/../h/riscv.hpp ****     static void w_sip(uint64 sip);
  69:src/../h/riscv.hpp **** 
  70:src/../h/riscv.hpp ****     enum BitMaskSstatus
  71:src/../h/riscv.hpp ****     {
  72:src/../h/riscv.hpp ****         SSTATUS_SIE = (1 << 1),
  73:src/../h/riscv.hpp ****         SSTATUS_SPIE = (1 << 5),
  74:src/../h/riscv.hpp ****         SSTATUS_SPP = (1 << 8),
  75:src/../h/riscv.hpp ****     };
  76:src/../h/riscv.hpp **** 
  77:src/../h/riscv.hpp ****     // mask set register sstatus
  78:src/../h/riscv.hpp ****     static void ms_sstatus(uint64 mask);
  79:src/../h/riscv.hpp **** 
  80:src/../h/riscv.hpp ****     // mask clear register sstatus
  81:src/../h/riscv.hpp ****     static void mc_sstatus(uint64 mask);
  82:src/../h/riscv.hpp **** 
  83:src/../h/riscv.hpp ****     // read register sstatus
  84:src/../h/riscv.hpp ****     static uint64 r_sstatus();
  85:src/../h/riscv.hpp **** 
  86:src/../h/riscv.hpp ****     // write register sstatus
  87:src/../h/riscv.hpp ****     static void w_sstatus(uint64 sstatus);
  88:src/../h/riscv.hpp **** 
  89:src/../h/riscv.hpp **** private:
  90:src/../h/riscv.hpp **** 
  91:src/../h/riscv.hpp ****     //handle za sistemske pzoive
  92:src/../h/riscv.hpp ****     static void handleSyscall();
  93:src/../h/riscv.hpp **** 
  94:src/../h/riscv.hpp ****     //handle za prekide od tajmera
  95:src/../h/riscv.hpp ****     static void handleTimerInterrupt();
  96:src/../h/riscv.hpp **** 
  97:src/../h/riscv.hpp ****     //handle za prekide od konzozle
  98:src/../h/riscv.hpp ****     static void handleConsoleInterrupt();
  99:src/../h/riscv.hpp **** 
 100:src/../h/riscv.hpp ****     //handle za bad cause
 101:src/../h/riscv.hpp ****     static void handleBadCause();
 102:src/../h/riscv.hpp **** };
 103:src/../h/riscv.hpp **** 
 104:src/../h/riscv.hpp **** inline uint64 Riscv::r_scause()
 105:src/../h/riscv.hpp **** {
 106:src/../h/riscv.hpp ****     uint64 volatile scause;
 119              		.loc 2 106 5
 107:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[scause], scause" : [scause] "=r"(scause));
 120              		.loc 2 107 5
 121              		.loc 2 107 72 is_stmt 0
 122              	#APP
 123              	# 107 "src/../h/riscv.hpp" 1
 108              	    return scause;
 124              		csrr a5, scause
 125              	# 0 "" 2
 126              	#NO_APP
 127 004c 233CF4FA 		sd	a5,-72(s0)
 128              		.loc 2 108 5 is_stmt 1
 129              		.loc 2 108 12 is_stmt 0
 130 0050 833484FB 		ld	s1,-72(s0)
 131              	.LVL5:
 132              	.LBE31:
GAS LISTING /tmp/ccCREoXF.s 			page 6


 133              	.LBE30:
  30:src/riscv.cpp **** 
  31:src/riscv.cpp ****     //ecall iz korisnickog, ecall iz sistemskog rezima
  32:src/riscv.cpp ****     if(scause == 0x0000000000000008UL || scause == 0x0000000000000009UL)//syscall
 134              		.loc 1 32 5 is_stmt 1
 135              	.LBB32:
 136              		.loc 1 32 39 is_stmt 0
 137 0054 138784FF 		addi	a4,s1,-8
 138              		.loc 1 32 5
 139 0058 93071000 		li	a5,1
 140 005c 63F2E70C 		bleu	a4,a5,.L15
  33:src/riscv.cpp ****     {
  34:src/riscv.cpp **** 
  35:src/riscv.cpp ****         uint64 volatile sepc = r_sepc()+ 4; // jer pc pokazuje na trenutnu instrukciju tj ecall, a 
  36:src/riscv.cpp ****         uint64 volatile sstatus = r_sstatus(); // kupim vrednost statusnog registra
  37:src/riscv.cpp ****         //obe stvari su mi bitne zbog desavanja kada se dodje na sret
  38:src/riscv.cpp **** 
  39:src/riscv.cpp ****         uint64  syscall;
  40:src/riscv.cpp ****         __asm__ volatile("mv %0, a0" : "=r"(syscall));
  41:src/riscv.cpp **** 
  42:src/riscv.cpp ****         size_t  size;
  43:src/riscv.cpp ****         void* ptr = nullptr;
  44:src/riscv.cpp ****         int ret;
  45:src/riscv.cpp **** //        Body body;
  46:src/riscv.cpp **** //        void* arg;
  47:src/riscv.cpp **** //        void* stack_space;
  48:src/riscv.cpp **** //        PCB** handleCreate;
  49:src/riscv.cpp **** //        thread_t handle;
  50:src/riscv.cpp **** //        struct kSemaphore* sem;
  51:src/riscv.cpp **** //          char character= 'A';
  52:src/riscv.cpp **** 
  53:src/riscv.cpp ****         switch(syscall)
  54:src/riscv.cpp ****         {
  55:src/riscv.cpp ****             case 0x01: //mem_alloc
  56:src/riscv.cpp ****                 __asm__ volatile("mv %0, a1":"=r"(size));
  57:src/riscv.cpp ****                 size *= MEM_BLOCK_SIZE;
  58:src/riscv.cpp ****                 //ptr = MemoryAllocator::kmem_alloc(size);
  59:src/riscv.cpp ****                 ptr = __mem_alloc(size);
  60:src/riscv.cpp ****                 __asm__ volatile("mv a0, %0" : : "r" (ptr));
  61:src/riscv.cpp ****                 break;
  62:src/riscv.cpp ****             case 0x02: //mem_free
  63:src/riscv.cpp ****                 __asm__ volatile("mv %0, a1": "=r"(ptr));
  64:src/riscv.cpp ****                 //ret = MemoryAllocator::kmem_free(ptr);
  65:src/riscv.cpp ****                 ret = __mem_free(ptr);
  66:src/riscv.cpp ****                 __asm__ volatile("mv a0, %0"::"r"(ret));
  67:src/riscv.cpp ****                 break;
  68:src/riscv.cpp ****             case 0x11://thread_create
  69:src/riscv.cpp **** //                kThread* handle;
  70:src/riscv.cpp **** //                Body body;
  71:src/riscv.cpp **** //                void * arg;
  72:src/riscv.cpp **** //                void * stack_space;
  73:src/riscv.cpp **** //                __asm__ volatile("mv %0, a1":"=r"(handle));
  74:src/riscv.cpp **** //                __asm__ volatile("mv %0, a2":"=r"(body));
  75:src/riscv.cpp **** //                __asm__ volatile("mv %0, a3":"=r"(arg));
  76:src/riscv.cpp **** //                if(body!= nullptr){
  77:src/riscv.cpp **** //                    __asm__ volatile("mv %0, a4":"=r"(stack_space));
  78:src/riscv.cpp **** //                }
GAS LISTING /tmp/ccCREoXF.s 			page 7


  79:src/riscv.cpp **** //                else stack_space = nullptr;
  80:src/riscv.cpp **** //
  81:src/riscv.cpp **** //                handle = kThread::createProcess(body,arg,stack_space);
  82:src/riscv.cpp **** //
  83:src/riscv.cpp **** //                if(handle) ret = 0;
  84:src/riscv.cpp **** //                else ret = -0x11;
  85:src/riscv.cpp **** //                __asm__ volatile("mv a0, %0"::"r"(ret));
  86:src/riscv.cpp **** //                break;
  87:src/riscv.cpp **** //            case 0x12://thread_exit
  88:src/riscv.cpp **** //                if(kThread::running->body == nullptr){
  89:src/riscv.cpp **** //                    ret = -0x12;
  90:src/riscv.cpp **** //                    __asm__ volatile("mv a0, %0"::"r"(ret));
  91:src/riscv.cpp **** //                }
  92:src/riscv.cpp **** //                else kThread::kThreadExit();
  93:src/riscv.cpp **** //                break;
  94:src/riscv.cpp **** //            case 0x13: //thread_dispatch
  95:src/riscv.cpp **** //                kThread::yield();
  96:src/riscv.cpp **** //                break;
  97:src/riscv.cpp **** //            case 0x14: //thread_join
  98:src/riscv.cpp **** //                __asm__ volatile("mv %0, a1":"=r"(handle));
  99:src/riscv.cpp **** //                PCB::join(handle);
 100:src/riscv.cpp **** //                break;
 101:src/riscv.cpp **** //            case 0x21: //sem_open
 102:src/riscv.cpp **** //                struct kSemaphore** handle;
 103:src/riscv.cpp **** //                int  init;
 104:src/riscv.cpp **** //                __asm__ volatile("mv %0, a1":"=r"(handle));
 105:src/riscv.cpp **** //                __asm__ volatile("mv %0, a2":"=r"(init));
 106:src/riscv.cpp **** //                *handle = kSemaphore::ksem_open(init);
 107:src/riscv.cpp **** //                if(*handle == nullptr) {
 108:src/riscv.cpp **** //                    ret = -21;
 109:src/riscv.cpp **** //                } else {
 110:src/riscv.cpp **** //                    ret=0;
 111:src/riscv.cpp **** //                }
 112:src/riscv.cpp **** //                __asm__ volatile("mv a0, %0"::"r"(ret));
 113:src/riscv.cpp **** //                break;
 114:src/riscv.cpp **** //            case 0x22://sem_close
 115:src/riscv.cpp **** //                __asm__ volatile("mv %0, a1":"=r"(sem));
 116:src/riscv.cpp **** //                if(sem == nullptr) {
 117:src/riscv.cpp **** //                    ret = -22;
 118:src/riscv.cpp **** //                    __asm__ volatile("mv a0, %0"::"r"(ret));
 119:src/riscv.cpp **** //                    return;
 120:src/riscv.cpp **** //                } else ret = 0;
 121:src/riscv.cpp **** //                kSemaphore::ksem_close(sem);
 122:src/riscv.cpp **** //                __asm__ volatile("mv a0, %0"::"r"(ret));
 123:src/riscv.cpp **** //                break;
 124:src/riscv.cpp **** //            case 0x23: //sem_wait
 125:src/riscv.cpp **** //                __asm__ volatile("mv %0, a1":"=r"(sem));
 126:src/riscv.cpp **** //                if(sem == nullptr) {
 127:src/riscv.cpp **** //                    ret = -23;
 128:src/riscv.cpp **** //                    __asm__ volatile("mv a0, %0"::"r"(ret));
 129:src/riscv.cpp **** //                } else ret =0;
 130:src/riscv.cpp **** //                kSemaphore::ksem_wait(sem);
 131:src/riscv.cpp **** //                __asm__ volatile("mv a0, %0"::"r"(ret));
 132:src/riscv.cpp **** //                break;
 133:src/riscv.cpp **** //            case 0x24: //sem_signal
 134:src/riscv.cpp **** //                __asm__ volatile("mv %0, a1":"=r"(sem));
 135:src/riscv.cpp **** //                if(sem == nullptr) {
GAS LISTING /tmp/ccCREoXF.s 			page 8


 136:src/riscv.cpp **** //                    ret = -24;
 137:src/riscv.cpp **** //                    __asm__ volatile("mv a0, %0"::"r"(ret));
 138:src/riscv.cpp **** //                    return;
 139:src/riscv.cpp **** //                } else ret=0;
 140:src/riscv.cpp **** //                kSemaphore::ksem_signal(sem);
 141:src/riscv.cpp **** //                __asm__ volatile("mv a0, %0"::"r"(ret));
 142:src/riscv.cpp **** //                break;
 143:src/riscv.cpp **** //            case 0x41: //getc
 144:src/riscv.cpp **** //                character = __getc(); //odlazim u timer interrupt umesto u console interrupt
 145:src/riscv.cpp **** //                __asm__ volatile("mv a0, %0"::"r"(character));
 146:src/riscv.cpp **** //                break;
 147:src/riscv.cpp **** //            case 0x42: //putc
 148:src/riscv.cpp **** //                char c;
 149:src/riscv.cpp **** //                __asm__ volatile("mv %0, a1":"=r"(c));
 150:src/riscv.cpp **** //                __putc(c);
 151:src/riscv.cpp **** //                break;
 152:src/riscv.cpp ****             case 0x55:
 153:src/riscv.cpp ****                 int args;
 154:src/riscv.cpp ****                 __asm__ volatile("mv %0, a1":"=r"(args));
 155:src/riscv.cpp ****                 args += 6;
 156:src/riscv.cpp ****                 __asm__ volatile("mv a0, %0"::"r"(args));
 157:src/riscv.cpp ****                 break;
 158:src/riscv.cpp ****             default: break;
 159:src/riscv.cpp ****         }
 160:src/riscv.cpp **** 
 161:src/riscv.cpp ****         __asm__ volatile("sd a0, 80(fp)"); //resava mi problem sa a0 (skontaj sta si tu radila)
 162:src/riscv.cpp ****         //PCB::dispatch();
 163:src/riscv.cpp ****         w_sstatus(sstatus);
 164:src/riscv.cpp ****         w_sepc(sepc);
 165:src/riscv.cpp **** 
 166:src/riscv.cpp ****     }
 167:src/riscv.cpp ****     else
 168:src/riscv.cpp **** 
 169:src/riscv.cpp ****     {
 170:src/riscv.cpp ****         if(scause == 0x0000000000000002UL)
 141              		.loc 1 170 9 is_stmt 1
 142 0060 93072000 		li	a5,2
 143 0064 638CF414 		beq	s1,a5,.L16
 171:src/riscv.cpp ****             printString("Ilegalna instrukcija\n:");
 172:src/riscv.cpp ****         else if (scause == 0x0000000000000005UL)
 144              		.loc 1 172 14
 145 0068 93075000 		li	a5,5
 146 006c 6382F416 		beq	s1,a5,.L17
 173:src/riscv.cpp ****             printString("Nedozvolena adresa citanja\n");
 174:src/riscv.cpp ****         else if (scause == 0x0000000000000007UL)
 147              		.loc 1 174 14
 148 0070 93077000 		li	a5,7
 149 0074 6388F416 		beq	s1,a5,.L18
 150              	.L12:
 175:src/riscv.cpp ****             printString("Nedozvolena adresa upisa\n");
 176:src/riscv.cpp **** 
 177:src/riscv.cpp **** 
 178:src/riscv.cpp ****         printString("scause: ");
 151              		.loc 1 178 9
 152              		.loc 1 178 20 is_stmt 0
 153 0078 17050000 		lla	a0,.LC3
 153      13050500 
GAS LISTING /tmp/ccCREoXF.s 			page 9


 154 0080 97000000 		call	_Z11printStringPKc@plt
 154      E7800000 
 155              	.LVL6:
 179:src/riscv.cpp ****         printInteger(scause);
 156              		.loc 1 179 9 is_stmt 1
 157              		.loc 1 179 21 is_stmt 0
 158 0088 13850400 		mv	a0,s1
 159 008c 97000000 		call	_Z12printIntegerm@plt
 159      E7800000 
 160              	.LVL7:
 180:src/riscv.cpp ****         printString("\n");
 161              		.loc 1 180 9 is_stmt 1
 162              		.loc 1 180 20 is_stmt 0
 163 0094 17050000 		lla	a0,.LC4
 163      13050500 
 164 009c 97000000 		call	_Z11printStringPKc@plt
 164      E7800000 
 165              	.LVL8:
 181:src/riscv.cpp ****         printString("sepc: ");
 166              		.loc 1 181 9 is_stmt 1
 167              		.loc 1 181 20 is_stmt 0
 168 00a4 17050000 		lla	a0,.LC5
 168      13050500 
 169 00ac 97000000 		call	_Z11printStringPKc@plt
 169      E7800000 
 170              	.LVL9:
 182:src/riscv.cpp ****         printInteger(r_sepc());
 171              		.loc 1 182 9 is_stmt 1
 172              	.LBB33:
 173              	.LBB34:
 109:src/../h/riscv.hpp **** }
 110:src/../h/riscv.hpp **** 
 111:src/../h/riscv.hpp **** inline void Riscv::w_scause(uint64 scause)
 112:src/../h/riscv.hpp **** {
 113:src/../h/riscv.hpp ****     __asm__ volatile ("csrw scause, %[scause]" : : [scause] "r"(scause));
 114:src/../h/riscv.hpp **** }
 115:src/../h/riscv.hpp **** 
 116:src/../h/riscv.hpp **** inline uint64 Riscv::r_sepc()
 117:src/../h/riscv.hpp **** {
 118:src/../h/riscv.hpp ****     uint64 volatile sepc;
 174              		.loc 2 118 5
 119:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sepc], sepc" : [sepc] "=r"(sepc));
 175              		.loc 2 119 5
 176              		.loc 2 119 64 is_stmt 0
 177              	#APP
 178              	# 119 "src/../h/riscv.hpp" 1
 120              	    return sepc;
 179              		csrr a5, sepc
 180              	# 0 "" 2
 181              	#NO_APP
 182 00b8 233CF4FC 		sd	a5,-40(s0)
 183              		.loc 2 120 5 is_stmt 1
 184              		.loc 2 120 12 is_stmt 0
 185 00bc 033584FD 		ld	a0,-40(s0)
 186              	.LBE34:
 187              	.LBE33:
 188              		.loc 1 182 21
GAS LISTING /tmp/ccCREoXF.s 			page 10


 189 00c0 97000000 		call	_Z12printIntegerm@plt
 189      E7800000 
 190              	.LVL10:
 183:src/riscv.cpp ****         printString("\n");
 191              		.loc 1 183 9 is_stmt 1
 192              		.loc 1 183 20 is_stmt 0
 193 00c8 17050000 		lla	a0,.LC4
 193      13050500 
 194 00d0 97000000 		call	_Z11printStringPKc@plt
 194      E7800000 
 195              	.LVL11:
 184:src/riscv.cpp ****         printString("stval: ");
 196              		.loc 1 184 9 is_stmt 1
 197              		.loc 1 184 20 is_stmt 0
 198 00d8 17050000 		lla	a0,.LC6
 198      13050500 
 199 00e0 97000000 		call	_Z11printStringPKc@plt
 199      E7800000 
 200              	.LVL12:
 185:src/riscv.cpp ****         printInteger(r_stval());
 201              		.loc 1 185 9 is_stmt 1
 202              	.LBB35:
 203              	.LBB36:
 121:src/../h/riscv.hpp **** }
 122:src/../h/riscv.hpp **** 
 123:src/../h/riscv.hpp **** inline void Riscv::w_sepc(uint64 sepc)
 124:src/../h/riscv.hpp **** {
 125:src/../h/riscv.hpp ****     __asm__ volatile ("csrw sepc, %[sepc]" : : [sepc] "r"(sepc));
 126:src/../h/riscv.hpp **** }
 127:src/../h/riscv.hpp **** 
 128:src/../h/riscv.hpp **** inline uint64 Riscv::r_stvec()
 129:src/../h/riscv.hpp **** {
 130:src/../h/riscv.hpp ****     uint64 volatile stvec;
 131:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[stvec], stvec" : [stvec] "=r"(stvec));
 132:src/../h/riscv.hpp ****     return stvec;
 133:src/../h/riscv.hpp **** }
 134:src/../h/riscv.hpp **** 
 135:src/../h/riscv.hpp **** inline void Riscv::w_stvec(uint64 stvec)
 136:src/../h/riscv.hpp **** {
 137:src/../h/riscv.hpp ****     __asm__ volatile ("csrw stvec, %[stvec]" : : [stvec] "r"(stvec));
 138:src/../h/riscv.hpp **** }
 139:src/../h/riscv.hpp **** 
 140:src/../h/riscv.hpp **** inline uint64 Riscv::r_stval()
 141:src/../h/riscv.hpp **** {
 142:src/../h/riscv.hpp ****     uint64 volatile stval;
 204              		.loc 2 142 5
 143:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[stval], stval" : [stval] "=r"(stval));
 205              		.loc 2 143 5
 206              		.loc 2 143 68 is_stmt 0
 207              	#APP
 208              	# 143 "src/../h/riscv.hpp" 1
 144              	    return stval;
 209              		csrr a5, stval
 210              	# 0 "" 2
 211              	#NO_APP
 212 00ec 2338F4FC 		sd	a5,-48(s0)
 213              		.loc 2 144 5 is_stmt 1
GAS LISTING /tmp/ccCREoXF.s 			page 11


 214              		.loc 2 144 12 is_stmt 0
 215 00f0 033504FD 		ld	a0,-48(s0)
 216              	.LBE36:
 217              	.LBE35:
 218              		.loc 1 185 21
 219 00f4 97000000 		call	_Z12printIntegerm@plt
 219      E7800000 
 220              	.LVL13:
 186:src/riscv.cpp ****         printString("\n");
 221              		.loc 1 186 9 is_stmt 1
 222              		.loc 1 186 20 is_stmt 0
 223 00fc 17050000 		lla	a0,.LC4
 223      13050500 
 224 0104 97000000 		call	_Z11printStringPKc@plt
 224      E7800000 
 225              	.LVL14:
 226              	.L3:
 227              	.LBE32:
 187:src/riscv.cpp ****         //while(1);
 188:src/riscv.cpp ****     }
 189:src/riscv.cpp **** }
 228              		.loc 1 189 1
 229 010c 83308105 		ld	ra,88(sp)
 230              		.cfi_remember_state
 231              		.cfi_restore 1
 232 0110 03340105 		ld	s0,80(sp)
 233              		.cfi_restore 8
 234              		.cfi_def_cfa 2, 96
 235 0114 83348104 		ld	s1,72(sp)
 236              		.cfi_restore 9
 237              	.LVL15:
 238 0118 13010106 		addi	sp,sp,96
 239              		.cfi_def_cfa_offset 0
 240 011c 67800000 		jr	ra
 241              	.LVL16:
 242              	.L15:
 243              		.cfi_restore_state
 244              	.LBB50:
 245              	.LBB37:
  35:src/riscv.cpp ****         uint64 volatile sstatus = r_sstatus(); // kupim vrednost statusnog registra
 246              		.loc 1 35 9 is_stmt 1
 247              	.LBB38:
 248              	.LBB39:
 118:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sepc], sepc" : [sepc] "=r"(sepc));
 249              		.loc 2 118 5
 119:src/../h/riscv.hpp ****     return sepc;
 250              		.loc 2 119 5
 119:src/../h/riscv.hpp ****     return sepc;
 251              		.loc 2 119 64 is_stmt 0
 252              	#APP
 253              	# 119 "src/../h/riscv.hpp" 1
 254              		csrr a5, sepc
 255              	# 0 "" 2
 256              	#NO_APP
 257 0124 2334F4FC 		sd	a5,-56(s0)
 120:src/../h/riscv.hpp **** }
 258              		.loc 2 120 5 is_stmt 1
GAS LISTING /tmp/ccCREoXF.s 			page 12


 120:src/../h/riscv.hpp **** }
 259              		.loc 2 120 12 is_stmt 0
 260 0128 833784FC 		ld	a5,-56(s0)
 261              	.LBE39:
 262              	.LBE38:
  35:src/riscv.cpp ****         uint64 volatile sstatus = r_sstatus(); // kupim vrednost statusnog registra
 263              		.loc 1 35 40
 264 012c 93874700 		addi	a5,a5,4
  35:src/riscv.cpp ****         uint64 volatile sstatus = r_sstatus(); // kupim vrednost statusnog registra
 265              		.loc 1 35 42
 266 0130 2334F4FA 		sd	a5,-88(s0)
  36:src/riscv.cpp ****         //obe stvari su mi bitne zbog desavanja kada se dodje na sret
 267              		.loc 1 36 9 is_stmt 1
 268              	.LBB40:
 269              	.LBB41:
 145:src/../h/riscv.hpp **** }
 146:src/../h/riscv.hpp **** 
 147:src/../h/riscv.hpp **** inline void Riscv::w_stval(uint64 stval)
 148:src/../h/riscv.hpp **** {
 149:src/../h/riscv.hpp ****     __asm__ volatile ("csrw stval, %[stval]" : : [stval] "r"(stval));
 150:src/../h/riscv.hpp **** }
 151:src/../h/riscv.hpp **** 
 152:src/../h/riscv.hpp **** inline void Riscv::ms_sip(uint64 mask)
 153:src/../h/riscv.hpp **** {
 154:src/../h/riscv.hpp ****     __asm__ volatile ("csrs sip, %[mask]" : : [mask] "r"(mask));
 155:src/../h/riscv.hpp **** }
 156:src/../h/riscv.hpp **** 
 157:src/../h/riscv.hpp **** inline void Riscv::mc_sip(uint64 mask)
 158:src/../h/riscv.hpp **** {
 159:src/../h/riscv.hpp ****     __asm__ volatile ("csrc sip, %[mask]" : : [mask] "r"(mask));
 160:src/../h/riscv.hpp **** }
 161:src/../h/riscv.hpp **** 
 162:src/../h/riscv.hpp **** inline uint64 Riscv::r_sip()
 163:src/../h/riscv.hpp **** {
 164:src/../h/riscv.hpp ****     uint64 volatile sip;
 165:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sip], sip" : [sip] "=r"(sip));
 166:src/../h/riscv.hpp ****     return sip;
 167:src/../h/riscv.hpp **** }
 168:src/../h/riscv.hpp **** 
 169:src/../h/riscv.hpp **** inline void Riscv::w_sip(uint64 sip)
 170:src/../h/riscv.hpp **** {
 171:src/../h/riscv.hpp ****     __asm__ volatile ("csrw sip, %[sip]" : : [sip] "r"(sip));
 172:src/../h/riscv.hpp **** }
 173:src/../h/riscv.hpp **** 
 174:src/../h/riscv.hpp **** inline void Riscv::ms_sstatus(uint64 mask)
 175:src/../h/riscv.hpp **** {
 176:src/../h/riscv.hpp ****     __asm__ volatile ("csrs sstatus, %[mask]" : : [mask] "r"(mask));
 177:src/../h/riscv.hpp **** }
 178:src/../h/riscv.hpp **** 
 179:src/../h/riscv.hpp **** inline void Riscv::mc_sstatus(uint64 mask)
 180:src/../h/riscv.hpp **** {
 181:src/../h/riscv.hpp ****     __asm__ volatile ("csrc sstatus, %[mask]" : : [mask] "r"(mask));
 182:src/../h/riscv.hpp **** }
 183:src/../h/riscv.hpp **** 
 184:src/../h/riscv.hpp **** inline uint64 Riscv::r_sstatus()
 185:src/../h/riscv.hpp **** {
 186:src/../h/riscv.hpp ****     uint64 volatile sstatus;
GAS LISTING /tmp/ccCREoXF.s 			page 13


 270              		.loc 2 186 5
 187:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sstatus], sstatus" : [sstatus] "=r"(sstatus));
 271              		.loc 2 187 5
 272              		.loc 2 187 76 is_stmt 0
 273              	#APP
 274              	# 187 "src/../h/riscv.hpp" 1
 188              	    return sstatus;
 275              		csrr a5, sstatus
 276              	# 0 "" 2
 277              	#NO_APP
 278 0138 2330F4FC 		sd	a5,-64(s0)
 279              		.loc 2 188 5 is_stmt 1
 280              		.loc 2 188 12 is_stmt 0
 281 013c 833704FC 		ld	a5,-64(s0)
 282              	.LBE41:
 283              	.LBE40:
  36:src/riscv.cpp ****         //obe stvari su mi bitne zbog desavanja kada se dodje na sret
 284              		.loc 1 36 45
 285 0140 2338F4FA 		sd	a5,-80(s0)
  39:src/riscv.cpp ****         __asm__ volatile("mv %0, a0" : "=r"(syscall));
 286              		.loc 1 39 9 is_stmt 1
  40:src/riscv.cpp **** 
 287              		.loc 1 40 9
  40:src/riscv.cpp **** 
 288              		.loc 1 40 54 is_stmt 0
 289              	#APP
 290              	# 40 "src/riscv.cpp" 1
 291              		mv a5, a0
 292              	# 0 "" 2
 293              	.LVL17:
  42:src/riscv.cpp ****         void* ptr = nullptr;
 294              		.loc 1 42 9 is_stmt 1
  43:src/riscv.cpp ****         int ret;
 295              		.loc 1 43 9
  44:src/riscv.cpp **** //        Body body;
 296              		.loc 1 44 9
  53:src/riscv.cpp ****         {
 297              		.loc 1 53 9
 298              	#NO_APP
 299              	.LBB42:
 300 0148 13072000 		li	a4,2
 301 014c 638EE704 		beq	a5,a4,.L5
 302 0150 636CF702 		bgtu	a5,a4,.L6
 303 0154 13071000 		li	a4,1
 304 0158 639CE700 		bne	a5,a4,.L8
 305              	.LBB43:
  55:src/riscv.cpp ****                 __asm__ volatile("mv %0, a1":"=r"(size));
 306              		.loc 1 55 13
  56:src/riscv.cpp ****                 size *= MEM_BLOCK_SIZE;
 307              		.loc 1 56 17
  56:src/riscv.cpp ****                 size *= MEM_BLOCK_SIZE;
 308              		.loc 1 56 57 is_stmt 0
 309              	#APP
 310              	# 56 "src/riscv.cpp" 1
 311              		mv a0, a1
 312              	# 0 "" 2
 313              	.LVL18:
GAS LISTING /tmp/ccCREoXF.s 			page 14


  57:src/riscv.cpp ****                 //ptr = MemoryAllocator::kmem_alloc(size);
 314              		.loc 1 57 17 is_stmt 1
  59:src/riscv.cpp ****                 __asm__ volatile("mv a0, %0" : : "r" (ptr));
 315              		.loc 1 59 17
  59:src/riscv.cpp ****                 __asm__ volatile("mv a0, %0" : : "r" (ptr));
 316              		.loc 1 59 34 is_stmt 0
 317              	#NO_APP
 318 0160 13156500 		slli	a0,a0,6
 319              	.LVL19:
 320 0164 97000000 		call	__mem_alloc@plt
 320      E7800000 
 321              	.LVL20:
  60:src/riscv.cpp ****                 break;
 322              		.loc 1 60 17 is_stmt 1
  60:src/riscv.cpp ****                 break;
 323              		.loc 1 60 60 is_stmt 0
 324              	#APP
 325              	# 60 "src/riscv.cpp" 1
  61:src/riscv.cpp ****             case 0x02: //mem_free
 326              		mv a0, a0
 327              	# 0 "" 2
 328              		.loc 1 61 17 is_stmt 1
 329              	.LVL21:
 330              	#NO_APP
 331              	.L8:
 332              	.LBE43:
 333              	.LBE42:
 161:src/riscv.cpp ****         //PCB::dispatch();
 334              		.loc 1 161 9
 161:src/riscv.cpp ****         //PCB::dispatch();
 335              		.loc 1 161 42 is_stmt 0
 336              	#APP
 337              	# 161 "src/riscv.cpp" 1
 163:src/riscv.cpp ****         w_sepc(sepc);
 338              		sd a0, 80(fp)
 339              	# 0 "" 2
 340              		.loc 1 163 9 is_stmt 1
 163:src/riscv.cpp ****         w_sepc(sepc);
 341              		.loc 1 163 18 is_stmt 0
 342              	#NO_APP
 343 0174 833704FB 		ld	a5,-80(s0)
 344              	.LVL22:
 345              	.LBB45:
 346              	.LBB46:
 189:src/../h/riscv.hpp **** }
 190:src/../h/riscv.hpp **** 
 191:src/../h/riscv.hpp **** inline void Riscv::w_sstatus(uint64 sstatus)
 192:src/../h/riscv.hpp **** {
 193:src/../h/riscv.hpp ****     __asm__ volatile ("csrw sstatus, %[sstatus]" : : [sstatus] "r"(sstatus));
 347              		.loc 2 193 5 is_stmt 1
 348              		.loc 2 193 77 is_stmt 0
 349              	#APP
 350              	# 193 "src/../h/riscv.hpp" 1
 194              	}
 351              		csrw sstatus, a5
 352              	# 0 "" 2
 353              	.LVL23:
GAS LISTING /tmp/ccCREoXF.s 			page 15


 354              	#NO_APP
 355              	.LBE46:
 356              	.LBE45:
 164:src/riscv.cpp **** 
 357              		.loc 1 164 9 is_stmt 1
 164:src/riscv.cpp **** 
 358              		.loc 1 164 15 is_stmt 0
 359 017c 833784FA 		ld	a5,-88(s0)
 360              	.LVL24:
 361              	.LBB47:
 362              	.LBB48:
 125:src/../h/riscv.hpp **** }
 363              		.loc 2 125 5 is_stmt 1
 125:src/../h/riscv.hpp **** }
 364              		.loc 2 125 65 is_stmt 0
 365              	#APP
 366              	# 125 "src/../h/riscv.hpp" 1
 126:src/../h/riscv.hpp **** 
 367              		csrw sepc, a5
 368              	# 0 "" 2
 369              		.loc 2 126 1
 370              	#NO_APP
 371 0184 6FF09FF8 		j	.L3
 372              	.LVL25:
 373              	.L6:
 374              	.LBE48:
 375              	.LBE47:
 376              	.LBB49:
  53:src/riscv.cpp ****         {
 377              		.loc 1 53 9
 378 0188 13071001 		li	a4,17
 379 018c 6386E700 		beq	a5,a4,.L9
 380 0190 13075005 		li	a4,85
 381 0194 E39EE7FC 		bne	a5,a4,.L8
 382              	.L9:
 383              	.LBB44:
  68:src/riscv.cpp **** //                kThread* handle;
 384              		.loc 1 68 13 is_stmt 1
 152:src/riscv.cpp ****                 int args;
 385              		.loc 1 152 13
 153:src/riscv.cpp ****                 __asm__ volatile("mv %0, a1":"=r"(args));
 386              		.loc 1 153 17
 154:src/riscv.cpp ****                 args += 6;
 387              		.loc 1 154 17
 154:src/riscv.cpp ****                 args += 6;
 388              		.loc 1 154 57 is_stmt 0
 389              	#APP
 390              	# 154 "src/riscv.cpp" 1
 391              		mv a5, a1
 392              	# 0 "" 2
 393              	.LVL26:
 155:src/riscv.cpp ****                 __asm__ volatile("mv a0, %0"::"r"(args));
 394              		.loc 1 155 17 is_stmt 1
 155:src/riscv.cpp ****                 __asm__ volatile("mv a0, %0"::"r"(args));
 395              		.loc 1 155 22 is_stmt 0
 396              	#NO_APP
 397 019c 9B876700 		addiw	a5,a5,6
GAS LISTING /tmp/ccCREoXF.s 			page 16


 398              	.LVL27:
 156:src/riscv.cpp ****                 break;
 399              		.loc 1 156 17 is_stmt 1
 156:src/riscv.cpp ****                 break;
 400              		.loc 1 156 57 is_stmt 0
 401              	#APP
 402              	# 156 "src/riscv.cpp" 1
 157:src/riscv.cpp ****             default: break;
 403              		mv a0, a5
 404              	# 0 "" 2
 405              		.loc 1 157 17 is_stmt 1
 406              	#NO_APP
 407 01a4 6FF0DFFC 		j	.L8
 408              	.LVL28:
 409              	.L5:
  62:src/riscv.cpp ****                 __asm__ volatile("mv %0, a1": "=r"(ptr));
 410              		.loc 1 62 13
  63:src/riscv.cpp ****                 //ret = MemoryAllocator::kmem_free(ptr);
 411              		.loc 1 63 17
  63:src/riscv.cpp ****                 //ret = MemoryAllocator::kmem_free(ptr);
 412              		.loc 1 63 57 is_stmt 0
 413              	#APP
 414              	# 63 "src/riscv.cpp" 1
 415              		mv a0, a1
 416              	# 0 "" 2
 417              	.LVL29:
  65:src/riscv.cpp ****                 __asm__ volatile("mv a0, %0"::"r"(ret));
 418              		.loc 1 65 17 is_stmt 1
  65:src/riscv.cpp ****                 __asm__ volatile("mv a0, %0"::"r"(ret));
 419              		.loc 1 65 33 is_stmt 0
 420              	#NO_APP
 421 01ac 97000000 		call	__mem_free@plt
 421      E7800000 
 422              	.LVL30:
  66:src/riscv.cpp ****                 break;
 423              		.loc 1 66 17 is_stmt 1
  66:src/riscv.cpp ****                 break;
 424              		.loc 1 66 56 is_stmt 0
 425              	#APP
 426              	# 66 "src/riscv.cpp" 1
  67:src/riscv.cpp ****             case 0x11://thread_create
 427              		mv a0, a0
 428              	# 0 "" 2
 429              		.loc 1 67 17 is_stmt 1
 430              	#NO_APP
 431 01b8 6FF09FFB 		j	.L8
 432              	.LVL31:
 433              	.L16:
 434              	.LBE44:
 435              	.LBE49:
 436              	.LBE37:
 171:src/riscv.cpp ****         else if (scause == 0x0000000000000005UL)
 437              		.loc 1 171 13
 171:src/riscv.cpp ****         else if (scause == 0x0000000000000005UL)
 438              		.loc 1 171 24 is_stmt 0
 439 01bc 17050000 		lla	a0,.LC0
 439      13050500 
GAS LISTING /tmp/ccCREoXF.s 			page 17


 440 01c4 97000000 		call	_Z11printStringPKc@plt
 440      E7800000 
 441              	.LVL32:
 442 01cc 6FF0DFEA 		j	.L12
 443              	.L17:
 173:src/riscv.cpp ****         else if (scause == 0x0000000000000007UL)
 444              		.loc 1 173 13 is_stmt 1
 173:src/riscv.cpp ****         else if (scause == 0x0000000000000007UL)
 445              		.loc 1 173 24 is_stmt 0
 446 01d0 17050000 		lla	a0,.LC1
 446      13050500 
 447 01d8 97000000 		call	_Z11printStringPKc@plt
 447      E7800000 
 448              	.LVL33:
 449 01e0 6FF09FE9 		j	.L12
 450              	.L18:
 175:src/riscv.cpp **** 
 451              		.loc 1 175 13 is_stmt 1
 175:src/riscv.cpp **** 
 452              		.loc 1 175 24 is_stmt 0
 453 01e4 17050000 		lla	a0,.LC2
 453      13050500 
 454 01ec 97000000 		call	_Z11printStringPKc@plt
 454      E7800000 
 455              	.LVL34:
 456 01f4 6FF05FE8 		j	.L12
 457              	.LBE50:
 458              		.cfi_endproc
 459              	.LFE22:
 461              		.align	2
 462              		.globl	_ZN5Riscv20handleTimerInterruptEv
 464              	_ZN5Riscv20handleTimerInterruptEv:
 465              	.LFB23:
 190:src/riscv.cpp **** void Riscv::handleTimerInterrupt() {
 466              		.loc 1 190 36 is_stmt 1
 467              		.cfi_startproc
 468 01f8 130101FD 		addi	sp,sp,-48
 469              		.cfi_def_cfa_offset 48
 470 01fc 23348102 		sd	s0,40(sp)
 471              		.cfi_offset 8, -8
 472 0200 13040103 		addi	s0,sp,48
 473              		.cfi_def_cfa 8, 0
 191:src/riscv.cpp **** 
 192:src/riscv.cpp ****     mc_sip(SIP_SSIP); //zasto ovo?? - ni ne radim vrv
 474              		.loc 1 192 5
 475              	.LVL35:
 476              	.LBB51:
 477              	.LBB52:
 159:src/../h/riscv.hpp **** }
 478              		.loc 2 159 5
 159:src/../h/riscv.hpp **** }
 479              		.loc 2 159 64 is_stmt 0
 480 0204 93072000 		li	a5,2
 481              	#APP
 482              	# 159 "src/../h/riscv.hpp" 1
 483              		csrc sip, a5
 484              	# 0 "" 2
GAS LISTING /tmp/ccCREoXF.s 			page 18


 485              	.LVL36:
 486              	#NO_APP
 487              	.LBE52:
 488              	.LBE51:
 193:src/riscv.cpp **** 
 194:src/riscv.cpp ****     uint64 volatile sepc = r_sepc();
 489              		.loc 1 194 5 is_stmt 1
 490              	.LBB53:
 491              	.LBB54:
 118:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sepc], sepc" : [sepc] "=r"(sepc));
 492              		.loc 2 118 5
 119:src/../h/riscv.hpp ****     return sepc;
 493              		.loc 2 119 5
 119:src/../h/riscv.hpp ****     return sepc;
 494              		.loc 2 119 64 is_stmt 0
 495              	#APP
 496              	# 119 "src/../h/riscv.hpp" 1
 497              		csrr a5, sepc
 498              	# 0 "" 2
 499              	#NO_APP
 500 0210 233CF4FC 		sd	a5,-40(s0)
 120:src/../h/riscv.hpp **** }
 501              		.loc 2 120 5 is_stmt 1
 120:src/../h/riscv.hpp **** }
 502              		.loc 2 120 12 is_stmt 0
 503 0214 833784FD 		ld	a5,-40(s0)
 504              	.LBE54:
 505              	.LBE53:
 506              		.loc 1 194 35
 507 0218 2334F4FE 		sd	a5,-24(s0)
 195:src/riscv.cpp ****     uint64 volatile sstatus = r_sstatus();
 508              		.loc 1 195 5 is_stmt 1
 509              	.LBB55:
 510              	.LBB56:
 186:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sstatus], sstatus" : [sstatus] "=r"(sstatus));
 511              		.loc 2 186 5
 187:src/../h/riscv.hpp ****     return sstatus;
 512              		.loc 2 187 5
 187:src/../h/riscv.hpp ****     return sstatus;
 513              		.loc 2 187 76 is_stmt 0
 514              	#APP
 515              	# 187 "src/../h/riscv.hpp" 1
 516              		csrr a5, sstatus
 517              	# 0 "" 2
 518              	#NO_APP
 519 0220 2338F4FC 		sd	a5,-48(s0)
 188:src/../h/riscv.hpp **** }
 520              		.loc 2 188 5 is_stmt 1
 188:src/../h/riscv.hpp **** }
 521              		.loc 2 188 12 is_stmt 0
 522 0224 833704FD 		ld	a5,-48(s0)
 523              	.LBE56:
 524              	.LBE55:
 525              		.loc 1 195 41
 526 0228 2330F4FE 		sd	a5,-32(s0)
 196:src/riscv.cpp ****     w_sstatus(sstatus);
 527              		.loc 1 196 5 is_stmt 1
GAS LISTING /tmp/ccCREoXF.s 			page 19


 528              		.loc 1 196 14 is_stmt 0
 529 022c 833704FE 		ld	a5,-32(s0)
 530              	.LVL37:
 531              	.LBB57:
 532              	.LBB58:
 193:src/../h/riscv.hpp **** }
 533              		.loc 2 193 5 is_stmt 1
 193:src/../h/riscv.hpp **** }
 534              		.loc 2 193 77 is_stmt 0
 535              	#APP
 536              	# 193 "src/../h/riscv.hpp" 1
 537              		csrw sstatus, a5
 538              	# 0 "" 2
 539              	.LVL38:
 540              	#NO_APP
 541              	.LBE58:
 542              	.LBE57:
 197:src/riscv.cpp ****     w_sepc(sepc);
 543              		.loc 1 197 5 is_stmt 1
 544              		.loc 1 197 11 is_stmt 0
 545 0234 833784FE 		ld	a5,-24(s0)
 546              	.LVL39:
 547              	.LBB59:
 548              	.LBB60:
 125:src/../h/riscv.hpp **** }
 549              		.loc 2 125 5 is_stmt 1
 125:src/../h/riscv.hpp **** }
 550              		.loc 2 125 65 is_stmt 0
 551              	#APP
 552              	# 125 "src/../h/riscv.hpp" 1
 553              		csrw sepc, a5
 554              	# 0 "" 2
 555              	.LVL40:
 556              	#NO_APP
 557              	.LBE60:
 558              	.LBE59:
 198:src/riscv.cpp **** }
 559              		.loc 1 198 1
 560 023c 03348102 		ld	s0,40(sp)
 561              		.cfi_restore 8
 562              		.cfi_def_cfa 2, 48
 563 0240 13010103 		addi	sp,sp,48
 564              		.cfi_def_cfa_offset 0
 565 0244 67800000 		jr	ra
 566              		.cfi_endproc
 567              	.LFE23:
 569              		.align	2
 570              		.globl	_ZN5Riscv22handleConsoleInterruptEv
 572              	_ZN5Riscv22handleConsoleInterruptEv:
 573              	.LFB24:
 199:src/riscv.cpp **** 
 200:src/riscv.cpp **** void Riscv::handleConsoleInterrupt() {
 574              		.loc 1 200 38 is_stmt 1
 575              		.cfi_startproc
 576 0248 130101FF 		addi	sp,sp,-16
 577              		.cfi_def_cfa_offset 16
 578 024c 23341100 		sd	ra,8(sp)
GAS LISTING /tmp/ccCREoXF.s 			page 20


 579 0250 23308100 		sd	s0,0(sp)
 580              		.cfi_offset 1, -8
 581              		.cfi_offset 8, -16
 582 0254 13040101 		addi	s0,sp,16
 583              		.cfi_def_cfa 8, 0
 201:src/riscv.cpp ****     console_handler();
 584              		.loc 1 201 5
 585              		.loc 1 201 20 is_stmt 0
 586 0258 97000000 		call	console_handler@plt
 586      E7800000 
 587              	.LVL41:
 202:src/riscv.cpp **** }
 588              		.loc 1 202 1
 589 0260 83308100 		ld	ra,8(sp)
 590              		.cfi_restore 1
 591 0264 03340100 		ld	s0,0(sp)
 592              		.cfi_restore 8
 593              		.cfi_def_cfa 2, 16
 594 0268 13010101 		addi	sp,sp,16
 595              		.cfi_def_cfa_offset 0
 596 026c 67800000 		jr	ra
 597              		.cfi_endproc
 598              	.LFE24:
 600              		.align	2
 601              		.globl	_ZN5Riscv14handleBadCauseEv
 603              	_ZN5Riscv14handleBadCauseEv:
 604              	.LFB25:
 203:src/riscv.cpp **** 
 204:src/riscv.cpp **** void Riscv::handleBadCause() {
 605              		.loc 1 204 30 is_stmt 1
 606              		.cfi_startproc
 607 0270 130101FF 		addi	sp,sp,-16
 608              		.cfi_def_cfa_offset 16
 609 0274 23348100 		sd	s0,8(sp)
 610              		.cfi_offset 8, -8
 611 0278 13040101 		addi	s0,sp,16
 612              		.cfi_def_cfa 8, 0
 205:src/riscv.cpp **** 
 206:src/riscv.cpp **** }...
 613              		.loc 1 206 1 is_stmt 0
 614 027c 03348100 		ld	s0,8(sp)
 615              		.cfi_restore 8
 616              		.cfi_def_cfa 2, 16
 617 0280 13010101 		addi	sp,sp,16
 618              		.cfi_def_cfa_offset 0
 619 0284 67800000 		jr	ra
 620              		.cfi_endproc
 621              	.LFE25:
 623              	.Letext0:
 624              		.file 3 "src/../h/../lib/hw.h"
 625              		.file 4 "src/../lib/console.h"
 626              		.file 5 "src/../lib/mem.h"
 627              		.file 6 "src/../h/print.hpp"
GAS LISTING /tmp/ccCREoXF.s 			page 21


DEFINED SYMBOLS
                            *ABS*:0000000000000000 riscv.cpp
     /tmp/ccCREoXF.s:9      .text:0000000000000000 _ZN5Riscv10popSppSpieEv
     /tmp/ccCREoXF.s:13     .text:0000000000000000 .L0 
     /tmp/ccCREoXF.s:14     .text:0000000000000000 .L0 
     /tmp/ccCREoXF.s:15     .text:0000000000000004 .L0 
     /tmp/ccCREoXF.s:17     .text:0000000000000008 .L0 
     /tmp/ccCREoXF.s:19     .text:000000000000000c .L0 
     /tmp/ccCREoXF.s:21     .text:000000000000000c .L0 
       src/riscv.cpp:15     .text:000000000000000c .L0 
     /tmp/ccCREoXF.s:27     .text:0000000000000010 .L0 
       src/riscv.cpp:16     .text:0000000000000010 .L0 
     /tmp/ccCREoXF.s:33     .text:0000000000000014 .L0 
     /tmp/ccCREoXF.s:34     .text:0000000000000018 .L0 
     /tmp/ccCREoXF.s:35     .text:0000000000000018 .L0 
     /tmp/ccCREoXF.s:37     .text:000000000000001c .L0 
     /tmp/ccCREoXF.s:39     .text:0000000000000020 .L0 
     /tmp/ccCREoXF.s:68     .text:0000000000000020 _ZN5Riscv13handleSyscallEv
     /tmp/ccCREoXF.s:71     .text:0000000000000020 .L0 
     /tmp/ccCREoXF.s:72     .text:0000000000000020 .L0 
     /tmp/ccCREoXF.s:73     .text:0000000000000024 .L0 
     /tmp/ccCREoXF.s:77     .text:0000000000000030 .L0 
     /tmp/ccCREoXF.s:78     .text:0000000000000030 .L0 
     /tmp/ccCREoXF.s:79     .text:0000000000000030 .L0 
     /tmp/ccCREoXF.s:81     .text:0000000000000034 .L0 
     /tmp/ccCREoXF.s:83     .text:0000000000000034 .L0 
     /tmp/ccCREoXF.s:84     .text:0000000000000034 .L0 
       src/riscv.cpp:23     .text:0000000000000034 .L0 
     /tmp/ccCREoXF.s:91     .text:0000000000000038 .L0 
       src/riscv.cpp:24     .text:0000000000000038 .L0 
     /tmp/ccCREoXF.s:97     .text:000000000000003c .L0 
       src/riscv.cpp:25     .text:000000000000003c .L0 
     /tmp/ccCREoXF.s:103    .text:0000000000000040 .L0 
       src/riscv.cpp:26     .text:0000000000000040 .L0 
     /tmp/ccCREoXF.s:109    .text:0000000000000044 .L0 
       src/riscv.cpp:27     .text:0000000000000044 .L0 
     /tmp/ccCREoXF.s:119    .text:0000000000000048 .L0 
     /tmp/ccCREoXF.s:120    .text:0000000000000048 .L0 
     /tmp/ccCREoXF.s:121    .text:0000000000000048 .L0 
  src/../h/riscv.hpp:107    .text:0000000000000048 .L0 
     /tmp/ccCREoXF.s:129    .text:0000000000000050 .L0 
     /tmp/ccCREoXF.s:130    .text:0000000000000050 .L0 
     /tmp/ccCREoXF.s:136    .text:0000000000000054 .L0 
     /tmp/ccCREoXF.s:137    .text:0000000000000054 .L0 
     /tmp/ccCREoXF.s:139    .text:0000000000000058 .L0 
     /tmp/ccCREoXF.s:142    .text:0000000000000060 .L0 
     /tmp/ccCREoXF.s:145    .text:0000000000000068 .L0 
     /tmp/ccCREoXF.s:148    .text:0000000000000070 .L0 
     /tmp/ccCREoXF.s:152    .text:0000000000000078 .L0 
     /tmp/ccCREoXF.s:153    .text:0000000000000078 .L0 
     /tmp/ccCREoXF.s:157    .text:0000000000000088 .L0 
     /tmp/ccCREoXF.s:158    .text:0000000000000088 .L0 
     /tmp/ccCREoXF.s:162    .text:0000000000000094 .L0 
     /tmp/ccCREoXF.s:163    .text:0000000000000094 .L0 
     /tmp/ccCREoXF.s:167    .text:00000000000000a4 .L0 
     /tmp/ccCREoXF.s:168    .text:00000000000000a4 .L0 
     /tmp/ccCREoXF.s:174    .text:00000000000000b4 .L0 
GAS LISTING /tmp/ccCREoXF.s 			page 22


     /tmp/ccCREoXF.s:175    .text:00000000000000b4 .L0 
     /tmp/ccCREoXF.s:176    .text:00000000000000b4 .L0 
  src/../h/riscv.hpp:119    .text:00000000000000b4 .L0 
     /tmp/ccCREoXF.s:184    .text:00000000000000bc .L0 
     /tmp/ccCREoXF.s:185    .text:00000000000000bc .L0 
     /tmp/ccCREoXF.s:189    .text:00000000000000c0 .L0 
     /tmp/ccCREoXF.s:192    .text:00000000000000c8 .L0 
     /tmp/ccCREoXF.s:193    .text:00000000000000c8 .L0 
     /tmp/ccCREoXF.s:197    .text:00000000000000d8 .L0 
     /tmp/ccCREoXF.s:198    .text:00000000000000d8 .L0 
     /tmp/ccCREoXF.s:204    .text:00000000000000e8 .L0 
     /tmp/ccCREoXF.s:205    .text:00000000000000e8 .L0 
     /tmp/ccCREoXF.s:206    .text:00000000000000e8 .L0 
  src/../h/riscv.hpp:143    .text:00000000000000e8 .L0 
     /tmp/ccCREoXF.s:214    .text:00000000000000f0 .L0 
     /tmp/ccCREoXF.s:215    .text:00000000000000f0 .L0 
     /tmp/ccCREoXF.s:219    .text:00000000000000f4 .L0 
     /tmp/ccCREoXF.s:222    .text:00000000000000fc .L0 
     /tmp/ccCREoXF.s:223    .text:00000000000000fc .L0 
     /tmp/ccCREoXF.s:229    .text:000000000000010c .L0 
     /tmp/ccCREoXF.s:230    .text:0000000000000110 .L0 
     /tmp/ccCREoXF.s:231    .text:0000000000000110 .L0 
     /tmp/ccCREoXF.s:233    .text:0000000000000114 .L0 
     /tmp/ccCREoXF.s:234    .text:0000000000000114 .L0 
     /tmp/ccCREoXF.s:236    .text:0000000000000118 .L0 
     /tmp/ccCREoXF.s:239    .text:000000000000011c .L0 
     /tmp/ccCREoXF.s:243    .text:0000000000000120 .L0 
     /tmp/ccCREoXF.s:249    .text:0000000000000120 .L0 
     /tmp/ccCREoXF.s:250    .text:0000000000000120 .L0 
     /tmp/ccCREoXF.s:251    .text:0000000000000120 .L0 
  src/../h/riscv.hpp:119    .text:0000000000000120 .L0 
     /tmp/ccCREoXF.s:259    .text:0000000000000128 .L0 
     /tmp/ccCREoXF.s:260    .text:0000000000000128 .L0 
     /tmp/ccCREoXF.s:264    .text:000000000000012c .L0 
     /tmp/ccCREoXF.s:266    .text:0000000000000130 .L0 
     /tmp/ccCREoXF.s:270    .text:0000000000000134 .L0 
     /tmp/ccCREoXF.s:271    .text:0000000000000134 .L0 
     /tmp/ccCREoXF.s:272    .text:0000000000000134 .L0 
  src/../h/riscv.hpp:187    .text:0000000000000134 .L0 
     /tmp/ccCREoXF.s:280    .text:000000000000013c .L0 
     /tmp/ccCREoXF.s:281    .text:000000000000013c .L0 
     /tmp/ccCREoXF.s:285    .text:0000000000000140 .L0 
     /tmp/ccCREoXF.s:287    .text:0000000000000144 .L0 
     /tmp/ccCREoXF.s:288    .text:0000000000000144 .L0 
       src/riscv.cpp:40     .text:0000000000000144 .L0 
     /tmp/ccCREoXF.s:295    .text:0000000000000148 .L0 
     /tmp/ccCREoXF.s:296    .text:0000000000000148 .L0 
     /tmp/ccCREoXF.s:297    .text:0000000000000148 .L0 
     /tmp/ccCREoXF.s:300    .text:0000000000000148 .L0 
     /tmp/ccCREoXF.s:307    .text:000000000000015c .L0 
     /tmp/ccCREoXF.s:308    .text:000000000000015c .L0 
       src/riscv.cpp:56     .text:000000000000015c .L0 
     /tmp/ccCREoXF.s:315    .text:0000000000000160 .L0 
     /tmp/ccCREoXF.s:316    .text:0000000000000160 .L0 
     /tmp/ccCREoXF.s:318    .text:0000000000000160 .L0 
     /tmp/ccCREoXF.s:323    .text:000000000000016c .L0 
       src/riscv.cpp:60     .text:000000000000016c .L0 
GAS LISTING /tmp/ccCREoXF.s 			page 23


     /tmp/ccCREoXF.s:334    .text:0000000000000170 .L0 
     /tmp/ccCREoXF.s:335    .text:0000000000000170 .L0 
       src/riscv.cpp:161    .text:0000000000000170 .L0 
     /tmp/ccCREoXF.s:341    .text:0000000000000174 .L0 
     /tmp/ccCREoXF.s:343    .text:0000000000000174 .L0 
     /tmp/ccCREoXF.s:348    .text:0000000000000178 .L0 
  src/../h/riscv.hpp:193    .text:0000000000000178 .L0 
     /tmp/ccCREoXF.s:358    .text:000000000000017c .L0 
     /tmp/ccCREoXF.s:359    .text:000000000000017c .L0 
     /tmp/ccCREoXF.s:364    .text:0000000000000180 .L0 
  src/../h/riscv.hpp:125    .text:0000000000000180 .L0 
     /tmp/ccCREoXF.s:371    .text:0000000000000184 .L0 
     /tmp/ccCREoXF.s:378    .text:0000000000000188 .L0 
     /tmp/ccCREoXF.s:385    .text:0000000000000198 .L0 
     /tmp/ccCREoXF.s:386    .text:0000000000000198 .L0 
     /tmp/ccCREoXF.s:387    .text:0000000000000198 .L0 
     /tmp/ccCREoXF.s:388    .text:0000000000000198 .L0 
       src/riscv.cpp:154    .text:0000000000000198 .L0 
     /tmp/ccCREoXF.s:395    .text:000000000000019c .L0 
     /tmp/ccCREoXF.s:397    .text:000000000000019c .L0 
     /tmp/ccCREoXF.s:400    .text:00000000000001a0 .L0 
       src/riscv.cpp:156    .text:00000000000001a0 .L0 
     /tmp/ccCREoXF.s:407    .text:00000000000001a4 .L0 
     /tmp/ccCREoXF.s:411    .text:00000000000001a8 .L0 
     /tmp/ccCREoXF.s:412    .text:00000000000001a8 .L0 
       src/riscv.cpp:63     .text:00000000000001a8 .L0 
     /tmp/ccCREoXF.s:419    .text:00000000000001ac .L0 
     /tmp/ccCREoXF.s:421    .text:00000000000001ac .L0 
     /tmp/ccCREoXF.s:424    .text:00000000000001b4 .L0 
       src/riscv.cpp:66     .text:00000000000001b4 .L0 
     /tmp/ccCREoXF.s:431    .text:00000000000001b8 .L0 
     /tmp/ccCREoXF.s:438    .text:00000000000001bc .L0 
     /tmp/ccCREoXF.s:439    .text:00000000000001bc .L0 
     /tmp/ccCREoXF.s:445    .text:00000000000001d0 .L0 
     /tmp/ccCREoXF.s:446    .text:00000000000001d0 .L0 
     /tmp/ccCREoXF.s:452    .text:00000000000001e4 .L0 
     /tmp/ccCREoXF.s:453    .text:00000000000001e4 .L0 
     /tmp/ccCREoXF.s:458    .text:00000000000001f8 .L0 
     /tmp/ccCREoXF.s:464    .text:00000000000001f8 _ZN5Riscv20handleTimerInterruptEv
     /tmp/ccCREoXF.s:467    .text:00000000000001f8 .L0 
     /tmp/ccCREoXF.s:468    .text:00000000000001f8 .L0 
     /tmp/ccCREoXF.s:469    .text:00000000000001fc .L0 
     /tmp/ccCREoXF.s:471    .text:0000000000000200 .L0 
     /tmp/ccCREoXF.s:473    .text:0000000000000204 .L0 
     /tmp/ccCREoXF.s:478    .text:0000000000000204 .L0 
     /tmp/ccCREoXF.s:479    .text:0000000000000204 .L0 
     /tmp/ccCREoXF.s:480    .text:0000000000000204 .L0 
     /tmp/ccCREoXF.s:492    .text:000000000000020c .L0 
     /tmp/ccCREoXF.s:493    .text:000000000000020c .L0 
     /tmp/ccCREoXF.s:494    .text:000000000000020c .L0 
  src/../h/riscv.hpp:119    .text:000000000000020c .L0 
     /tmp/ccCREoXF.s:502    .text:0000000000000214 .L0 
     /tmp/ccCREoXF.s:503    .text:0000000000000214 .L0 
     /tmp/ccCREoXF.s:507    .text:0000000000000218 .L0 
     /tmp/ccCREoXF.s:511    .text:000000000000021c .L0 
     /tmp/ccCREoXF.s:512    .text:000000000000021c .L0 
     /tmp/ccCREoXF.s:513    .text:000000000000021c .L0 
GAS LISTING /tmp/ccCREoXF.s 			page 24


  src/../h/riscv.hpp:187    .text:000000000000021c .L0 
     /tmp/ccCREoXF.s:521    .text:0000000000000224 .L0 
     /tmp/ccCREoXF.s:522    .text:0000000000000224 .L0 
     /tmp/ccCREoXF.s:526    .text:0000000000000228 .L0 
     /tmp/ccCREoXF.s:528    .text:000000000000022c .L0 
     /tmp/ccCREoXF.s:529    .text:000000000000022c .L0 
     /tmp/ccCREoXF.s:534    .text:0000000000000230 .L0 
  src/../h/riscv.hpp:193    .text:0000000000000230 .L0 
     /tmp/ccCREoXF.s:544    .text:0000000000000234 .L0 
     /tmp/ccCREoXF.s:545    .text:0000000000000234 .L0 
     /tmp/ccCREoXF.s:550    .text:0000000000000238 .L0 
  src/../h/riscv.hpp:125    .text:0000000000000238 .L0 
     /tmp/ccCREoXF.s:560    .text:000000000000023c .L0 
     /tmp/ccCREoXF.s:561    .text:0000000000000240 .L0 
     /tmp/ccCREoXF.s:562    .text:0000000000000240 .L0 
     /tmp/ccCREoXF.s:564    .text:0000000000000244 .L0 
     /tmp/ccCREoXF.s:566    .text:0000000000000248 .L0 
     /tmp/ccCREoXF.s:572    .text:0000000000000248 _ZN5Riscv22handleConsoleInterruptEv
     /tmp/ccCREoXF.s:575    .text:0000000000000248 .L0 
     /tmp/ccCREoXF.s:576    .text:0000000000000248 .L0 
     /tmp/ccCREoXF.s:577    .text:000000000000024c .L0 
     /tmp/ccCREoXF.s:580    .text:0000000000000254 .L0 
     /tmp/ccCREoXF.s:581    .text:0000000000000254 .L0 
     /tmp/ccCREoXF.s:583    .text:0000000000000258 .L0 
     /tmp/ccCREoXF.s:585    .text:0000000000000258 .L0 
     /tmp/ccCREoXF.s:586    .text:0000000000000258 .L0 
     /tmp/ccCREoXF.s:589    .text:0000000000000260 .L0 
     /tmp/ccCREoXF.s:590    .text:0000000000000264 .L0 
     /tmp/ccCREoXF.s:592    .text:0000000000000268 .L0 
     /tmp/ccCREoXF.s:593    .text:0000000000000268 .L0 
     /tmp/ccCREoXF.s:595    .text:000000000000026c .L0 
     /tmp/ccCREoXF.s:597    .text:0000000000000270 .L0 
     /tmp/ccCREoXF.s:603    .text:0000000000000270 _ZN5Riscv14handleBadCauseEv
     /tmp/ccCREoXF.s:606    .text:0000000000000270 .L0 
     /tmp/ccCREoXF.s:607    .text:0000000000000270 .L0 
     /tmp/ccCREoXF.s:608    .text:0000000000000274 .L0 
     /tmp/ccCREoXF.s:610    .text:0000000000000278 .L0 
     /tmp/ccCREoXF.s:612    .text:000000000000027c .L0 
     /tmp/ccCREoXF.s:614    .text:000000000000027c .L0 
     /tmp/ccCREoXF.s:615    .text:0000000000000280 .L0 
     /tmp/ccCREoXF.s:616    .text:0000000000000280 .L0 
     /tmp/ccCREoXF.s:618    .text:0000000000000284 .L0 
     /tmp/ccCREoXF.s:620    .text:0000000000000288 .L0 
     /tmp/ccCREoXF.s:628    .text:0000000000000288 .L0 
     /tmp/ccCREoXF.s:53     .rodata.str1.8:0000000000000058 .LC3
     /tmp/ccCREoXF.s:153    .text:0000000000000078 .L0 
     /tmp/ccCREoXF.s:56     .rodata.str1.8:0000000000000068 .LC4
     /tmp/ccCREoXF.s:163    .text:0000000000000094 .L0 
     /tmp/ccCREoXF.s:59     .rodata.str1.8:0000000000000070 .LC5
     /tmp/ccCREoXF.s:168    .text:00000000000000a4 .L0 
     /tmp/ccCREoXF.s:193    .text:00000000000000c8 .L0 
     /tmp/ccCREoXF.s:62     .rodata.str1.8:0000000000000078 .LC6
     /tmp/ccCREoXF.s:198    .text:00000000000000d8 .L0 
     /tmp/ccCREoXF.s:223    .text:00000000000000fc .L0 
     /tmp/ccCREoXF.s:44     .rodata.str1.8:0000000000000000 .LC0
     /tmp/ccCREoXF.s:439    .text:00000000000001bc .L0 
     /tmp/ccCREoXF.s:47     .rodata.str1.8:0000000000000018 .LC1
GAS LISTING /tmp/ccCREoXF.s 			page 25


     /tmp/ccCREoXF.s:446    .text:00000000000001d0 .L0 
     /tmp/ccCREoXF.s:50     .rodata.str1.8:0000000000000038 .LC2
     /tmp/ccCREoXF.s:453    .text:00000000000001e4 .L0 
     /tmp/ccCREoXF.s:242    .text:0000000000000120 .L15
     /tmp/ccCREoXF.s:433    .text:00000000000001bc .L16
     /tmp/ccCREoXF.s:443    .text:00000000000001d0 .L17
     /tmp/ccCREoXF.s:450    .text:00000000000001e4 .L18
     /tmp/ccCREoXF.s:409    .text:00000000000001a8 .L5
     /tmp/ccCREoXF.s:373    .text:0000000000000188 .L6
     /tmp/ccCREoXF.s:331    .text:0000000000000170 .L8
     /tmp/ccCREoXF.s:226    .text:000000000000010c .L3
     /tmp/ccCREoXF.s:382    .text:0000000000000198 .L9
     /tmp/ccCREoXF.s:150    .text:0000000000000078 .L12
     /tmp/ccCREoXF.s:1571   .debug_abbrev:0000000000000000 .Ldebug_abbrev0
     /tmp/ccCREoXF.s:2445   .debug_str:0000000000000463 .LASF84
     /tmp/ccCREoXF.s:2405   .debug_str:0000000000000323 .LASF85
     /tmp/ccCREoXF.s:2465   .debug_str:00000000000005bd .LASF86
     /tmp/ccCREoXF.s:5      .text:0000000000000000 .Ltext0
     /tmp/ccCREoXF.s:623    .text:0000000000000288 .Letext0
     /tmp/ccCREoXF.s:2289   .debug_line:0000000000000000 .Ldebug_line0
     /tmp/ccCREoXF.s:2381   .debug_str:000000000000029a .LASF0
     /tmp/ccCREoXF.s:2399   .debug_str:00000000000002e8 .LASF1
     /tmp/ccCREoXF.s:2373   .debug_str:0000000000000262 .LASF2
     /tmp/ccCREoXF.s:2361   .debug_str:000000000000021d .LASF4
     /tmp/ccCREoXF.s:2425   .debug_str:00000000000003c6 .LASF3
     /tmp/ccCREoXF.s:2311   .debug_str:0000000000000089 .LASF5
     /tmp/ccCREoXF.s:2403   .debug_str:0000000000000310 .LASF6
     /tmp/ccCREoXF.s:2379   .debug_str:0000000000000287 .LASF7
     /tmp/ccCREoXF.s:2451   .debug_str:0000000000000548 .LASF8
     /tmp/ccCREoXF.s:2353   .debug_str:00000000000001cf .LASF9
     /tmp/ccCREoXF.s:2409   .debug_str:0000000000000353 .LASF10
     /tmp/ccCREoXF.s:2447   .debug_str:0000000000000527 .LASF11
     /tmp/ccCREoXF.s:2313   .debug_str:0000000000000090 .LASF12
     /tmp/ccCREoXF.s:2295   .debug_str:0000000000000022 .LASF13
     /tmp/ccCREoXF.s:2321   .debug_str:00000000000000da .LASF14
     /tmp/ccCREoXF.s:2419   .debug_str:000000000000038d .LASF15
     /tmp/ccCREoXF.s:2325   .debug_str:00000000000000eb .LASF16
     /tmp/ccCREoXF.s:2395   .debug_str:00000000000002d7 .LASF87
     /tmp/ccCREoXF.s:2367   .debug_str:0000000000000239 .LASF88
     /tmp/ccCREoXF.s:2435   .debug_str:0000000000000421 .LASF17
     /tmp/ccCREoXF.s:2393   .debug_str:00000000000002ce .LASF18
     /tmp/ccCREoXF.s:2363   .debug_str:0000000000000224 .LASF19
     /tmp/ccCREoXF.s:2417   .debug_str:0000000000000382 .LASF20
     /tmp/ccCREoXF.s:2459   .debug_str:0000000000000592 .LASF22
     /tmp/ccCREoXF.s:2307   .debug_str:0000000000000073 .LASF21
     /tmp/ccCREoXF.s:2339   .debug_str:0000000000000165 .LASF23
     /tmp/ccCREoXF.s:2437   .debug_str:000000000000042a .LASF24
     /tmp/ccCREoXF.s:2293   .debug_str:0000000000000008 .LASF25
     /tmp/ccCREoXF.s:2429   .debug_str:00000000000003df .LASF26
     /tmp/ccCREoXF.s:2317   .debug_str:00000000000000b4 .LASF27
     /tmp/ccCREoXF.s:2297   .debug_str:0000000000000032 .LASF28
     /tmp/ccCREoXF.s:2341   .debug_str:0000000000000180 .LASF30
     /tmp/ccCREoXF.s:2335   .debug_str:000000000000014d .LASF32
     /tmp/ccCREoXF.s:2333   .debug_str:0000000000000138 .LASF34
     /tmp/ccCREoXF.s:2427   .debug_str:00000000000003d8 .LASF29
     /tmp/ccCREoXF.s:2411   .debug_str:0000000000000362 .LASF31
     /tmp/ccCREoXF.s:2443   .debug_str:000000000000045c .LASF33
GAS LISTING /tmp/ccCREoXF.s 			page 26


     /tmp/ccCREoXF.s:2439   .debug_str:0000000000000437 .LASF35
     /tmp/ccCREoXF.s:2349   .debug_str:00000000000001c1 .LASF36
     /tmp/ccCREoXF.s:2327   .debug_str:0000000000000101 .LASF37
     /tmp/ccCREoXF.s:2291   .debug_str:0000000000000000 .LASF38
     /tmp/ccCREoXF.s:2357   .debug_str:00000000000001f3 .LASF39
     /tmp/ccCREoXF.s:2309   .debug_str:0000000000000081 .LASF40
     /tmp/ccCREoXF.s:2315   .debug_str:00000000000000a0 .LASF41
     /tmp/ccCREoXF.s:2463   .debug_str:00000000000005b5 .LASF42
     /tmp/ccCREoXF.s:2343   .debug_str:0000000000000195 .LASF43
     /tmp/ccCREoXF.s:2383   .debug_str:00000000000002a7 .LASF44
     /tmp/ccCREoXF.s:2457   .debug_str:000000000000057f .LASF45
     /tmp/ccCREoXF.s:2305   .debug_str:000000000000006c .LASF46
     /tmp/ccCREoXF.s:2347   .debug_str:00000000000001ae .LASF47
     /tmp/ccCREoXF.s:2351   .debug_str:00000000000001c9 .LASF48
     /tmp/ccCREoXF.s:2441   .debug_str:000000000000044a .LASF49
     /tmp/ccCREoXF.s:2303   .debug_str:0000000000000066 .LASF50
     /tmp/ccCREoXF.s:2467   .debug_str:00000000000005e1 .LASF51
     /tmp/ccCREoXF.s:2461   .debug_str:00000000000005aa .LASF52
     /tmp/ccCREoXF.s:2423   .debug_str:00000000000003ae .LASF53
     /tmp/ccCREoXF.s:2397   .debug_str:00000000000002dd .LASF54
     /tmp/ccCREoXF.s:2369   .debug_str:0000000000000244 .LASF55
     /tmp/ccCREoXF.s:2319   .debug_str:00000000000000d0 .LASF56
     /tmp/ccCREoXF.s:2359   .debug_str:0000000000000207 .LASF57
     /tmp/ccCREoXF.s:2375   .debug_str:0000000000000270 .LASF58
     /tmp/ccCREoXF.s:2355   .debug_str:00000000000001dd .LASF59
     /tmp/ccCREoXF.s:2385   .debug_str:00000000000002ae .LASF60
     /tmp/ccCREoXF.s:2455   .debug_str:0000000000000564 .LASF62
     /tmp/ccCREoXF.s:2401   .debug_str:00000000000002fb .LASF61
     /tmp/ccCREoXF.s:2407   .debug_str:0000000000000331 .LASF63
     /tmp/ccCREoXF.s:2433   .debug_str:000000000000040a .LASF64
     /tmp/ccCREoXF.s:2301   .debug_str:0000000000000042 .LASF65
     /tmp/ccCREoXF.s:2337   .debug_str:0000000000000156 .LASF66
     /tmp/ccCREoXF.s:2431   .debug_str:00000000000003ee .LASF67
     /tmp/ccCREoXF.s:2345   .debug_str:00000000000001a9 .LASF68
     /tmp/ccCREoXF.s:604    .text:0000000000000270 .LFB25
     /tmp/ccCREoXF.s:621    .text:0000000000000288 .LFE25
     /tmp/ccCREoXF.s:573    .text:0000000000000248 .LFB24
     /tmp/ccCREoXF.s:598    .text:0000000000000270 .LFE24
     /tmp/ccCREoXF.s:587    .text:0000000000000260 .LVL41
     /tmp/ccCREoXF.s:465    .text:00000000000001f8 .LFB23
     /tmp/ccCREoXF.s:567    .text:0000000000000248 .LFE23
     /tmp/ccCREoXF.s:2389   .debug_str:00000000000002c1 .LASF69
     /tmp/ccCREoXF.s:2413   .debug_str:0000000000000375 .LASF70
     /tmp/ccCREoXF.s:476    .text:0000000000000204 .LBB51
     /tmp/ccCREoXF.s:488    .text:000000000000020c .LBE51
     /tmp/ccCREoXF.s:2156   .debug_loc:0000000000000000 .LLST8
     /tmp/ccCREoXF.s:490    .text:000000000000020c .LBB53
     /tmp/ccCREoXF.s:505    .text:0000000000000218 .LBE53
     /tmp/ccCREoXF.s:509    .text:000000000000021c .LBB55
     /tmp/ccCREoXF.s:524    .text:0000000000000228 .LBE55
     /tmp/ccCREoXF.s:531    .text:0000000000000230 .LBB57
     /tmp/ccCREoXF.s:542    .text:0000000000000234 .LBE57
     /tmp/ccCREoXF.s:2164   .debug_loc:0000000000000024 .LLST9
     /tmp/ccCREoXF.s:547    .text:0000000000000238 .LBB59
     /tmp/ccCREoXF.s:558    .text:000000000000023c .LBE59
     /tmp/ccCREoXF.s:2171   .debug_loc:0000000000000047 .LLST10
     /tmp/ccCREoXF.s:69     .text:0000000000000020 .LFB22
GAS LISTING /tmp/ccCREoXF.s 			page 27


     /tmp/ccCREoXF.s:459    .text:00000000000001f8 .LFE22
     /tmp/ccCREoXF.s:2299   .debug_str:000000000000003b .LASF71
     /tmp/ccCREoXF.s:2178   .debug_loc:000000000000006a .LLST0
     /tmp/ccCREoXF.s:245    .text:0000000000000120 .LBB37
     /tmp/ccCREoXF.s:436    .text:00000000000001bc .LBE37
     /tmp/ccCREoXF.s:2391   .debug_str:00000000000002c6 .LASF72
     /tmp/ccCREoXF.s:2189   .debug_loc:00000000000000a0 .LLST1
     /tmp/ccCREoXF.s:2415   .debug_str:000000000000037d .LASF73
     /tmp/ccCREoXF.s:2204   .debug_loc:00000000000000e9 .LLST2
     /tmp/ccCREoXF.s:2219   .debug_loc:0000000000000123 .LLST3
     /tmp/ccCREoXF.s:2240   .debug_loc:0000000000000181 .LLST4
     /tmp/ccCREoXF.s:2281   .debug_ranges:0000000000000000 .Ldebug_ranges0
     /tmp/ccCREoXF.s:2387   .debug_str:00000000000002bc .LASF74
     /tmp/ccCREoXF.s:2247   .debug_loc:00000000000001a4 .LLST5
     /tmp/ccCREoXF.s:321    .text:000000000000016c .LVL20
     /tmp/ccCREoXF.s:422    .text:00000000000001b4 .LVL30
     /tmp/ccCREoXF.s:247    .text:0000000000000120 .LBB38
     /tmp/ccCREoXF.s:262    .text:000000000000012c .LBE38
     /tmp/ccCREoXF.s:268    .text:0000000000000134 .LBB40
     /tmp/ccCREoXF.s:283    .text:0000000000000140 .LBE40
     /tmp/ccCREoXF.s:345    .text:0000000000000178 .LBB45
     /tmp/ccCREoXF.s:356    .text:000000000000017c .LBE45
     /tmp/ccCREoXF.s:2254   .debug_loc:00000000000001c7 .LLST6
     /tmp/ccCREoXF.s:361    .text:0000000000000180 .LBB47
     /tmp/ccCREoXF.s:375    .text:0000000000000188 .LBE47
     /tmp/ccCREoXF.s:2261   .debug_loc:00000000000001ea .LLST7
     /tmp/ccCREoXF.s:116    .text:0000000000000048 .LBB30
     /tmp/ccCREoXF.s:133    .text:0000000000000054 .LBE30
     /tmp/ccCREoXF.s:172    .text:00000000000000b4 .LBB33
     /tmp/ccCREoXF.s:187    .text:00000000000000c0 .LBE33
     /tmp/ccCREoXF.s:202    .text:00000000000000e8 .LBB35
     /tmp/ccCREoXF.s:217    .text:00000000000000f4 .LBE35
     /tmp/ccCREoXF.s:155    .text:0000000000000088 .LVL6
     /tmp/ccCREoXF.s:160    .text:0000000000000094 .LVL7
     /tmp/ccCREoXF.s:165    .text:00000000000000a4 .LVL8
     /tmp/ccCREoXF.s:170    .text:00000000000000b4 .LVL9
     /tmp/ccCREoXF.s:190    .text:00000000000000c8 .LVL10
     /tmp/ccCREoXF.s:195    .text:00000000000000d8 .LVL11
     /tmp/ccCREoXF.s:200    .text:00000000000000e8 .LVL12
     /tmp/ccCREoXF.s:220    .text:00000000000000fc .LVL13
     /tmp/ccCREoXF.s:225    .text:000000000000010c .LVL14
     /tmp/ccCREoXF.s:441    .text:00000000000001cc .LVL32
     /tmp/ccCREoXF.s:448    .text:00000000000001e0 .LVL33
     /tmp/ccCREoXF.s:455    .text:00000000000001f4 .LVL34
     /tmp/ccCREoXF.s:10     .text:0000000000000000 .LFB21
     /tmp/ccCREoXF.s:40     .text:0000000000000020 .LFE21
     /tmp/ccCREoXF.s:2323   .debug_str:00000000000000e6 .LASF75
     /tmp/ccCREoXF.s:2371   .debug_str:000000000000025c .LASF76
     /tmp/ccCREoXF.s:2331   .debug_str:0000000000000128 .LASF77
     /tmp/ccCREoXF.s:2453   .debug_str:0000000000000558 .LASF78
     /tmp/ccCREoXF.s:2421   .debug_str:00000000000003a3 .LASF79
     /tmp/ccCREoXF.s:2329   .debug_str:0000000000000115 .LASF80
     /tmp/ccCREoXF.s:2365   .debug_str:000000000000022d .LASF81
     /tmp/ccCREoXF.s:2449   .debug_str:0000000000000536 .LASF82
     /tmp/ccCREoXF.s:2377   .debug_str:000000000000027a .LASF83
     /tmp/ccCREoXF.s:475    .text:0000000000000204 .LVL35
     /tmp/ccCREoXF.s:485    .text:000000000000020c .LVL36
GAS LISTING /tmp/ccCREoXF.s 			page 28


     /tmp/ccCREoXF.s:530    .text:0000000000000230 .LVL37
     /tmp/ccCREoXF.s:539    .text:0000000000000234 .LVL38
     /tmp/ccCREoXF.s:546    .text:0000000000000238 .LVL39
     /tmp/ccCREoXF.s:555    .text:000000000000023c .LVL40
     /tmp/ccCREoXF.s:131    .text:0000000000000054 .LVL5
     /tmp/ccCREoXF.s:237    .text:0000000000000118 .LVL15
     /tmp/ccCREoXF.s:241    .text:0000000000000120 .LVL16
     /tmp/ccCREoXF.s:293    .text:0000000000000148 .LVL17
     /tmp/ccCREoXF.s:372    .text:0000000000000188 .LVL25
     /tmp/ccCREoXF.s:393    .text:000000000000019c .LVL26
     /tmp/ccCREoXF.s:408    .text:00000000000001a8 .LVL28
     /tmp/ccCREoXF.s:313    .text:0000000000000160 .LVL18
     /tmp/ccCREoXF.s:319    .text:0000000000000164 .LVL19
     /tmp/ccCREoXF.s:329    .text:0000000000000170 .LVL21
     /tmp/ccCREoXF.s:417    .text:00000000000001ac .LVL29
     /tmp/ccCREoXF.s:432    .text:00000000000001bc .LVL31
     /tmp/ccCREoXF.s:344    .text:0000000000000178 .LVL22
     /tmp/ccCREoXF.s:353    .text:000000000000017c .LVL23
     /tmp/ccCREoXF.s:360    .text:0000000000000180 .LVL24
     /tmp/ccCREoXF.s:629    .debug_info:0000000000000000 .Ldebug_info0
     /tmp/ccCREoXF.s:305    .text:000000000000015c .LBB43
     /tmp/ccCREoXF.s:332    .text:0000000000000170 .LBE43
     /tmp/ccCREoXF.s:383    .text:0000000000000198 .LBB44
     /tmp/ccCREoXF.s:434    .text:00000000000001bc .LBE44

UNDEFINED SYMBOLS
_Z11printStringPKc
_Z12printIntegerm
__mem_alloc
__mem_free
console_handler
