GAS LISTING /tmp/ccoJryln.s 			page 1


   1              		.file	"riscv.cpp"
   2              		.option pic
   3              		.option norelax
   4              		.text
   5              	.Ltext0:
   6              		.align	2
   7              		.globl	_ZN5Riscv10popSppSpieEv
   9              	_ZN5Riscv10popSppSpieEv:
  10              	.LFB21:
  11              		.file 1 "src/riscv.cpp"
   1:src/riscv.cpp **** //
   2:src/riscv.cpp **** // Created by marko on 20.4.22..
   3:src/riscv.cpp **** //
   4:src/riscv.cpp **** 
   5:src/riscv.cpp **** #include "../h/riscv.hpp"
   6:src/riscv.cpp **** #include "../lib/console.h"
   7:src/riscv.cpp **** #include "../h/print.hpp"
   8:src/riscv.cpp **** #include "../lib/mem.h"
   9:src/riscv.cpp **** #include "../h/kThread.hpp"
  10:src/riscv.cpp **** 
  11:src/riscv.cpp **** using Body = void (*)(void *);
  12:src/riscv.cpp **** 
  13:src/riscv.cpp **** void Riscv::popSppSpie()
  14:src/riscv.cpp **** {
  12              		.loc 1 14 1
  13              		.cfi_startproc
  14 0000 130101FF 		addi	sp,sp,-16
  15              		.cfi_def_cfa_offset 16
  16 0004 23348100 		sd	s0,8(sp)
  17              		.cfi_offset 8, -8
  18 0008 13040101 		addi	s0,sp,16
  19              		.cfi_def_cfa 8, 0
  15:src/riscv.cpp ****     __asm__ volatile ("csrw sepc, ra"); // sepc <=ra
  20              		.loc 1 15 5
  21              		.loc 1 15 39 is_stmt 0
  22              	#APP
  23              	# 15 "src/riscv.cpp" 1
  16              	    __asm__ volatile ("sret");
  24              		csrw sepc, ra
  25              	# 0 "" 2
  26              		.loc 1 16 5 is_stmt 1
  27              		.loc 1 16 30 is_stmt 0
  28              	# 16 "src/riscv.cpp" 1
  17              	}
  29              		sret
  30              	# 0 "" 2
  31              		.loc 1 17 1
  32              	#NO_APP
  33 0014 03348100 		ld	s0,8(sp)
  34              		.cfi_restore 8
  35              		.cfi_def_cfa 2, 16
  36 0018 13010101 		addi	sp,sp,16
  37              		.cfi_def_cfa_offset 0
  38 001c 67800000 		jr	ra
  39              		.cfi_endproc
  40              	.LFE21:
  42              		.section	.rodata.str1.8,"aMS",@progbits,1
GAS LISTING /tmp/ccoJryln.s 			page 2


  43              		.align	3
  44              	.LC0:
  45 0000 496C6567 		.string	"Ilegalna instrukcija\n:"
  45      616C6E61 
  45      20696E73 
  45      7472756B 
  45      63696A61 
  46 0017 00       		.align	3
  47              	.LC1:
  48 0018 4E65646F 		.string	"Nedozvolena adresa citanja\n"
  48      7A766F6C 
  48      656E6120 
  48      61647265 
  48      73612063 
  49 0034 00000000 		.align	3
  50              	.LC2:
  51 0038 4E65646F 		.string	"Nedozvolena adresa upisa\n"
  51      7A766F6C 
  51      656E6120 
  51      61647265 
  51      73612075 
  52 0052 00000000 		.align	3
  52      0000
  53              	.LC3:
  54 0058 73636175 		.string	"scause: "
  54      73653A20 
  54      00
  55 0061 00000000 		.align	3
  55      000000
  56              	.LC4:
  57 0068 0A00     		.string	"\n"
  58 006a 00000000 		.align	3
  58      0000
  59              	.LC5:
  60 0070 73657063 		.string	"sepc: "
  60      3A2000
  61 0077 00       		.align	3
  62              	.LC6:
  63 0078 73747661 		.string	"stval: "
  63      6C3A2000 
  64              		.text
  65              		.align	2
  66              		.globl	_ZN5Riscv13handleSyscallEv
  68              	_ZN5Riscv13handleSyscallEv:
  69              	.LFB22:
  18:src/riscv.cpp **** 
  19:src/riscv.cpp **** void Riscv::handleSyscall() {
  70              		.loc 1 19 29 is_stmt 1
  71              		.cfi_startproc
  72 0020 130101FA 		addi	sp,sp,-96
  73              		.cfi_def_cfa_offset 96
  74 0024 233C1104 		sd	ra,88(sp)
  75 0028 23388104 		sd	s0,80(sp)
  76 002c 23349104 		sd	s1,72(sp)
  77              		.cfi_offset 1, -8
  78              		.cfi_offset 8, -16
  79              		.cfi_offset 9, -24
GAS LISTING /tmp/ccoJryln.s 			page 3


  80 0030 13040106 		addi	s0,sp,96
  81              		.cfi_def_cfa 8, 0
  20:src/riscv.cpp **** 
  21:src/riscv.cpp ****     //uzimam parametre UZMI SVIH 7
  22:src/riscv.cpp ****     //uint64 a0, a1, a2, a3, a4;
  23:src/riscv.cpp **** 
  24:src/riscv.cpp ****     uint64  scause = r_scause();
  82              		.loc 1 24 5
  83              	.LBB30:
  84              	.LBB31:
  85              		.file 2 "src/../h/riscv.hpp"
   1:src/../h/riscv.hpp **** //
   2:src/../h/riscv.hpp **** // Created by marko on 20.4.22..
   3:src/../h/riscv.hpp **** //
   4:src/../h/riscv.hpp **** 
   5:src/../h/riscv.hpp **** #ifndef OS_PROJECT_BASE_RISCV_HPP
   6:src/../h/riscv.hpp **** #define OS_PROJECT_BASE_RISCV_HPP
   7:src/../h/riscv.hpp **** 
   8:src/../h/riscv.hpp **** #include "../lib/hw.h"
   9:src/../h/riscv.hpp **** //inline fje - bitno: nece se generisati masinski kod za poziv fje na mestu koriscenja u cpp kodu
  10:src/../h/riscv.hpp **** //ako imamo poziv u ra reg ce biti upisana adresa na koju prog treba da se vrati (sa inline nema to
  11:src/../h/riscv.hpp **** class Riscv
  12:src/../h/riscv.hpp **** {
  13:src/../h/riscv.hpp **** public:
  14:src/../h/riscv.hpp **** 
  15:src/../h/riscv.hpp ****     // pop sstatus.spp and sstatus.spie bits (has to be a non inline function)
  16:src/../h/riscv.hpp ****     static void popSppSpie();
  17:src/../h/riscv.hpp **** 
  18:src/../h/riscv.hpp ****     // push x3..x31 registers onto stack
  19:src/../h/riscv.hpp ****     static void pushRegisters();
  20:src/../h/riscv.hpp **** 
  21:src/../h/riscv.hpp ****     // pop x3..x31 registers onto stack
  22:src/../h/riscv.hpp ****     static void popRegisters();
  23:src/../h/riscv.hpp ****     //supervisor trap
  24:src/../h/riscv.hpp ****     static void supervisorTrap();
  25:src/../h/riscv.hpp **** 
  26:src/../h/riscv.hpp **** 
  27:src/../h/riscv.hpp ****     // read register scause
  28:src/../h/riscv.hpp ****     static uint64 r_scause();
  29:src/../h/riscv.hpp **** 
  30:src/../h/riscv.hpp ****     // write register scause
  31:src/../h/riscv.hpp ****     static void w_scause(uint64 scause);
  32:src/../h/riscv.hpp **** 
  33:src/../h/riscv.hpp ****     // read register sepc
  34:src/../h/riscv.hpp ****     static uint64 r_sepc();
  35:src/../h/riscv.hpp **** 
  36:src/../h/riscv.hpp ****     // write register sepc
  37:src/../h/riscv.hpp ****     static void w_sepc(uint64 sepc);
  38:src/../h/riscv.hpp **** 
  39:src/../h/riscv.hpp ****     // read register stvec
  40:src/../h/riscv.hpp ****     static uint64 r_stvec();
  41:src/../h/riscv.hpp **** 
  42:src/../h/riscv.hpp ****     // write register stvec
  43:src/../h/riscv.hpp ****     static void w_stvec(uint64 stvec);
  44:src/../h/riscv.hpp **** 
  45:src/../h/riscv.hpp ****     // read register stval
  46:src/../h/riscv.hpp ****     static uint64 r_stval();
GAS LISTING /tmp/ccoJryln.s 			page 4


  47:src/../h/riscv.hpp **** 
  48:src/../h/riscv.hpp ****     // write register stval
  49:src/../h/riscv.hpp ****     static void w_stval(uint64 stval);
  50:src/../h/riscv.hpp **** 
  51:src/../h/riscv.hpp ****     enum BitMaskSip
  52:src/../h/riscv.hpp ****     {
  53:src/../h/riscv.hpp ****         SIP_SSIP = (1 << 1),
  54:src/../h/riscv.hpp ****         SIP_STIP = (1 << 5),
  55:src/../h/riscv.hpp ****         SIP_SEIP = (1 << 9),
  56:src/../h/riscv.hpp ****     };
  57:src/../h/riscv.hpp **** 
  58:src/../h/riscv.hpp ****     // mask set register sip
  59:src/../h/riscv.hpp ****     static void ms_sip(uint64 mask);
  60:src/../h/riscv.hpp **** 
  61:src/../h/riscv.hpp ****     // mask clear register sip
  62:src/../h/riscv.hpp ****     static void mc_sip(uint64 mask);
  63:src/../h/riscv.hpp **** 
  64:src/../h/riscv.hpp ****     // read register sip
  65:src/../h/riscv.hpp ****     static uint64 r_sip();
  66:src/../h/riscv.hpp **** 
  67:src/../h/riscv.hpp ****     // write register sip
  68:src/../h/riscv.hpp ****     static void w_sip(uint64 sip);
  69:src/../h/riscv.hpp **** 
  70:src/../h/riscv.hpp ****     enum BitMaskSstatus
  71:src/../h/riscv.hpp ****     {
  72:src/../h/riscv.hpp ****         SSTATUS_SIE = (1 << 1),
  73:src/../h/riscv.hpp ****         SSTATUS_SPIE = (1 << 5),
  74:src/../h/riscv.hpp ****         SSTATUS_SPP = (1 << 8),
  75:src/../h/riscv.hpp ****     };
  76:src/../h/riscv.hpp **** 
  77:src/../h/riscv.hpp ****     // mask set register sstatus
  78:src/../h/riscv.hpp ****     static void ms_sstatus(uint64 mask);
  79:src/../h/riscv.hpp **** 
  80:src/../h/riscv.hpp ****     // mask clear register sstatus
  81:src/../h/riscv.hpp ****     static void mc_sstatus(uint64 mask);
  82:src/../h/riscv.hpp **** 
  83:src/../h/riscv.hpp ****     // read register sstatus
  84:src/../h/riscv.hpp ****     static uint64 r_sstatus();
  85:src/../h/riscv.hpp **** 
  86:src/../h/riscv.hpp ****     // write register sstatus
  87:src/../h/riscv.hpp ****     static void w_sstatus(uint64 sstatus);
  88:src/../h/riscv.hpp **** 
  89:src/../h/riscv.hpp **** private:
  90:src/../h/riscv.hpp **** 
  91:src/../h/riscv.hpp ****     //handle za sistemske pzoive
  92:src/../h/riscv.hpp ****     static void handleSyscall();
  93:src/../h/riscv.hpp **** 
  94:src/../h/riscv.hpp ****     //handle za prekide od tajmera
  95:src/../h/riscv.hpp ****     static void handleTimerInterrupt();
  96:src/../h/riscv.hpp **** 
  97:src/../h/riscv.hpp ****     //handle za prekide od konzozle
  98:src/../h/riscv.hpp ****     static void handleConsoleInterrupt();
  99:src/../h/riscv.hpp **** 
 100:src/../h/riscv.hpp ****     //handle za bad cause
 101:src/../h/riscv.hpp ****     static void handleBadCause();
 102:src/../h/riscv.hpp **** };
 103:src/../h/riscv.hpp **** 
GAS LISTING /tmp/ccoJryln.s 			page 5


 104:src/../h/riscv.hpp **** inline uint64 Riscv::r_scause()
 105:src/../h/riscv.hpp **** {
 106:src/../h/riscv.hpp ****     uint64 volatile scause;
  86              		.loc 2 106 5
 107:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[scause], scause" : [scause] "=r"(scause));
  87              		.loc 2 107 5
  88              		.loc 2 107 72 is_stmt 0
  89              	#APP
  90              	# 107 "src/../h/riscv.hpp" 1
 108              	    return scause;
  91              		csrr a5, scause
  92              	# 0 "" 2
  93              	#NO_APP
  94 0038 233CF4FA 		sd	a5,-72(s0)
  95              		.loc 2 108 5 is_stmt 1
  96              		.loc 2 108 12 is_stmt 0
  97 003c 833484FB 		ld	s1,-72(s0)
  98              	.LVL0:
  99              	.LBE31:
 100              	.LBE30:
  25:src/riscv.cpp **** 
  26:src/riscv.cpp ****     //ecall iz korisnickog, ecall iz sistemskog rezima
  27:src/riscv.cpp ****     if(scause == 0x0000000000000008UL || scause == 0x0000000000000009UL)//syscall  PROMENIO MI SE A
 101              		.loc 1 27 5 is_stmt 1
 102              	.LBB32:
 103              		.loc 1 27 39 is_stmt 0
 104 0040 138784FF 		addi	a4,s1,-8
 105              		.loc 1 27 5
 106 0044 93071000 		li	a5,1
 107 0048 63F2E70C 		bleu	a4,a5,.L24
  28:src/riscv.cpp ****     {
  29:src/riscv.cpp **** 
  30:src/riscv.cpp ****         uint64 volatile sepc = r_sepc()+ 4; // jer pc pokazuje na trenutnu instrukciju tj ecall, a 
  31:src/riscv.cpp ****         uint64 volatile sstatus = r_sstatus(); // kupim vrednost statusnog registra
  32:src/riscv.cpp ****         //obe stvari su mi bitne zbog desavanja kada se dodje na sret
  33:src/riscv.cpp **** 
  34:src/riscv.cpp ****         uint64  syscall;
  35:src/riscv.cpp ****         __asm__ volatile("mv %0, a0" : "=r"(syscall));
  36:src/riscv.cpp **** 
  37:src/riscv.cpp ****         size_t  size;
  38:src/riscv.cpp ****         void* ptr = nullptr;
  39:src/riscv.cpp ****         int ret;
  40:src/riscv.cpp **** //        Body body;
  41:src/riscv.cpp **** //        void* arg;
  42:src/riscv.cpp **** //        void* stack_space;
  43:src/riscv.cpp **** //        PCB** handleCreate;
  44:src/riscv.cpp **** //        thread_t handle;
  45:src/riscv.cpp **** //        struct kSemaphore* sem;
  46:src/riscv.cpp **** //          char character= 'A';
  47:src/riscv.cpp **** 
  48:src/riscv.cpp ****         switch(syscall)
  49:src/riscv.cpp ****         {
  50:src/riscv.cpp ****             case 0x01: //mem_alloc
  51:src/riscv.cpp ****                 __asm__ volatile("mv %0, a1":"=r"(size));
  52:src/riscv.cpp ****                 size *= MEM_BLOCK_SIZE;
  53:src/riscv.cpp ****                 //ptr = MemoryAllocator::kmem_alloc(size);
  54:src/riscv.cpp ****                 ptr = __mem_alloc(size);
GAS LISTING /tmp/ccoJryln.s 			page 6


  55:src/riscv.cpp ****                 __asm__ volatile("mv a0, %0" : : "r" (ptr));
  56:src/riscv.cpp ****                 break;
  57:src/riscv.cpp ****             case 0x02: //mem_free
  58:src/riscv.cpp ****                 __asm__ volatile("mv %0, a1": "=r"(ptr));
  59:src/riscv.cpp ****                 //ret = MemoryAllocator::kmem_free(ptr);
  60:src/riscv.cpp ****                 ret = __mem_free(ptr);
  61:src/riscv.cpp ****                 __asm__ volatile("mv a0, %0"::"r"(ret));
  62:src/riscv.cpp ****                 break;
  63:src/riscv.cpp ****             case 0x11://thread_create
  64:src/riscv.cpp ****                 kThread* handle;
  65:src/riscv.cpp ****                 Body body;
  66:src/riscv.cpp ****                 void * arg;
  67:src/riscv.cpp ****                 void * stack_space;
  68:src/riscv.cpp ****                 __asm__ volatile("mv %0, a1":"=r"(handle));
  69:src/riscv.cpp ****                 __asm__ volatile("mv %0, a2":"=r"(body));
  70:src/riscv.cpp ****                 __asm__ volatile("mv %0, a3":"=r"(arg));
  71:src/riscv.cpp ****                 if(body!= nullptr){
  72:src/riscv.cpp ****                     __asm__ volatile("mv %0, a6":"=r"(stack_space));
  73:src/riscv.cpp ****                 }
  74:src/riscv.cpp ****                 else stack_space = nullptr;
  75:src/riscv.cpp **** 
  76:src/riscv.cpp ****                 handle = kThread::createProcess(body,arg,stack_space);
  77:src/riscv.cpp **** 
  78:src/riscv.cpp ****                 if(handle) ret = 0;
  79:src/riscv.cpp ****                 else ret = -0x11;
  80:src/riscv.cpp ****                 __asm__ volatile("mv a0, %0"::"r"(ret));
  81:src/riscv.cpp ****                 break;
  82:src/riscv.cpp ****             case 0x12://thread_exit
  83:src/riscv.cpp ****                 if(kThread::running->body == nullptr){
  84:src/riscv.cpp ****                     ret = -0x12;
  85:src/riscv.cpp ****                     __asm__ volatile("mv a0, %0"::"r"(ret));
  86:src/riscv.cpp ****                 }
  87:src/riscv.cpp ****                 else kThread::kThreadExit();
  88:src/riscv.cpp ****                 break;
  89:src/riscv.cpp ****             case 0x13: //thread_dispatch
  90:src/riscv.cpp ****                 kThread::yield();
  91:src/riscv.cpp ****                 break;
  92:src/riscv.cpp **** //            case 0x14: //thread_join
  93:src/riscv.cpp **** //                __asm__ volatile("mv %0, a1":"=r"(handle));
  94:src/riscv.cpp **** //                PCB::join(handle);
  95:src/riscv.cpp **** //                break;
  96:src/riscv.cpp **** //            case 0x21: //sem_open
  97:src/riscv.cpp **** //                struct kSemaphore** handle;
  98:src/riscv.cpp **** //                int  init;
  99:src/riscv.cpp **** //                __asm__ volatile("mv %0, a1":"=r"(handle));
 100:src/riscv.cpp **** //                __asm__ volatile("mv %0, a2":"=r"(init));
 101:src/riscv.cpp **** //                *handle = kSemaphore::ksem_open(init);
 102:src/riscv.cpp **** //                if(*handle == nullptr) {
 103:src/riscv.cpp **** //                    ret = -21;
 104:src/riscv.cpp **** //                } else {
 105:src/riscv.cpp **** //                    ret=0;
 106:src/riscv.cpp **** //                }
 107:src/riscv.cpp **** //                __asm__ volatile("mv a0, %0"::"r"(ret));
 108:src/riscv.cpp **** //                break;
 109:src/riscv.cpp **** //            case 0x22://sem_close
 110:src/riscv.cpp **** //                __asm__ volatile("mv %0, a1":"=r"(sem));
 111:src/riscv.cpp **** //                if(sem == nullptr) {
GAS LISTING /tmp/ccoJryln.s 			page 7


 112:src/riscv.cpp **** //                    ret = -22;
 113:src/riscv.cpp **** //                    __asm__ volatile("mv a0, %0"::"r"(ret));
 114:src/riscv.cpp **** //                    return;
 115:src/riscv.cpp **** //                } else ret = 0;
 116:src/riscv.cpp **** //                kSemaphore::ksem_close(sem);
 117:src/riscv.cpp **** //                __asm__ volatile("mv a0, %0"::"r"(ret));
 118:src/riscv.cpp **** //                break;
 119:src/riscv.cpp **** //            case 0x23: //sem_wait
 120:src/riscv.cpp **** //                __asm__ volatile("mv %0, a1":"=r"(sem));
 121:src/riscv.cpp **** //                if(sem == nullptr) {
 122:src/riscv.cpp **** //                    ret = -23;
 123:src/riscv.cpp **** //                    __asm__ volatile("mv a0, %0"::"r"(ret));
 124:src/riscv.cpp **** //                } else ret =0;
 125:src/riscv.cpp **** //                kSemaphore::ksem_wait(sem);
 126:src/riscv.cpp **** //                __asm__ volatile("mv a0, %0"::"r"(ret));
 127:src/riscv.cpp **** //                break;
 128:src/riscv.cpp **** //            case 0x24: //sem_signal
 129:src/riscv.cpp **** //                __asm__ volatile("mv %0, a1":"=r"(sem));
 130:src/riscv.cpp **** //                if(sem == nullptr) {
 131:src/riscv.cpp **** //                    ret = -24;
 132:src/riscv.cpp **** //                    __asm__ volatile("mv a0, %0"::"r"(ret));
 133:src/riscv.cpp **** //                    return;
 134:src/riscv.cpp **** //                } else ret=0;
 135:src/riscv.cpp **** //                kSemaphore::ksem_signal(sem);
 136:src/riscv.cpp **** //                __asm__ volatile("mv a0, %0"::"r"(ret));
 137:src/riscv.cpp **** //                break;
 138:src/riscv.cpp **** //            case 0x41: //getc
 139:src/riscv.cpp **** //                character = __getc(); //odlazim u timer interrupt umesto u console interrupt
 140:src/riscv.cpp **** //                __asm__ volatile("mv a0, %0"::"r"(character));
 141:src/riscv.cpp **** //                break;
 142:src/riscv.cpp **** //            case 0x42: //putc
 143:src/riscv.cpp **** //                char c;
 144:src/riscv.cpp **** //                __asm__ volatile("mv %0, a1":"=r"(c));
 145:src/riscv.cpp **** //                __putc(c);
 146:src/riscv.cpp **** //                break;
 147:src/riscv.cpp ****             case 0x55:
 148:src/riscv.cpp ****                 int arg1,arg2,arg3,arg4;
 149:src/riscv.cpp ****                 __asm__ volatile("mv %0, a1":"=r"(arg1));
 150:src/riscv.cpp ****                 __asm__ volatile("mv %0, a2":"=r"(arg2));
 151:src/riscv.cpp ****                 __asm__ volatile("mv %0, a3":"=r"(arg3));
 152:src/riscv.cpp ****                 __asm__ volatile("mv %0, a6":"=r"(arg4));
 153:src/riscv.cpp ****                 arg1 += arg2+arg3+arg4;
 154:src/riscv.cpp ****                 __asm__ volatile("mv a0, %0"::"r"(arg1));
 155:src/riscv.cpp ****                 break;
 156:src/riscv.cpp ****             default: break;
 157:src/riscv.cpp ****         }
 158:src/riscv.cpp **** 
 159:src/riscv.cpp ****         __asm__ volatile("sd a0, 80(fp)"); //resava mi problem sa a0 (skontaj sta si tu radila)
 160:src/riscv.cpp ****         //PCB::dispatch();
 161:src/riscv.cpp ****         w_sstatus(sstatus);
 162:src/riscv.cpp ****         w_sepc(sepc);
 163:src/riscv.cpp **** 
 164:src/riscv.cpp ****     }
 165:src/riscv.cpp ****     else
 166:src/riscv.cpp **** 
 167:src/riscv.cpp ****     {
 168:src/riscv.cpp ****         if(scause == 0x0000000000000002UL)
GAS LISTING /tmp/ccoJryln.s 			page 8


 108              		.loc 1 168 9 is_stmt 1
 109 004c 93072000 		li	a5,2
 110 0050 6388F41E 		beq	s1,a5,.L25
 169:src/riscv.cpp ****             printString("Ilegalna instrukcija\n:");
 170:src/riscv.cpp ****         else if (scause == 0x0000000000000005UL)
 111              		.loc 1 170 14
 112 0054 93075000 		li	a5,5
 113 0058 638EF41E 		beq	s1,a5,.L26
 171:src/riscv.cpp ****             printString("Nedozvolena adresa citanja\n");
 172:src/riscv.cpp ****         else if (scause == 0x0000000000000007UL)
 114              		.loc 1 172 14
 115 005c 93077000 		li	a5,7
 116 0060 6384F420 		beq	s1,a5,.L27
 117              	.L19:
 173:src/riscv.cpp ****             printString("Nedozvolena adresa upisa\n");
 174:src/riscv.cpp **** 
 175:src/riscv.cpp **** 
 176:src/riscv.cpp ****         printString("scause: ");
 118              		.loc 1 176 9
 119              		.loc 1 176 20 is_stmt 0
 120 0064 17050000 		lla	a0,.LC3
 120      13050500 
 121 006c 97000000 		call	_Z11printStringPKc@plt
 121      E7800000 
 122              	.LVL1:
 177:src/riscv.cpp ****         printInteger(scause);
 123              		.loc 1 177 9 is_stmt 1
 124              		.loc 1 177 21 is_stmt 0
 125 0074 13850400 		mv	a0,s1
 126 0078 97000000 		call	_Z12printIntegerm@plt
 126      E7800000 
 127              	.LVL2:
 178:src/riscv.cpp ****         printString("\n");
 128              		.loc 1 178 9 is_stmt 1
 129              		.loc 1 178 20 is_stmt 0
 130 0080 17050000 		lla	a0,.LC4
 130      13050500 
 131 0088 97000000 		call	_Z11printStringPKc@plt
 131      E7800000 
 132              	.LVL3:
 179:src/riscv.cpp ****         printString("sepc: ");
 133              		.loc 1 179 9 is_stmt 1
 134              		.loc 1 179 20 is_stmt 0
 135 0090 17050000 		lla	a0,.LC5
 135      13050500 
 136 0098 97000000 		call	_Z11printStringPKc@plt
 136      E7800000 
 137              	.LVL4:
 180:src/riscv.cpp ****         printInteger(r_sepc());
 138              		.loc 1 180 9 is_stmt 1
 139              	.LBB33:
 140              	.LBB34:
 109:src/../h/riscv.hpp **** }
 110:src/../h/riscv.hpp **** 
 111:src/../h/riscv.hpp **** inline void Riscv::w_scause(uint64 scause)
 112:src/../h/riscv.hpp **** {
 113:src/../h/riscv.hpp ****     __asm__ volatile ("csrw scause, %[scause]" : : [scause] "r"(scause));
GAS LISTING /tmp/ccoJryln.s 			page 9


 114:src/../h/riscv.hpp **** }
 115:src/../h/riscv.hpp **** 
 116:src/../h/riscv.hpp **** inline uint64 Riscv::r_sepc()
 117:src/../h/riscv.hpp **** {
 118:src/../h/riscv.hpp ****     uint64 volatile sepc;
 141              		.loc 2 118 5
 119:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sepc], sepc" : [sepc] "=r"(sepc));
 142              		.loc 2 119 5
 143              		.loc 2 119 64 is_stmt 0
 144              	#APP
 145              	# 119 "src/../h/riscv.hpp" 1
 120              	    return sepc;
 146              		csrr a5, sepc
 147              	# 0 "" 2
 148              	#NO_APP
 149 00a4 233CF4FC 		sd	a5,-40(s0)
 150              		.loc 2 120 5 is_stmt 1
 151              		.loc 2 120 12 is_stmt 0
 152 00a8 033584FD 		ld	a0,-40(s0)
 153              	.LBE34:
 154              	.LBE33:
 155              		.loc 1 180 21
 156 00ac 97000000 		call	_Z12printIntegerm@plt
 156      E7800000 
 157              	.LVL5:
 181:src/riscv.cpp ****         printString("\n");
 158              		.loc 1 181 9 is_stmt 1
 159              		.loc 1 181 20 is_stmt 0
 160 00b4 17050000 		lla	a0,.LC4
 160      13050500 
 161 00bc 97000000 		call	_Z11printStringPKc@plt
 161      E7800000 
 162              	.LVL6:
 182:src/riscv.cpp ****         printString("stval: ");
 163              		.loc 1 182 9 is_stmt 1
 164              		.loc 1 182 20 is_stmt 0
 165 00c4 17050000 		lla	a0,.LC6
 165      13050500 
 166 00cc 97000000 		call	_Z11printStringPKc@plt
 166      E7800000 
 167              	.LVL7:
 183:src/riscv.cpp ****         printInteger(r_stval());
 168              		.loc 1 183 9 is_stmt 1
 169              	.LBB35:
 170              	.LBB36:
 121:src/../h/riscv.hpp **** }
 122:src/../h/riscv.hpp **** 
 123:src/../h/riscv.hpp **** inline void Riscv::w_sepc(uint64 sepc)
 124:src/../h/riscv.hpp **** {
 125:src/../h/riscv.hpp ****     __asm__ volatile ("csrw sepc, %[sepc]" : : [sepc] "r"(sepc));
 126:src/../h/riscv.hpp **** }
 127:src/../h/riscv.hpp **** 
 128:src/../h/riscv.hpp **** inline uint64 Riscv::r_stvec()
 129:src/../h/riscv.hpp **** {
 130:src/../h/riscv.hpp ****     uint64 volatile stvec;
 131:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[stvec], stvec" : [stvec] "=r"(stvec));
 132:src/../h/riscv.hpp ****     return stvec;
GAS LISTING /tmp/ccoJryln.s 			page 10


 133:src/../h/riscv.hpp **** }
 134:src/../h/riscv.hpp **** 
 135:src/../h/riscv.hpp **** inline void Riscv::w_stvec(uint64 stvec)
 136:src/../h/riscv.hpp **** {
 137:src/../h/riscv.hpp ****     __asm__ volatile ("csrw stvec, %[stvec]" : : [stvec] "r"(stvec));
 138:src/../h/riscv.hpp **** }
 139:src/../h/riscv.hpp **** 
 140:src/../h/riscv.hpp **** inline uint64 Riscv::r_stval()
 141:src/../h/riscv.hpp **** {
 142:src/../h/riscv.hpp ****     uint64 volatile stval;
 171              		.loc 2 142 5
 143:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[stval], stval" : [stval] "=r"(stval));
 172              		.loc 2 143 5
 173              		.loc 2 143 68 is_stmt 0
 174              	#APP
 175              	# 143 "src/../h/riscv.hpp" 1
 144              	    return stval;
 176              		csrr a5, stval
 177              	# 0 "" 2
 178              	#NO_APP
 179 00d8 2338F4FC 		sd	a5,-48(s0)
 180              		.loc 2 144 5 is_stmt 1
 181              		.loc 2 144 12 is_stmt 0
 182 00dc 033504FD 		ld	a0,-48(s0)
 183              	.LBE36:
 184              	.LBE35:
 185              		.loc 1 183 21
 186 00e0 97000000 		call	_Z12printIntegerm@plt
 186      E7800000 
 187              	.LVL8:
 184:src/riscv.cpp ****         printString("\n");
 188              		.loc 1 184 9 is_stmt 1
 189              		.loc 1 184 20 is_stmt 0
 190 00e8 17050000 		lla	a0,.LC4
 190      13050500 
 191 00f0 97000000 		call	_Z11printStringPKc@plt
 191      E7800000 
 192              	.LVL9:
 193              	.L3:
 194              	.LBE32:
 185:src/riscv.cpp ****         //while(1);
 186:src/riscv.cpp ****     }
 187:src/riscv.cpp **** }
 195              		.loc 1 187 1
 196 00f8 83308105 		ld	ra,88(sp)
 197              		.cfi_remember_state
 198              		.cfi_restore 1
 199 00fc 03340105 		ld	s0,80(sp)
 200              		.cfi_restore 8
 201              		.cfi_def_cfa 2, 96
 202 0100 83348104 		ld	s1,72(sp)
 203              		.cfi_restore 9
 204              	.LVL10:
 205 0104 13010106 		addi	sp,sp,96
 206              		.cfi_def_cfa_offset 0
 207 0108 67800000 		jr	ra
 208              	.LVL11:
GAS LISTING /tmp/ccoJryln.s 			page 11


 209              	.L24:
 210              		.cfi_restore_state
 211              	.LBB50:
 212              	.LBB37:
  30:src/riscv.cpp ****         uint64 volatile sstatus = r_sstatus(); // kupim vrednost statusnog registra
 213              		.loc 1 30 9 is_stmt 1
 214              	.LBB38:
 215              	.LBB39:
 118:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sepc], sepc" : [sepc] "=r"(sepc));
 216              		.loc 2 118 5
 119:src/../h/riscv.hpp ****     return sepc;
 217              		.loc 2 119 5
 119:src/../h/riscv.hpp ****     return sepc;
 218              		.loc 2 119 64 is_stmt 0
 219              	#APP
 220              	# 119 "src/../h/riscv.hpp" 1
 221              		csrr a5, sepc
 222              	# 0 "" 2
 223              	#NO_APP
 224 0110 2334F4FC 		sd	a5,-56(s0)
 120:src/../h/riscv.hpp **** }
 225              		.loc 2 120 5 is_stmt 1
 120:src/../h/riscv.hpp **** }
 226              		.loc 2 120 12 is_stmt 0
 227 0114 833784FC 		ld	a5,-56(s0)
 228              	.LBE39:
 229              	.LBE38:
  30:src/riscv.cpp ****         uint64 volatile sstatus = r_sstatus(); // kupim vrednost statusnog registra
 230              		.loc 1 30 40
 231 0118 93874700 		addi	a5,a5,4
  30:src/riscv.cpp ****         uint64 volatile sstatus = r_sstatus(); // kupim vrednost statusnog registra
 232              		.loc 1 30 42
 233 011c 2334F4FA 		sd	a5,-88(s0)
  31:src/riscv.cpp ****         //obe stvari su mi bitne zbog desavanja kada se dodje na sret
 234              		.loc 1 31 9 is_stmt 1
 235              	.LBB40:
 236              	.LBB41:
 145:src/../h/riscv.hpp **** }
 146:src/../h/riscv.hpp **** 
 147:src/../h/riscv.hpp **** inline void Riscv::w_stval(uint64 stval)
 148:src/../h/riscv.hpp **** {
 149:src/../h/riscv.hpp ****     __asm__ volatile ("csrw stval, %[stval]" : : [stval] "r"(stval));
 150:src/../h/riscv.hpp **** }
 151:src/../h/riscv.hpp **** 
 152:src/../h/riscv.hpp **** inline void Riscv::ms_sip(uint64 mask)
 153:src/../h/riscv.hpp **** {
 154:src/../h/riscv.hpp ****     __asm__ volatile ("csrs sip, %[mask]" : : [mask] "r"(mask));
 155:src/../h/riscv.hpp **** }
 156:src/../h/riscv.hpp **** 
 157:src/../h/riscv.hpp **** inline void Riscv::mc_sip(uint64 mask)
 158:src/../h/riscv.hpp **** {
 159:src/../h/riscv.hpp ****     __asm__ volatile ("csrc sip, %[mask]" : : [mask] "r"(mask));
 160:src/../h/riscv.hpp **** }
 161:src/../h/riscv.hpp **** 
 162:src/../h/riscv.hpp **** inline uint64 Riscv::r_sip()
 163:src/../h/riscv.hpp **** {
 164:src/../h/riscv.hpp ****     uint64 volatile sip;
GAS LISTING /tmp/ccoJryln.s 			page 12


 165:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sip], sip" : [sip] "=r"(sip));
 166:src/../h/riscv.hpp ****     return sip;
 167:src/../h/riscv.hpp **** }
 168:src/../h/riscv.hpp **** 
 169:src/../h/riscv.hpp **** inline void Riscv::w_sip(uint64 sip)
 170:src/../h/riscv.hpp **** {
 171:src/../h/riscv.hpp ****     __asm__ volatile ("csrw sip, %[sip]" : : [sip] "r"(sip));
 172:src/../h/riscv.hpp **** }
 173:src/../h/riscv.hpp **** 
 174:src/../h/riscv.hpp **** inline void Riscv::ms_sstatus(uint64 mask)
 175:src/../h/riscv.hpp **** {
 176:src/../h/riscv.hpp ****     __asm__ volatile ("csrs sstatus, %[mask]" : : [mask] "r"(mask));
 177:src/../h/riscv.hpp **** }
 178:src/../h/riscv.hpp **** 
 179:src/../h/riscv.hpp **** inline void Riscv::mc_sstatus(uint64 mask)
 180:src/../h/riscv.hpp **** {
 181:src/../h/riscv.hpp ****     __asm__ volatile ("csrc sstatus, %[mask]" : : [mask] "r"(mask));
 182:src/../h/riscv.hpp **** }
 183:src/../h/riscv.hpp **** 
 184:src/../h/riscv.hpp **** inline uint64 Riscv::r_sstatus()
 185:src/../h/riscv.hpp **** {
 186:src/../h/riscv.hpp ****     uint64 volatile sstatus;
 237              		.loc 2 186 5
 187:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sstatus], sstatus" : [sstatus] "=r"(sstatus));
 238              		.loc 2 187 5
 239              		.loc 2 187 76 is_stmt 0
 240              	#APP
 241              	# 187 "src/../h/riscv.hpp" 1
 188              	    return sstatus;
 242              		csrr a5, sstatus
 243              	# 0 "" 2
 244              	#NO_APP
 245 0124 2330F4FC 		sd	a5,-64(s0)
 246              		.loc 2 188 5 is_stmt 1
 247              		.loc 2 188 12 is_stmt 0
 248 0128 833704FC 		ld	a5,-64(s0)
 249              	.LBE41:
 250              	.LBE40:
  31:src/riscv.cpp ****         //obe stvari su mi bitne zbog desavanja kada se dodje na sret
 251              		.loc 1 31 45
 252 012c 2338F4FA 		sd	a5,-80(s0)
  34:src/riscv.cpp ****         __asm__ volatile("mv %0, a0" : "=r"(syscall));
 253              		.loc 1 34 9 is_stmt 1
  35:src/riscv.cpp **** 
 254              		.loc 1 35 9
  35:src/riscv.cpp **** 
 255              		.loc 1 35 54 is_stmt 0
 256              	#APP
 257              	# 35 "src/riscv.cpp" 1
 258              		mv a5, a0
 259              	# 0 "" 2
 260              	.LVL12:
  37:src/riscv.cpp ****         void* ptr = nullptr;
 261              		.loc 1 37 9 is_stmt 1
  38:src/riscv.cpp ****         int ret;
 262              		.loc 1 38 9
  39:src/riscv.cpp **** //        Body body;
GAS LISTING /tmp/ccoJryln.s 			page 13


 263              		.loc 1 39 9
  48:src/riscv.cpp ****         {
 264              		.loc 1 48 9
 265              	#NO_APP
 266              	.LBB42:
 267 0134 13073001 		li	a4,19
 268 0138 6364F702 		bgtu	a5,a4,.L5
 269 013c 63820706 		beqz	a5,.L6
 270 0140 6360F706 		bgtu	a5,a4,.L6
 271 0144 93972700 		slli	a5,a5,2
 272              	.LVL13:
 273 0148 17070000 		lla	a4,.L8
 273      13070700 
 274 0150 B387E700 		add	a5,a5,a4
 275 0154 83A70700 		lw	a5,0(a5)
 276 0158 B387E700 		add	a5,a5,a4
 277 015c 67800700 		jr	a5
 278              		.section	.rodata
 279              		.align	2
 280              		.align	2
 281              	.L8:
 282 0000 00000000 		.word	.L6-.L8
 283 0004 00000000 		.word	.L12-.L8
 284 0008 00000000 		.word	.L11-.L8
 285 000c 00000000 		.word	.L6-.L8
 286 0010 00000000 		.word	.L6-.L8
 287 0014 00000000 		.word	.L6-.L8
 288 0018 00000000 		.word	.L6-.L8
 289 001c 00000000 		.word	.L6-.L8
 290 0020 00000000 		.word	.L6-.L8
 291 0024 00000000 		.word	.L6-.L8
 292 0028 00000000 		.word	.L6-.L8
 293 002c 00000000 		.word	.L6-.L8
 294 0030 00000000 		.word	.L6-.L8
 295 0034 00000000 		.word	.L6-.L8
 296 0038 00000000 		.word	.L6-.L8
 297 003c 00000000 		.word	.L6-.L8
 298 0040 00000000 		.word	.L6-.L8
 299 0044 00000000 		.word	.L10-.L8
 300 0048 00000000 		.word	.L9-.L8
 301 004c 00000000 		.word	.L7-.L8
 302              		.text
 303              	.LVL14:
 304              	.L5:
 305 0160 13075005 		li	a4,85
 306 0164 639EE702 		bne	a5,a4,.L6
 307              	.LBB43:
 147:src/riscv.cpp ****                 int arg1,arg2,arg3,arg4;
 308              		.loc 1 147 13
 148:src/riscv.cpp ****                 __asm__ volatile("mv %0, a1":"=r"(arg1));
 309              		.loc 1 148 17
 149:src/riscv.cpp ****                 __asm__ volatile("mv %0, a2":"=r"(arg2));
 310              		.loc 1 149 17
 149:src/riscv.cpp ****                 __asm__ volatile("mv %0, a2":"=r"(arg2));
 311              		.loc 1 149 57 is_stmt 0
 312              	#APP
 313              	# 149 "src/riscv.cpp" 1
GAS LISTING /tmp/ccoJryln.s 			page 14


 314              		mv a4, a1
 315              	# 0 "" 2
 316              	.LVL15:
 150:src/riscv.cpp ****                 __asm__ volatile("mv %0, a3":"=r"(arg3));
 317              		.loc 1 150 17 is_stmt 1
 150:src/riscv.cpp ****                 __asm__ volatile("mv %0, a3":"=r"(arg3));
 318              		.loc 1 150 57 is_stmt 0
 319              	# 150 "src/riscv.cpp" 1
 320              		mv a5, a2
 321              	# 0 "" 2
 322              	.LVL16:
 151:src/riscv.cpp ****                 __asm__ volatile("mv %0, a6":"=r"(arg4));
 323              		.loc 1 151 17 is_stmt 1
 151:src/riscv.cpp ****                 __asm__ volatile("mv %0, a6":"=r"(arg4));
 324              		.loc 1 151 57 is_stmt 0
 325              	# 151 "src/riscv.cpp" 1
 326              		mv a2, a3
 327              	# 0 "" 2
 328              	.LVL17:
 152:src/riscv.cpp ****                 arg1 += arg2+arg3+arg4;
 329              		.loc 1 152 17 is_stmt 1
 152:src/riscv.cpp ****                 arg1 += arg2+arg3+arg4;
 330              		.loc 1 152 57 is_stmt 0
 331              	# 152 "src/riscv.cpp" 1
 332              		mv a3, a6
 333              	# 0 "" 2
 334              	.LVL18:
 153:src/riscv.cpp ****                 __asm__ volatile("mv a0, %0"::"r"(arg1));
 335              		.loc 1 153 17 is_stmt 1
 153:src/riscv.cpp ****                 __asm__ volatile("mv a0, %0"::"r"(arg1));
 336              		.loc 1 153 29 is_stmt 0
 337              	#NO_APP
 338 0178 BB87C700 		addw	a5,a5,a2
 339              	.LVL19:
 153:src/riscv.cpp ****                 __asm__ volatile("mv a0, %0"::"r"(arg1));
 340              		.loc 1 153 34
 341 017c BB87D700 		addw	a5,a5,a3
 153:src/riscv.cpp ****                 __asm__ volatile("mv a0, %0"::"r"(arg1));
 342              		.loc 1 153 22
 343 0180 BB87E700 		addw	a5,a5,a4
 344              	.LVL20:
 154:src/riscv.cpp ****                 break;
 345              		.loc 1 154 17 is_stmt 1
 154:src/riscv.cpp ****                 break;
 346              		.loc 1 154 57 is_stmt 0
 347              	#APP
 348              	# 154 "src/riscv.cpp" 1
 155:src/riscv.cpp ****             default: break;
 349              		mv a0, a5
 350              	# 0 "" 2
 351              		.loc 1 155 17 is_stmt 1
 352              	#NO_APP
 353 0188 6F008001 		j	.L6
 354              	.LVL21:
 355              	.L12:
  50:src/riscv.cpp ****                 __asm__ volatile("mv %0, a1":"=r"(size));
 356              		.loc 1 50 13
GAS LISTING /tmp/ccoJryln.s 			page 15


  51:src/riscv.cpp ****                 size *= MEM_BLOCK_SIZE;
 357              		.loc 1 51 17
  51:src/riscv.cpp ****                 size *= MEM_BLOCK_SIZE;
 358              		.loc 1 51 57 is_stmt 0
 359              	#APP
 360              	# 51 "src/riscv.cpp" 1
 361              		mv a0, a1
 362              	# 0 "" 2
 363              	.LVL22:
  52:src/riscv.cpp ****                 //ptr = MemoryAllocator::kmem_alloc(size);
 364              		.loc 1 52 17 is_stmt 1
  54:src/riscv.cpp ****                 __asm__ volatile("mv a0, %0" : : "r" (ptr));
 365              		.loc 1 54 17
  54:src/riscv.cpp ****                 __asm__ volatile("mv a0, %0" : : "r" (ptr));
 366              		.loc 1 54 34 is_stmt 0
 367              	#NO_APP
 368 0190 13156500 		slli	a0,a0,6
 369              	.LVL23:
 370 0194 97000000 		call	__mem_alloc@plt
 370      E7800000 
 371              	.LVL24:
  55:src/riscv.cpp ****                 break;
 372              		.loc 1 55 17 is_stmt 1
  55:src/riscv.cpp ****                 break;
 373              		.loc 1 55 60 is_stmt 0
 374              	#APP
 375              	# 55 "src/riscv.cpp" 1
  56:src/riscv.cpp ****             case 0x02: //mem_free
 376              		mv a0, a0
 377              	# 0 "" 2
 378              		.loc 1 56 17 is_stmt 1
 379              	.LVL25:
 380              	#NO_APP
 381              	.L6:
 382              	.LBE43:
 383              	.LBE42:
 159:src/riscv.cpp ****         //PCB::dispatch();
 384              		.loc 1 159 9
 159:src/riscv.cpp ****         //PCB::dispatch();
 385              		.loc 1 159 42 is_stmt 0
 386              	#APP
 387              	# 159 "src/riscv.cpp" 1
 161:src/riscv.cpp ****         w_sepc(sepc);
 388              		sd a0, 80(fp)
 389              	# 0 "" 2
 390              		.loc 1 161 9 is_stmt 1
 161:src/riscv.cpp ****         w_sepc(sepc);
 391              		.loc 1 161 18 is_stmt 0
 392              	#NO_APP
 393 01a4 833704FB 		ld	a5,-80(s0)
 394              	.LVL26:
 395              	.LBB45:
 396              	.LBB46:
 189:src/../h/riscv.hpp **** }
 190:src/../h/riscv.hpp **** 
 191:src/../h/riscv.hpp **** inline void Riscv::w_sstatus(uint64 sstatus)
 192:src/../h/riscv.hpp **** {
GAS LISTING /tmp/ccoJryln.s 			page 16


 193:src/../h/riscv.hpp ****     __asm__ volatile ("csrw sstatus, %[sstatus]" : : [sstatus] "r"(sstatus));
 397              		.loc 2 193 5 is_stmt 1
 398              		.loc 2 193 77 is_stmt 0
 399              	#APP
 400              	# 193 "src/../h/riscv.hpp" 1
 194              	}
 401              		csrw sstatus, a5
 402              	# 0 "" 2
 403              	.LVL27:
 404              	#NO_APP
 405              	.LBE46:
 406              	.LBE45:
 162:src/riscv.cpp **** 
 407              		.loc 1 162 9 is_stmt 1
 162:src/riscv.cpp **** 
 408              		.loc 1 162 15 is_stmt 0
 409 01ac 833784FA 		ld	a5,-88(s0)
 410              	.LVL28:
 411              	.LBB47:
 412              	.LBB48:
 125:src/../h/riscv.hpp **** }
 413              		.loc 2 125 5 is_stmt 1
 125:src/../h/riscv.hpp **** }
 414              		.loc 2 125 65 is_stmt 0
 415              	#APP
 416              	# 125 "src/../h/riscv.hpp" 1
 126:src/../h/riscv.hpp **** 
 417              		csrw sepc, a5
 418              	# 0 "" 2
 419              		.loc 2 126 1
 420              	#NO_APP
 421 01b4 6FF05FF4 		j	.L3
 422              	.LVL29:
 423              	.L11:
 424              	.LBE48:
 425              	.LBE47:
 426              	.LBB49:
 427              	.LBB44:
  57:src/riscv.cpp ****                 __asm__ volatile("mv %0, a1": "=r"(ptr));
 428              		.loc 1 57 13 is_stmt 1
  58:src/riscv.cpp ****                 //ret = MemoryAllocator::kmem_free(ptr);
 429              		.loc 1 58 17
  58:src/riscv.cpp ****                 //ret = MemoryAllocator::kmem_free(ptr);
 430              		.loc 1 58 57 is_stmt 0
 431              	#APP
 432              	# 58 "src/riscv.cpp" 1
 433              		mv a0, a1
 434              	# 0 "" 2
 435              	.LVL30:
  60:src/riscv.cpp ****                 __asm__ volatile("mv a0, %0"::"r"(ret));
 436              		.loc 1 60 17 is_stmt 1
  60:src/riscv.cpp ****                 __asm__ volatile("mv a0, %0"::"r"(ret));
 437              		.loc 1 60 33 is_stmt 0
 438              	#NO_APP
 439 01bc 97000000 		call	__mem_free@plt
 439      E7800000 
 440              	.LVL31:
GAS LISTING /tmp/ccoJryln.s 			page 17


  61:src/riscv.cpp ****                 break;
 441              		.loc 1 61 17 is_stmt 1
  61:src/riscv.cpp ****                 break;
 442              		.loc 1 61 56 is_stmt 0
 443              	#APP
 444              	# 61 "src/riscv.cpp" 1
  62:src/riscv.cpp ****             case 0x11://thread_create
 445              		mv a0, a0
 446              	# 0 "" 2
 447              		.loc 1 62 17 is_stmt 1
 448              	#NO_APP
 449 01c8 6FF09FFD 		j	.L6
 450              	.LVL32:
 451              	.L10:
  63:src/riscv.cpp ****                 kThread* handle;
 452              		.loc 1 63 13
  64:src/riscv.cpp ****                 Body body;
 453              		.loc 1 64 17
  65:src/riscv.cpp ****                 void * arg;
 454              		.loc 1 65 17
  66:src/riscv.cpp ****                 void * stack_space;
 455              		.loc 1 66 17
  67:src/riscv.cpp ****                 __asm__ volatile("mv %0, a1":"=r"(handle));
 456              		.loc 1 67 17
  68:src/riscv.cpp ****                 __asm__ volatile("mv %0, a2":"=r"(body));
 457              		.loc 1 68 17
  68:src/riscv.cpp ****                 __asm__ volatile("mv %0, a2":"=r"(body));
 458              		.loc 1 68 59 is_stmt 0
 459              	#APP
 460              	# 68 "src/riscv.cpp" 1
 461              		mv a5, a1
 462              	# 0 "" 2
 463              	.LVL33:
  69:src/riscv.cpp ****                 __asm__ volatile("mv %0, a3":"=r"(arg));
 464              		.loc 1 69 17 is_stmt 1
  69:src/riscv.cpp ****                 __asm__ volatile("mv %0, a3":"=r"(arg));
 465              		.loc 1 69 57 is_stmt 0
 466              	# 69 "src/riscv.cpp" 1
 467              		mv a0, a2
 468              	# 0 "" 2
 469              	.LVL34:
  70:src/riscv.cpp ****                 if(body!= nullptr){
 470              		.loc 1 70 17 is_stmt 1
  70:src/riscv.cpp ****                 if(body!= nullptr){
 471              		.loc 1 70 56 is_stmt 0
 472              	# 70 "src/riscv.cpp" 1
 473              		mv a1, a3
 474              	# 0 "" 2
 475              	.LVL35:
  71:src/riscv.cpp ****                     __asm__ volatile("mv %0, a6":"=r"(stack_space));
 476              		.loc 1 71 17 is_stmt 1
 477              	#NO_APP
 478 01d8 63000502 		beqz	a0,.L21
  72:src/riscv.cpp ****                 }
 479              		.loc 1 72 21
  72:src/riscv.cpp ****                 }
 480              		.loc 1 72 68 is_stmt 0
GAS LISTING /tmp/ccoJryln.s 			page 18


 481              	#APP
 482              	# 72 "src/riscv.cpp" 1
 483              		mv a2, a6
 484              	# 0 "" 2
 485              	.LVL36:
 486              	#NO_APP
 487              	.L14:
  76:src/riscv.cpp **** 
 488              		.loc 1 76 17 is_stmt 1
  76:src/riscv.cpp **** 
 489              		.loc 1 76 48 is_stmt 0
 490 01e0 97000000 		call	_ZN7kThread13createProcessEPFvPvES0_S0_@plt
 490      E7800000 
 491              	.LVL37:
  78:src/riscv.cpp ****                 else ret = -0x11;
 492              		.loc 1 78 17 is_stmt 1
 493 01e8 630C0500 		beqz	a0,.L22
  78:src/riscv.cpp ****                 else ret = -0x11;
 494              		.loc 1 78 32 is_stmt 0
 495 01ec 93070000 		li	a5,0
 496              	.L15:
 497              	.LVL38:
  80:src/riscv.cpp ****                 break;
 498              		.loc 1 80 17 is_stmt 1
  80:src/riscv.cpp ****                 break;
 499              		.loc 1 80 56 is_stmt 0
 500              	#APP
 501              	# 80 "src/riscv.cpp" 1
  81:src/riscv.cpp ****             case 0x12://thread_exit
 502              		mv a0, a5
 503              	# 0 "" 2
 504              		.loc 1 81 17 is_stmt 1
 505              	#NO_APP
 506 01f4 6FF0DFFA 		j	.L6
 507              	.LVL39:
 508              	.L21:
  74:src/riscv.cpp **** 
 509              		.loc 1 74 34 is_stmt 0
 510 01f8 13060000 		li	a2,0
 511 01fc 6FF05FFE 		j	.L14
 512              	.LVL40:
 513              	.L22:
  79:src/riscv.cpp ****                 __asm__ volatile("mv a0, %0"::"r"(ret));
 514              		.loc 1 79 26
 515 0200 9307F0FE 		li	a5,-17
 516 0204 6FF0DFFE 		j	.L15
 517              	.LVL41:
 518              	.L9:
  82:src/riscv.cpp ****                 if(kThread::running->body == nullptr){
 519              		.loc 1 82 13 is_stmt 1
  83:src/riscv.cpp ****                     ret = -0x12;
 520              		.loc 1 83 17
  83:src/riscv.cpp ****                     ret = -0x12;
 521              		.loc 1 83 38 is_stmt 0
 522 0208 97070000 		la	a5,_ZN7kThread7runningE
 522      83B70700 
 523 0210 83B70700 		ld	a5,0(a5)
GAS LISTING /tmp/ccoJryln.s 			page 19


 524 0214 83B78700 		ld	a5,8(a5)
  83:src/riscv.cpp ****                     ret = -0x12;
 525              		.loc 1 83 17
 526 0218 63880700 		beqz	a5,.L28
  87:src/riscv.cpp ****                 break;
 527              		.loc 1 87 22 is_stmt 1
  87:src/riscv.cpp ****                 break;
 528              		.loc 1 87 42 is_stmt 0
 529 021c 97000000 		call	_ZN7kThread11kThreadExitEv@plt
 529      E7800000 
 530              	.LVL42:
 531 0224 6FF0DFF7 		j	.L6
 532              	.L28:
  84:src/riscv.cpp ****                     __asm__ volatile("mv a0, %0"::"r"(ret));
 533              		.loc 1 84 21 is_stmt 1
 534              	.LVL43:
  85:src/riscv.cpp ****                 }
 535              		.loc 1 85 21
  85:src/riscv.cpp ****                 }
 536              		.loc 1 85 60 is_stmt 0
 537 0228 9307E0FE 		li	a5,-18
 538              	#APP
 539              	# 85 "src/riscv.cpp" 1
 540              		mv a0, a5
 541              	# 0 "" 2
 542              	#NO_APP
 543 0230 6FF01FF7 		j	.L6
 544              	.LVL44:
 545              	.L7:
  89:src/riscv.cpp ****                 kThread::yield();
 546              		.loc 1 89 13 is_stmt 1
  90:src/riscv.cpp ****                 break;
 547              		.loc 1 90 17
  90:src/riscv.cpp ****                 break;
 548              		.loc 1 90 31 is_stmt 0
 549 0234 97000000 		call	_ZN7kThread5yieldEv@plt
 549      E7800000 
 550              	.LVL45:
  91:src/riscv.cpp **** //            case 0x14: //thread_join
 551              		.loc 1 91 17 is_stmt 1
 552 023c 6FF05FF6 		j	.L6
 553              	.LVL46:
 554              	.L25:
 555              	.LBE44:
 556              	.LBE49:
 557              	.LBE37:
 169:src/riscv.cpp ****         else if (scause == 0x0000000000000005UL)
 558              		.loc 1 169 13
 169:src/riscv.cpp ****         else if (scause == 0x0000000000000005UL)
 559              		.loc 1 169 24 is_stmt 0
 560 0240 17050000 		lla	a0,.LC0
 560      13050500 
 561 0248 97000000 		call	_Z11printStringPKc@plt
 561      E7800000 
 562              	.LVL47:
 563 0250 6FF05FE1 		j	.L19
 564              	.L26:
GAS LISTING /tmp/ccoJryln.s 			page 20


 171:src/riscv.cpp ****         else if (scause == 0x0000000000000007UL)
 565              		.loc 1 171 13 is_stmt 1
 171:src/riscv.cpp ****         else if (scause == 0x0000000000000007UL)
 566              		.loc 1 171 24 is_stmt 0
 567 0254 17050000 		lla	a0,.LC1
 567      13050500 
 568 025c 97000000 		call	_Z11printStringPKc@plt
 568      E7800000 
 569              	.LVL48:
 570 0264 6FF01FE0 		j	.L19
 571              	.L27:
 173:src/riscv.cpp **** 
 572              		.loc 1 173 13 is_stmt 1
 173:src/riscv.cpp **** 
 573              		.loc 1 173 24 is_stmt 0
 574 0268 17050000 		lla	a0,.LC2
 574      13050500 
 575 0270 97000000 		call	_Z11printStringPKc@plt
 575      E7800000 
 576              	.LVL49:
 577 0278 6FF0DFDE 		j	.L19
 578              	.LBE50:
 579              		.cfi_endproc
 580              	.LFE22:
 582              		.align	2
 583              		.globl	_ZN5Riscv20handleTimerInterruptEv
 585              	_ZN5Riscv20handleTimerInterruptEv:
 586              	.LFB23:
 188:src/riscv.cpp **** void Riscv::handleTimerInterrupt() {
 587              		.loc 1 188 36 is_stmt 1
 588              		.cfi_startproc
 589 027c 130101FD 		addi	sp,sp,-48
 590              		.cfi_def_cfa_offset 48
 591 0280 23348102 		sd	s0,40(sp)
 592              		.cfi_offset 8, -8
 593 0284 13040103 		addi	s0,sp,48
 594              		.cfi_def_cfa 8, 0
 189:src/riscv.cpp **** 
 190:src/riscv.cpp ****     mc_sip(SIP_SSIP); //zasto ovo?? - ni ne radim vrv
 595              		.loc 1 190 5
 596              	.LVL50:
 597              	.LBB51:
 598              	.LBB52:
 159:src/../h/riscv.hpp **** }
 599              		.loc 2 159 5
 159:src/../h/riscv.hpp **** }
 600              		.loc 2 159 64 is_stmt 0
 601 0288 93072000 		li	a5,2
 602              	#APP
 603              	# 159 "src/../h/riscv.hpp" 1
 604              		csrc sip, a5
 605              	# 0 "" 2
 606              	.LVL51:
 607              	#NO_APP
 608              	.LBE52:
 609              	.LBE51:
 191:src/riscv.cpp **** 
GAS LISTING /tmp/ccoJryln.s 			page 21


 192:src/riscv.cpp ****     uint64 volatile sepc = r_sepc();
 610              		.loc 1 192 5 is_stmt 1
 611              	.LBB53:
 612              	.LBB54:
 118:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sepc], sepc" : [sepc] "=r"(sepc));
 613              		.loc 2 118 5
 119:src/../h/riscv.hpp ****     return sepc;
 614              		.loc 2 119 5
 119:src/../h/riscv.hpp ****     return sepc;
 615              		.loc 2 119 64 is_stmt 0
 616              	#APP
 617              	# 119 "src/../h/riscv.hpp" 1
 618              		csrr a5, sepc
 619              	# 0 "" 2
 620              	#NO_APP
 621 0294 233CF4FC 		sd	a5,-40(s0)
 120:src/../h/riscv.hpp **** }
 622              		.loc 2 120 5 is_stmt 1
 120:src/../h/riscv.hpp **** }
 623              		.loc 2 120 12 is_stmt 0
 624 0298 833784FD 		ld	a5,-40(s0)
 625              	.LBE54:
 626              	.LBE53:
 627              		.loc 1 192 35
 628 029c 2334F4FE 		sd	a5,-24(s0)
 193:src/riscv.cpp ****     uint64 volatile sstatus = r_sstatus();
 629              		.loc 1 193 5 is_stmt 1
 630              	.LBB55:
 631              	.LBB56:
 186:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sstatus], sstatus" : [sstatus] "=r"(sstatus));
 632              		.loc 2 186 5
 187:src/../h/riscv.hpp ****     return sstatus;
 633              		.loc 2 187 5
 187:src/../h/riscv.hpp ****     return sstatus;
 634              		.loc 2 187 76 is_stmt 0
 635              	#APP
 636              	# 187 "src/../h/riscv.hpp" 1
 637              		csrr a5, sstatus
 638              	# 0 "" 2
 639              	#NO_APP
 640 02a4 2338F4FC 		sd	a5,-48(s0)
 188:src/../h/riscv.hpp **** }
 641              		.loc 2 188 5 is_stmt 1
 188:src/../h/riscv.hpp **** }
 642              		.loc 2 188 12 is_stmt 0
 643 02a8 833704FD 		ld	a5,-48(s0)
 644              	.LBE56:
 645              	.LBE55:
 646              		.loc 1 193 41
 647 02ac 2330F4FE 		sd	a5,-32(s0)
 194:src/riscv.cpp ****     w_sstatus(sstatus);
 648              		.loc 1 194 5 is_stmt 1
 649              		.loc 1 194 14 is_stmt 0
 650 02b0 833704FE 		ld	a5,-32(s0)
 651              	.LVL52:
 652              	.LBB57:
 653              	.LBB58:
GAS LISTING /tmp/ccoJryln.s 			page 22


 193:src/../h/riscv.hpp **** }
 654              		.loc 2 193 5 is_stmt 1
 193:src/../h/riscv.hpp **** }
 655              		.loc 2 193 77 is_stmt 0
 656              	#APP
 657              	# 193 "src/../h/riscv.hpp" 1
 658              		csrw sstatus, a5
 659              	# 0 "" 2
 660              	.LVL53:
 661              	#NO_APP
 662              	.LBE58:
 663              	.LBE57:
 195:src/riscv.cpp ****     w_sepc(sepc);
 664              		.loc 1 195 5 is_stmt 1
 665              		.loc 1 195 11 is_stmt 0
 666 02b8 833784FE 		ld	a5,-24(s0)
 667              	.LVL54:
 668              	.LBB59:
 669              	.LBB60:
 125:src/../h/riscv.hpp **** }
 670              		.loc 2 125 5 is_stmt 1
 125:src/../h/riscv.hpp **** }
 671              		.loc 2 125 65 is_stmt 0
 672              	#APP
 673              	# 125 "src/../h/riscv.hpp" 1
 674              		csrw sepc, a5
 675              	# 0 "" 2
 676              	.LVL55:
 677              	#NO_APP
 678              	.LBE60:
 679              	.LBE59:
 196:src/riscv.cpp **** }
 680              		.loc 1 196 1
 681 02c0 03348102 		ld	s0,40(sp)
 682              		.cfi_restore 8
 683              		.cfi_def_cfa 2, 48
 684 02c4 13010103 		addi	sp,sp,48
 685              		.cfi_def_cfa_offset 0
 686 02c8 67800000 		jr	ra
 687              		.cfi_endproc
 688              	.LFE23:
 690              		.align	2
 691              		.globl	_ZN5Riscv22handleConsoleInterruptEv
 693              	_ZN5Riscv22handleConsoleInterruptEv:
 694              	.LFB24:
 197:src/riscv.cpp **** 
 198:src/riscv.cpp **** void Riscv::handleConsoleInterrupt() {
 695              		.loc 1 198 38 is_stmt 1
 696              		.cfi_startproc
 697 02cc 130101FF 		addi	sp,sp,-16
 698              		.cfi_def_cfa_offset 16
 699 02d0 23341100 		sd	ra,8(sp)
 700 02d4 23308100 		sd	s0,0(sp)
 701              		.cfi_offset 1, -8
 702              		.cfi_offset 8, -16
 703 02d8 13040101 		addi	s0,sp,16
 704              		.cfi_def_cfa 8, 0
GAS LISTING /tmp/ccoJryln.s 			page 23


 199:src/riscv.cpp ****     console_handler();
 705              		.loc 1 199 5
 706              		.loc 1 199 20 is_stmt 0
 707 02dc 97000000 		call	console_handler@plt
 707      E7800000 
 708              	.LVL56:
 200:src/riscv.cpp **** }
 709              		.loc 1 200 1
 710 02e4 83308100 		ld	ra,8(sp)
 711              		.cfi_restore 1
 712 02e8 03340100 		ld	s0,0(sp)
 713              		.cfi_restore 8
 714              		.cfi_def_cfa 2, 16
 715 02ec 13010101 		addi	sp,sp,16
 716              		.cfi_def_cfa_offset 0
 717 02f0 67800000 		jr	ra
 718              		.cfi_endproc
 719              	.LFE24:
 721              		.align	2
 722              		.globl	_ZN5Riscv14handleBadCauseEv
 724              	_ZN5Riscv14handleBadCauseEv:
 725              	.LFB25:
 201:src/riscv.cpp **** 
 202:src/riscv.cpp **** void Riscv::handleBadCause() {
 726              		.loc 1 202 30 is_stmt 1
 727              		.cfi_startproc
 728 02f4 130101FF 		addi	sp,sp,-16
 729              		.cfi_def_cfa_offset 16
 730 02f8 23348100 		sd	s0,8(sp)
 731              		.cfi_offset 8, -8
 732 02fc 13040101 		addi	s0,sp,16
 733              		.cfi_def_cfa 8, 0
 203:src/riscv.cpp **** 
 204:src/riscv.cpp **** }...
 734              		.loc 1 204 1 is_stmt 0
 735 0300 03348100 		ld	s0,8(sp)
 736              		.cfi_restore 8
 737              		.cfi_def_cfa 2, 16
 738 0304 13010101 		addi	sp,sp,16
 739              		.cfi_def_cfa_offset 0
 740 0308 67800000 		jr	ra
 741              		.cfi_endproc
 742              	.LFE25:
 744              	.Letext0:
 745              		.file 3 "src/../h/../lib/hw.h"
 746              		.file 4 "src/../h/kThread.hpp"
 747              		.file 5 "src/../lib/console.h"
 748              		.file 6 "src/../lib/mem.h"
 749              		.file 7 "src/../h/print.hpp"
GAS LISTING /tmp/ccoJryln.s 			page 24


DEFINED SYMBOLS
                            *ABS*:0000000000000000 riscv.cpp
     /tmp/ccoJryln.s:9      .text:0000000000000000 _ZN5Riscv10popSppSpieEv
     /tmp/ccoJryln.s:13     .text:0000000000000000 .L0 
     /tmp/ccoJryln.s:14     .text:0000000000000000 .L0 
     /tmp/ccoJryln.s:15     .text:0000000000000004 .L0 
     /tmp/ccoJryln.s:17     .text:0000000000000008 .L0 
     /tmp/ccoJryln.s:19     .text:000000000000000c .L0 
     /tmp/ccoJryln.s:21     .text:000000000000000c .L0 
       src/riscv.cpp:15     .text:000000000000000c .L0 
     /tmp/ccoJryln.s:27     .text:0000000000000010 .L0 
       src/riscv.cpp:16     .text:0000000000000010 .L0 
     /tmp/ccoJryln.s:33     .text:0000000000000014 .L0 
     /tmp/ccoJryln.s:34     .text:0000000000000018 .L0 
     /tmp/ccoJryln.s:35     .text:0000000000000018 .L0 
     /tmp/ccoJryln.s:37     .text:000000000000001c .L0 
     /tmp/ccoJryln.s:39     .text:0000000000000020 .L0 
     /tmp/ccoJryln.s:68     .text:0000000000000020 _ZN5Riscv13handleSyscallEv
     /tmp/ccoJryln.s:71     .text:0000000000000020 .L0 
     /tmp/ccoJryln.s:72     .text:0000000000000020 .L0 
     /tmp/ccoJryln.s:73     .text:0000000000000024 .L0 
     /tmp/ccoJryln.s:77     .text:0000000000000030 .L0 
     /tmp/ccoJryln.s:78     .text:0000000000000030 .L0 
     /tmp/ccoJryln.s:79     .text:0000000000000030 .L0 
     /tmp/ccoJryln.s:81     .text:0000000000000034 .L0 
     /tmp/ccoJryln.s:86     .text:0000000000000034 .L0 
     /tmp/ccoJryln.s:87     .text:0000000000000034 .L0 
     /tmp/ccoJryln.s:88     .text:0000000000000034 .L0 
  src/../h/riscv.hpp:107    .text:0000000000000034 .L0 
     /tmp/ccoJryln.s:96     .text:000000000000003c .L0 
     /tmp/ccoJryln.s:97     .text:000000000000003c .L0 
     /tmp/ccoJryln.s:103    .text:0000000000000040 .L0 
     /tmp/ccoJryln.s:104    .text:0000000000000040 .L0 
     /tmp/ccoJryln.s:106    .text:0000000000000044 .L0 
     /tmp/ccoJryln.s:109    .text:000000000000004c .L0 
     /tmp/ccoJryln.s:112    .text:0000000000000054 .L0 
     /tmp/ccoJryln.s:115    .text:000000000000005c .L0 
     /tmp/ccoJryln.s:119    .text:0000000000000064 .L0 
     /tmp/ccoJryln.s:120    .text:0000000000000064 .L0 
     /tmp/ccoJryln.s:124    .text:0000000000000074 .L0 
     /tmp/ccoJryln.s:125    .text:0000000000000074 .L0 
     /tmp/ccoJryln.s:129    .text:0000000000000080 .L0 
     /tmp/ccoJryln.s:130    .text:0000000000000080 .L0 
     /tmp/ccoJryln.s:134    .text:0000000000000090 .L0 
     /tmp/ccoJryln.s:135    .text:0000000000000090 .L0 
     /tmp/ccoJryln.s:141    .text:00000000000000a0 .L0 
     /tmp/ccoJryln.s:142    .text:00000000000000a0 .L0 
     /tmp/ccoJryln.s:143    .text:00000000000000a0 .L0 
  src/../h/riscv.hpp:119    .text:00000000000000a0 .L0 
     /tmp/ccoJryln.s:151    .text:00000000000000a8 .L0 
     /tmp/ccoJryln.s:152    .text:00000000000000a8 .L0 
     /tmp/ccoJryln.s:156    .text:00000000000000ac .L0 
     /tmp/ccoJryln.s:159    .text:00000000000000b4 .L0 
     /tmp/ccoJryln.s:160    .text:00000000000000b4 .L0 
     /tmp/ccoJryln.s:164    .text:00000000000000c4 .L0 
     /tmp/ccoJryln.s:165    .text:00000000000000c4 .L0 
     /tmp/ccoJryln.s:171    .text:00000000000000d4 .L0 
GAS LISTING /tmp/ccoJryln.s 			page 25


     /tmp/ccoJryln.s:172    .text:00000000000000d4 .L0 
     /tmp/ccoJryln.s:173    .text:00000000000000d4 .L0 
  src/../h/riscv.hpp:143    .text:00000000000000d4 .L0 
     /tmp/ccoJryln.s:181    .text:00000000000000dc .L0 
     /tmp/ccoJryln.s:182    .text:00000000000000dc .L0 
     /tmp/ccoJryln.s:186    .text:00000000000000e0 .L0 
     /tmp/ccoJryln.s:189    .text:00000000000000e8 .L0 
     /tmp/ccoJryln.s:190    .text:00000000000000e8 .L0 
     /tmp/ccoJryln.s:196    .text:00000000000000f8 .L0 
     /tmp/ccoJryln.s:197    .text:00000000000000fc .L0 
     /tmp/ccoJryln.s:198    .text:00000000000000fc .L0 
     /tmp/ccoJryln.s:200    .text:0000000000000100 .L0 
     /tmp/ccoJryln.s:201    .text:0000000000000100 .L0 
     /tmp/ccoJryln.s:203    .text:0000000000000104 .L0 
     /tmp/ccoJryln.s:206    .text:0000000000000108 .L0 
     /tmp/ccoJryln.s:210    .text:000000000000010c .L0 
     /tmp/ccoJryln.s:216    .text:000000000000010c .L0 
     /tmp/ccoJryln.s:217    .text:000000000000010c .L0 
     /tmp/ccoJryln.s:218    .text:000000000000010c .L0 
  src/../h/riscv.hpp:119    .text:000000000000010c .L0 
     /tmp/ccoJryln.s:226    .text:0000000000000114 .L0 
     /tmp/ccoJryln.s:227    .text:0000000000000114 .L0 
     /tmp/ccoJryln.s:231    .text:0000000000000118 .L0 
     /tmp/ccoJryln.s:233    .text:000000000000011c .L0 
     /tmp/ccoJryln.s:237    .text:0000000000000120 .L0 
     /tmp/ccoJryln.s:238    .text:0000000000000120 .L0 
     /tmp/ccoJryln.s:239    .text:0000000000000120 .L0 
  src/../h/riscv.hpp:187    .text:0000000000000120 .L0 
     /tmp/ccoJryln.s:247    .text:0000000000000128 .L0 
     /tmp/ccoJryln.s:248    .text:0000000000000128 .L0 
     /tmp/ccoJryln.s:252    .text:000000000000012c .L0 
     /tmp/ccoJryln.s:254    .text:0000000000000130 .L0 
     /tmp/ccoJryln.s:255    .text:0000000000000130 .L0 
       src/riscv.cpp:35     .text:0000000000000130 .L0 
     /tmp/ccoJryln.s:262    .text:0000000000000134 .L0 
     /tmp/ccoJryln.s:263    .text:0000000000000134 .L0 
     /tmp/ccoJryln.s:264    .text:0000000000000134 .L0 
     /tmp/ccoJryln.s:267    .text:0000000000000134 .L0 
     /tmp/ccoJryln.s:309    .text:0000000000000168 .L0 
     /tmp/ccoJryln.s:310    .text:0000000000000168 .L0 
     /tmp/ccoJryln.s:311    .text:0000000000000168 .L0 
       src/riscv.cpp:149    .text:0000000000000168 .L0 
     /tmp/ccoJryln.s:318    .text:000000000000016c .L0 
       src/riscv.cpp:150    .text:000000000000016c .L0 
     /tmp/ccoJryln.s:324    .text:0000000000000170 .L0 
       src/riscv.cpp:151    .text:0000000000000170 .L0 
     /tmp/ccoJryln.s:330    .text:0000000000000174 .L0 
       src/riscv.cpp:152    .text:0000000000000174 .L0 
     /tmp/ccoJryln.s:336    .text:0000000000000178 .L0 
     /tmp/ccoJryln.s:338    .text:0000000000000178 .L0 
     /tmp/ccoJryln.s:341    .text:000000000000017c .L0 
     /tmp/ccoJryln.s:343    .text:0000000000000180 .L0 
     /tmp/ccoJryln.s:346    .text:0000000000000184 .L0 
       src/riscv.cpp:154    .text:0000000000000184 .L0 
     /tmp/ccoJryln.s:353    .text:0000000000000188 .L0 
     /tmp/ccoJryln.s:357    .text:000000000000018c .L0 
     /tmp/ccoJryln.s:358    .text:000000000000018c .L0 
GAS LISTING /tmp/ccoJryln.s 			page 26


       src/riscv.cpp:51     .text:000000000000018c .L0 
     /tmp/ccoJryln.s:365    .text:0000000000000190 .L0 
     /tmp/ccoJryln.s:366    .text:0000000000000190 .L0 
     /tmp/ccoJryln.s:368    .text:0000000000000190 .L0 
     /tmp/ccoJryln.s:373    .text:000000000000019c .L0 
       src/riscv.cpp:55     .text:000000000000019c .L0 
     /tmp/ccoJryln.s:384    .text:00000000000001a0 .L0 
     /tmp/ccoJryln.s:385    .text:00000000000001a0 .L0 
       src/riscv.cpp:159    .text:00000000000001a0 .L0 
     /tmp/ccoJryln.s:391    .text:00000000000001a4 .L0 
     /tmp/ccoJryln.s:393    .text:00000000000001a4 .L0 
     /tmp/ccoJryln.s:398    .text:00000000000001a8 .L0 
  src/../h/riscv.hpp:193    .text:00000000000001a8 .L0 
     /tmp/ccoJryln.s:408    .text:00000000000001ac .L0 
     /tmp/ccoJryln.s:409    .text:00000000000001ac .L0 
     /tmp/ccoJryln.s:414    .text:00000000000001b0 .L0 
  src/../h/riscv.hpp:125    .text:00000000000001b0 .L0 
     /tmp/ccoJryln.s:421    .text:00000000000001b4 .L0 
     /tmp/ccoJryln.s:429    .text:00000000000001b8 .L0 
     /tmp/ccoJryln.s:430    .text:00000000000001b8 .L0 
       src/riscv.cpp:58     .text:00000000000001b8 .L0 
     /tmp/ccoJryln.s:437    .text:00000000000001bc .L0 
     /tmp/ccoJryln.s:439    .text:00000000000001bc .L0 
     /tmp/ccoJryln.s:442    .text:00000000000001c4 .L0 
       src/riscv.cpp:61     .text:00000000000001c4 .L0 
     /tmp/ccoJryln.s:449    .text:00000000000001c8 .L0 
     /tmp/ccoJryln.s:453    .text:00000000000001cc .L0 
     /tmp/ccoJryln.s:454    .text:00000000000001cc .L0 
     /tmp/ccoJryln.s:455    .text:00000000000001cc .L0 
     /tmp/ccoJryln.s:456    .text:00000000000001cc .L0 
     /tmp/ccoJryln.s:457    .text:00000000000001cc .L0 
     /tmp/ccoJryln.s:458    .text:00000000000001cc .L0 
       src/riscv.cpp:68     .text:00000000000001cc .L0 
     /tmp/ccoJryln.s:465    .text:00000000000001d0 .L0 
       src/riscv.cpp:69     .text:00000000000001d0 .L0 
     /tmp/ccoJryln.s:471    .text:00000000000001d4 .L0 
       src/riscv.cpp:70     .text:00000000000001d4 .L0 
     /tmp/ccoJryln.s:478    .text:00000000000001d8 .L0 
     /tmp/ccoJryln.s:480    .text:00000000000001dc .L0 
       src/riscv.cpp:72     .text:00000000000001dc .L0 
     /tmp/ccoJryln.s:489    .text:00000000000001e0 .L0 
     /tmp/ccoJryln.s:490    .text:00000000000001e0 .L0 
     /tmp/ccoJryln.s:493    .text:00000000000001e8 .L0 
     /tmp/ccoJryln.s:495    .text:00000000000001ec .L0 
     /tmp/ccoJryln.s:499    .text:00000000000001f0 .L0 
       src/riscv.cpp:80     .text:00000000000001f0 .L0 
     /tmp/ccoJryln.s:506    .text:00000000000001f4 .L0 
     /tmp/ccoJryln.s:510    .text:00000000000001f8 .L0 
     /tmp/ccoJryln.s:515    .text:0000000000000200 .L0 
     /tmp/ccoJryln.s:520    .text:0000000000000208 .L0 
     /tmp/ccoJryln.s:521    .text:0000000000000208 .L0 
     /tmp/ccoJryln.s:522    .text:0000000000000208 .L0 
     /tmp/ccoJryln.s:526    .text:0000000000000218 .L0 
     /tmp/ccoJryln.s:528    .text:000000000000021c .L0 
     /tmp/ccoJryln.s:529    .text:000000000000021c .L0 
     /tmp/ccoJryln.s:535    .text:0000000000000228 .L0 
     /tmp/ccoJryln.s:536    .text:0000000000000228 .L0 
GAS LISTING /tmp/ccoJryln.s 			page 27


     /tmp/ccoJryln.s:537    .text:0000000000000228 .L0 
     /tmp/ccoJryln.s:547    .text:0000000000000234 .L0 
     /tmp/ccoJryln.s:548    .text:0000000000000234 .L0 
     /tmp/ccoJryln.s:549    .text:0000000000000234 .L0 
     /tmp/ccoJryln.s:552    .text:000000000000023c .L0 
     /tmp/ccoJryln.s:559    .text:0000000000000240 .L0 
     /tmp/ccoJryln.s:560    .text:0000000000000240 .L0 
     /tmp/ccoJryln.s:566    .text:0000000000000254 .L0 
     /tmp/ccoJryln.s:567    .text:0000000000000254 .L0 
     /tmp/ccoJryln.s:573    .text:0000000000000268 .L0 
     /tmp/ccoJryln.s:574    .text:0000000000000268 .L0 
     /tmp/ccoJryln.s:579    .text:000000000000027c .L0 
     /tmp/ccoJryln.s:585    .text:000000000000027c _ZN5Riscv20handleTimerInterruptEv
     /tmp/ccoJryln.s:588    .text:000000000000027c .L0 
     /tmp/ccoJryln.s:589    .text:000000000000027c .L0 
     /tmp/ccoJryln.s:590    .text:0000000000000280 .L0 
     /tmp/ccoJryln.s:592    .text:0000000000000284 .L0 
     /tmp/ccoJryln.s:594    .text:0000000000000288 .L0 
     /tmp/ccoJryln.s:599    .text:0000000000000288 .L0 
     /tmp/ccoJryln.s:600    .text:0000000000000288 .L0 
     /tmp/ccoJryln.s:601    .text:0000000000000288 .L0 
     /tmp/ccoJryln.s:613    .text:0000000000000290 .L0 
     /tmp/ccoJryln.s:614    .text:0000000000000290 .L0 
     /tmp/ccoJryln.s:615    .text:0000000000000290 .L0 
  src/../h/riscv.hpp:119    .text:0000000000000290 .L0 
     /tmp/ccoJryln.s:623    .text:0000000000000298 .L0 
     /tmp/ccoJryln.s:624    .text:0000000000000298 .L0 
     /tmp/ccoJryln.s:628    .text:000000000000029c .L0 
     /tmp/ccoJryln.s:632    .text:00000000000002a0 .L0 
     /tmp/ccoJryln.s:633    .text:00000000000002a0 .L0 
     /tmp/ccoJryln.s:634    .text:00000000000002a0 .L0 
  src/../h/riscv.hpp:187    .text:00000000000002a0 .L0 
     /tmp/ccoJryln.s:642    .text:00000000000002a8 .L0 
     /tmp/ccoJryln.s:643    .text:00000000000002a8 .L0 
     /tmp/ccoJryln.s:647    .text:00000000000002ac .L0 
     /tmp/ccoJryln.s:649    .text:00000000000002b0 .L0 
     /tmp/ccoJryln.s:650    .text:00000000000002b0 .L0 
     /tmp/ccoJryln.s:655    .text:00000000000002b4 .L0 
  src/../h/riscv.hpp:193    .text:00000000000002b4 .L0 
     /tmp/ccoJryln.s:665    .text:00000000000002b8 .L0 
     /tmp/ccoJryln.s:666    .text:00000000000002b8 .L0 
     /tmp/ccoJryln.s:671    .text:00000000000002bc .L0 
  src/../h/riscv.hpp:125    .text:00000000000002bc .L0 
     /tmp/ccoJryln.s:681    .text:00000000000002c0 .L0 
     /tmp/ccoJryln.s:682    .text:00000000000002c4 .L0 
     /tmp/ccoJryln.s:683    .text:00000000000002c4 .L0 
     /tmp/ccoJryln.s:685    .text:00000000000002c8 .L0 
     /tmp/ccoJryln.s:687    .text:00000000000002cc .L0 
     /tmp/ccoJryln.s:693    .text:00000000000002cc _ZN5Riscv22handleConsoleInterruptEv
     /tmp/ccoJryln.s:696    .text:00000000000002cc .L0 
     /tmp/ccoJryln.s:697    .text:00000000000002cc .L0 
     /tmp/ccoJryln.s:698    .text:00000000000002d0 .L0 
     /tmp/ccoJryln.s:701    .text:00000000000002d8 .L0 
     /tmp/ccoJryln.s:702    .text:00000000000002d8 .L0 
     /tmp/ccoJryln.s:704    .text:00000000000002dc .L0 
     /tmp/ccoJryln.s:706    .text:00000000000002dc .L0 
     /tmp/ccoJryln.s:707    .text:00000000000002dc .L0 
GAS LISTING /tmp/ccoJryln.s 			page 28


     /tmp/ccoJryln.s:710    .text:00000000000002e4 .L0 
     /tmp/ccoJryln.s:711    .text:00000000000002e8 .L0 
     /tmp/ccoJryln.s:713    .text:00000000000002ec .L0 
     /tmp/ccoJryln.s:714    .text:00000000000002ec .L0 
     /tmp/ccoJryln.s:716    .text:00000000000002f0 .L0 
     /tmp/ccoJryln.s:718    .text:00000000000002f4 .L0 
     /tmp/ccoJryln.s:724    .text:00000000000002f4 _ZN5Riscv14handleBadCauseEv
     /tmp/ccoJryln.s:727    .text:00000000000002f4 .L0 
     /tmp/ccoJryln.s:728    .text:00000000000002f4 .L0 
     /tmp/ccoJryln.s:729    .text:00000000000002f8 .L0 
     /tmp/ccoJryln.s:731    .text:00000000000002fc .L0 
     /tmp/ccoJryln.s:733    .text:0000000000000300 .L0 
     /tmp/ccoJryln.s:735    .text:0000000000000300 .L0 
     /tmp/ccoJryln.s:736    .text:0000000000000304 .L0 
     /tmp/ccoJryln.s:737    .text:0000000000000304 .L0 
     /tmp/ccoJryln.s:739    .text:0000000000000308 .L0 
     /tmp/ccoJryln.s:741    .text:000000000000030c .L0 
     /tmp/ccoJryln.s:750    .text:000000000000030c .L0 
     /tmp/ccoJryln.s:53     .rodata.str1.8:0000000000000058 .LC3
     /tmp/ccoJryln.s:120    .text:0000000000000064 .L0 
     /tmp/ccoJryln.s:56     .rodata.str1.8:0000000000000068 .LC4
     /tmp/ccoJryln.s:130    .text:0000000000000080 .L0 
     /tmp/ccoJryln.s:59     .rodata.str1.8:0000000000000070 .LC5
     /tmp/ccoJryln.s:135    .text:0000000000000090 .L0 
     /tmp/ccoJryln.s:160    .text:00000000000000b4 .L0 
     /tmp/ccoJryln.s:62     .rodata.str1.8:0000000000000078 .LC6
     /tmp/ccoJryln.s:165    .text:00000000000000c4 .L0 
     /tmp/ccoJryln.s:190    .text:00000000000000e8 .L0 
     /tmp/ccoJryln.s:281    .rodata:0000000000000000 .L8
     /tmp/ccoJryln.s:273    .text:0000000000000148 .L0 
     /tmp/ccoJryln.s:522    .text:0000000000000208 .L0 
     /tmp/ccoJryln.s:44     .rodata.str1.8:0000000000000000 .LC0
     /tmp/ccoJryln.s:560    .text:0000000000000240 .L0 
     /tmp/ccoJryln.s:47     .rodata.str1.8:0000000000000018 .LC1
     /tmp/ccoJryln.s:567    .text:0000000000000254 .L0 
     /tmp/ccoJryln.s:50     .rodata.str1.8:0000000000000038 .LC2
     /tmp/ccoJryln.s:574    .text:0000000000000268 .L0 
     /tmp/ccoJryln.s:209    .text:000000000000010c .L24
     /tmp/ccoJryln.s:554    .text:0000000000000240 .L25
     /tmp/ccoJryln.s:564    .text:0000000000000254 .L26
     /tmp/ccoJryln.s:571    .text:0000000000000268 .L27
     /tmp/ccoJryln.s:304    .text:0000000000000160 .L5
     /tmp/ccoJryln.s:381    .text:00000000000001a0 .L6
     /tmp/ccoJryln.s:193    .text:00000000000000f8 .L3
     /tmp/ccoJryln.s:508    .text:00000000000001f8 .L21
     /tmp/ccoJryln.s:513    .text:0000000000000200 .L22
     /tmp/ccoJryln.s:487    .text:00000000000001e0 .L14
     /tmp/ccoJryln.s:496    .text:00000000000001f0 .L15
     /tmp/ccoJryln.s:532    .text:0000000000000228 .L28
     /tmp/ccoJryln.s:117    .text:0000000000000064 .L19
     /tmp/ccoJryln.s:355    .text:000000000000018c .L12
     /tmp/ccoJryln.s:423    .text:00000000000001b8 .L11
     /tmp/ccoJryln.s:451    .text:00000000000001cc .L10
     /tmp/ccoJryln.s:518    .text:0000000000000208 .L9
     /tmp/ccoJryln.s:545    .text:0000000000000234 .L7
     /tmp/ccoJryln.s:1948   .debug_abbrev:0000000000000000 .Ldebug_abbrev0
     /tmp/ccoJryln.s:3180   .debug_str:00000000000005cf .LASF111
GAS LISTING /tmp/ccoJryln.s 			page 29


     /tmp/ccoJryln.s:3128   .debug_str:0000000000000438 .LASF112
     /tmp/ccoJryln.s:3212   .debug_str:000000000000079b .LASF113
     /tmp/ccoJryln.s:5      .text:0000000000000000 .Ltext0
     /tmp/ccoJryln.s:744    .text:000000000000030c .Letext0
     /tmp/ccoJryln.s:2972   .debug_line:0000000000000000 .Ldebug_line0
     /tmp/ccoJryln.s:3104   .debug_str:00000000000003ab .LASF0
     /tmp/ccoJryln.s:3122   .debug_str:00000000000003fd .LASF1
     /tmp/ccoJryln.s:3090   .debug_str:0000000000000334 .LASF2
     /tmp/ccoJryln.s:3072   .debug_str:00000000000002d7 .LASF4
     /tmp/ccoJryln.s:3158   .debug_str:000000000000052a .LASF3
     /tmp/ccoJryln.s:2998   .debug_str:00000000000000b5 .LASF5
     /tmp/ccoJryln.s:3126   .debug_str:0000000000000425 .LASF6
     /tmp/ccoJryln.s:3102   .debug_str:0000000000000398 .LASF7
     /tmp/ccoJryln.s:3188   .debug_str:00000000000006cf .LASF8
     /tmp/ccoJryln.s:3060   .debug_str:000000000000027f .LASF9
     /tmp/ccoJryln.s:3136   .debug_str:000000000000047f .LASF10
     /tmp/ccoJryln.s:3182   .debug_str:0000000000000693 .LASF11
     /tmp/ccoJryln.s:3000   .debug_str:00000000000000bc .LASF12
     /tmp/ccoJryln.s:2978   .debug_str:0000000000000022 .LASF13
     /tmp/ccoJryln.s:3014   .debug_str:0000000000000135 .LASF14
     /tmp/ccoJryln.s:3152   .debug_str:00000000000004f6 .LASF15
     /tmp/ccoJryln.s:3020   .debug_str:0000000000000162 .LASF16
     /tmp/ccoJryln.s:3118   .debug_str:00000000000003ec .LASF68
     /tmp/ccoJryln.s:3082   .debug_str:00000000000002fd .LASF114
     /tmp/ccoJryln.s:3168   .debug_str:0000000000000585 .LASF17
     /tmp/ccoJryln.s:3116   .debug_str:00000000000003e3 .LASF18
     /tmp/ccoJryln.s:3078   .debug_str:00000000000002ec .LASF19
     /tmp/ccoJryln.s:3150   .debug_str:00000000000004eb .LASF20
     /tmp/ccoJryln.s:3204   .debug_str:0000000000000764 .LASF22
     /tmp/ccoJryln.s:2994   .debug_str:000000000000009f .LASF21
     /tmp/ccoJryln.s:3036   .debug_str:00000000000001f7 .LASF23
     /tmp/ccoJryln.s:3170   .debug_str:000000000000058e .LASF24
     /tmp/ccoJryln.s:2976   .debug_str:0000000000000008 .LASF25
     /tmp/ccoJryln.s:3162   .debug_str:0000000000000543 .LASF26
     /tmp/ccoJryln.s:3008   .debug_str:0000000000000104 .LASF27
     /tmp/ccoJryln.s:2980   .debug_str:0000000000000032 .LASF28
     /tmp/ccoJryln.s:3040   .debug_str:000000000000021a .LASF30
     /tmp/ccoJryln.s:3032   .debug_str:00000000000001df .LASF32
     /tmp/ccoJryln.s:3030   .debug_str:00000000000001ca .LASF34
     /tmp/ccoJryln.s:3160   .debug_str:000000000000053c .LASF29
     /tmp/ccoJryln.s:3142   .debug_str:00000000000004bd .LASF31
     /tmp/ccoJryln.s:3178   .debug_str:00000000000005c8 .LASF33
     /tmp/ccoJryln.s:3174   .debug_str:00000000000005a3 .LASF35
     /tmp/ccoJryln.s:3050   .debug_str:0000000000000262 .LASF36
     /tmp/ccoJryln.s:3022   .debug_str:0000000000000178 .LASF37
     /tmp/ccoJryln.s:2974   .debug_str:0000000000000000 .LASF38
     /tmp/ccoJryln.s:3066   .debug_str:00000000000002a8 .LASF39
     /tmp/ccoJryln.s:2996   .debug_str:00000000000000ad .LASF40
     /tmp/ccoJryln.s:3006   .debug_str:00000000000000f0 .LASF41
     /tmp/ccoJryln.s:3210   .debug_str:0000000000000793 .LASF42
     /tmp/ccoJryln.s:3042   .debug_str:000000000000022f .LASF43
     /tmp/ccoJryln.s:3106   .debug_str:00000000000003b8 .LASF44
     /tmp/ccoJryln.s:3202   .debug_str:0000000000000751 .LASF45
     /tmp/ccoJryln.s:2992   .debug_str:0000000000000098 .LASF46
     /tmp/ccoJryln.s:3048   .debug_str:000000000000024f .LASF47
     /tmp/ccoJryln.s:3058   .debug_str:0000000000000279 .LASF48
     /tmp/ccoJryln.s:3176   .debug_str:00000000000005b6 .LASF49
GAS LISTING /tmp/ccoJryln.s 			page 30


     /tmp/ccoJryln.s:2990   .debug_str:0000000000000092 .LASF50
     /tmp/ccoJryln.s:3216   .debug_str:00000000000007cb .LASF51
     /tmp/ccoJryln.s:3208   .debug_str:0000000000000788 .LASF52
     /tmp/ccoJryln.s:3156   .debug_str:0000000000000512 .LASF53
     /tmp/ccoJryln.s:3120   .debug_str:00000000000003f2 .LASF54
     /tmp/ccoJryln.s:3084   .debug_str:0000000000000308 .LASF55
     /tmp/ccoJryln.s:3012   .debug_str:000000000000012b .LASF56
     /tmp/ccoJryln.s:3070   .debug_str:00000000000002c1 .LASF57
     /tmp/ccoJryln.s:3096   .debug_str:0000000000000355 .LASF58
     /tmp/ccoJryln.s:3064   .debug_str:0000000000000292 .LASF59
     /tmp/ccoJryln.s:3110   .debug_str:00000000000003c8 .LASF60
     /tmp/ccoJryln.s:3196   .debug_str:0000000000000709 .LASF62
     /tmp/ccoJryln.s:3124   .debug_str:0000000000000410 .LASF61
     /tmp/ccoJryln.s:3132   .debug_str:0000000000000451 .LASF63
     /tmp/ccoJryln.s:3166   .debug_str:000000000000056e .LASF64
     /tmp/ccoJryln.s:2988   .debug_str:000000000000006e .LASF65
     /tmp/ccoJryln.s:3034   .debug_str:00000000000001e8 .LASF66
     /tmp/ccoJryln.s:3164   .debug_str:0000000000000552 .LASF67
     /tmp/ccoJryln.s:3172   .debug_str:000000000000059b .LASF69
     /tmp/ccoJryln.s:2986   .debug_str:0000000000000066 .LASF115
     /tmp/ccoJryln.s:3004   .debug_str:00000000000000e7 .LASF70
     /tmp/ccoJryln.s:3192   .debug_str:00000000000006eb .LASF72
     /tmp/ccoJryln.s:3130   .debug_str:0000000000000446 .LASF116
     /tmp/ccoJryln.s:3186   .debug_str:00000000000006b4 .LASF117
     /tmp/ccoJryln.s:3092   .debug_str:0000000000000342 .LASF71
     /tmp/ccoJryln.s:3002   .debug_str:00000000000000cc .LASF73
     /tmp/ccoJryln.s:3148   .debug_str:00000000000004dd .LASF74
     /tmp/ccoJryln.s:3200   .debug_str:0000000000000729 .LASF75
     /tmp/ccoJryln.s:3146   .debug_str:00000000000004d8 .LASF90
     /tmp/ccoJryln.s:3154   .debug_str:000000000000050c .LASF76
     /tmp/ccoJryln.s:2982   .debug_str:000000000000003b .LASF77
     /tmp/ccoJryln.s:3038   .debug_str:0000000000000212 .LASF118
     /tmp/ccoJryln.s:3134   .debug_str:0000000000000473 .LASF78
     /tmp/ccoJryln.s:3016   .debug_str:0000000000000141 .LASF79
     /tmp/ccoJryln.s:3138   .debug_str:000000000000048e .LASF119
     /tmp/ccoJryln.s:3024   .debug_str:000000000000018c .LASF80
     /tmp/ccoJryln.s:3076   .debug_str:00000000000002e7 .LASF81
     /tmp/ccoJryln.s:3018   .debug_str:000000000000015c .LASF82
     /tmp/ccoJryln.s:3080   .debug_str:00000000000002f5 .LASF83
     /tmp/ccoJryln.s:3074   .debug_str:00000000000002de .LASF84
     /tmp/ccoJryln.s:3194   .debug_str:00000000000006fb .LASF120
     /tmp/ccoJryln.s:3100   .debug_str:000000000000036c .LASF121
     /tmp/ccoJryln.s:3088   .debug_str:0000000000000326 .LASF85
     /tmp/ccoJryln.s:3140   .debug_str:00000000000004a0 .LASF86
     /tmp/ccoJryln.s:3108   .debug_str:00000000000003bf .LASF87
     /tmp/ccoJryln.s:2984   .debug_str:000000000000004f .LASF88
     /tmp/ccoJryln.s:3044   .debug_str:0000000000000243 .LASF89
     /tmp/ccoJryln.s:725    .text:00000000000002f4 .LFB25
     /tmp/ccoJryln.s:742    .text:000000000000030c .LFE25
     /tmp/ccoJryln.s:694    .text:00000000000002cc .LFB24
     /tmp/ccoJryln.s:719    .text:00000000000002f4 .LFE24
     /tmp/ccoJryln.s:708    .text:00000000000002e4 .LVL56
     /tmp/ccoJryln.s:586    .text:000000000000027c .LFB23
     /tmp/ccoJryln.s:688    .text:00000000000002cc .LFE23
     /tmp/ccoJryln.s:3112   .debug_str:00000000000003d6 .LASF91
     /tmp/ccoJryln.s:3144   .debug_str:00000000000004d0 .LASF92
     /tmp/ccoJryln.s:597    .text:0000000000000288 .LBB51
GAS LISTING /tmp/ccoJryln.s 			page 31


     /tmp/ccoJryln.s:609    .text:0000000000000290 .LBE51
     /tmp/ccoJryln.s:2763   .debug_loc:0000000000000000 .LLST15
     /tmp/ccoJryln.s:611    .text:0000000000000290 .LBB53
     /tmp/ccoJryln.s:626    .text:000000000000029c .LBE53
     /tmp/ccoJryln.s:630    .text:00000000000002a0 .LBB55
     /tmp/ccoJryln.s:645    .text:00000000000002ac .LBE55
     /tmp/ccoJryln.s:652    .text:00000000000002b4 .LBB57
     /tmp/ccoJryln.s:663    .text:00000000000002b8 .LBE57
     /tmp/ccoJryln.s:2771   .debug_loc:0000000000000024 .LLST16
     /tmp/ccoJryln.s:668    .text:00000000000002bc .LBB59
     /tmp/ccoJryln.s:679    .text:00000000000002c0 .LBE59
     /tmp/ccoJryln.s:2778   .debug_loc:0000000000000047 .LLST17
     /tmp/ccoJryln.s:69     .text:0000000000000020 .LFB22
     /tmp/ccoJryln.s:580    .text:000000000000027c .LFE22
     /tmp/ccoJryln.s:3046   .debug_str:0000000000000248 .LASF93
     /tmp/ccoJryln.s:2785   .debug_loc:000000000000006a .LLST0
     /tmp/ccoJryln.s:212    .text:000000000000010c .LBB37
     /tmp/ccoJryln.s:557    .text:0000000000000240 .LBE37
     /tmp/ccoJryln.s:3114   .debug_str:00000000000003db .LASF94
     /tmp/ccoJryln.s:2796   .debug_loc:00000000000000a0 .LLST1
     /tmp/ccoJryln.s:3068   .debug_str:00000000000002bc .LASF95
     /tmp/ccoJryln.s:2807   .debug_loc:00000000000000d6 .LLST2
     /tmp/ccoJryln.s:2822   .debug_loc:0000000000000110 .LLST3
     /tmp/ccoJryln.s:2848   .debug_loc:0000000000000182 .LLST4
     /tmp/ccoJryln.s:2964   .debug_ranges:0000000000000000 .Ldebug_ranges0
     /tmp/ccoJryln.s:3094   .debug_str:000000000000034e .LASF96
     /tmp/ccoJryln.s:2865   .debug_loc:00000000000001cd .LLST5
     /tmp/ccoJryln.s:2876   .debug_loc:0000000000000203 .LLST6
     /tmp/ccoJryln.s:2887   .debug_loc:0000000000000239 .LLST7
     /tmp/ccoJryln.s:3214   .debug_str:00000000000007bf .LASF97
     /tmp/ccoJryln.s:2898   .debug_loc:000000000000026f .LLST8
     /tmp/ccoJryln.s:3052   .debug_str:000000000000026a .LASF98
     /tmp/ccoJryln.s:2905   .debug_loc:0000000000000292 .LLST9
     /tmp/ccoJryln.s:3054   .debug_str:000000000000026f .LASF99
     /tmp/ccoJryln.s:2916   .debug_loc:00000000000002c8 .LLST10
     /tmp/ccoJryln.s:3056   .debug_str:0000000000000274 .LASF100
     /tmp/ccoJryln.s:2923   .debug_loc:00000000000002eb .LLST11
     /tmp/ccoJryln.s:3198   .debug_str:0000000000000724 .LASF101
     /tmp/ccoJryln.s:2930   .debug_loc:000000000000030e .LLST12
     /tmp/ccoJryln.s:371    .text:000000000000019c .LVL24
     /tmp/ccoJryln.s:440    .text:00000000000001c4 .LVL31
     /tmp/ccoJryln.s:491    .text:00000000000001e8 .LVL37
     /tmp/ccoJryln.s:530    .text:0000000000000224 .LVL42
     /tmp/ccoJryln.s:550    .text:000000000000023c .LVL45
     /tmp/ccoJryln.s:214    .text:000000000000010c .LBB38
     /tmp/ccoJryln.s:229    .text:0000000000000118 .LBE38
     /tmp/ccoJryln.s:235    .text:0000000000000120 .LBB40
     /tmp/ccoJryln.s:250    .text:000000000000012c .LBE40
     /tmp/ccoJryln.s:395    .text:00000000000001a8 .LBB45
     /tmp/ccoJryln.s:406    .text:00000000000001ac .LBE45
     /tmp/ccoJryln.s:2937   .debug_loc:0000000000000331 .LLST13
     /tmp/ccoJryln.s:411    .text:00000000000001b0 .LBB47
     /tmp/ccoJryln.s:425    .text:00000000000001b8 .LBE47
     /tmp/ccoJryln.s:2944   .debug_loc:0000000000000354 .LLST14
     /tmp/ccoJryln.s:83     .text:0000000000000034 .LBB30
     /tmp/ccoJryln.s:100    .text:0000000000000040 .LBE30
     /tmp/ccoJryln.s:139    .text:00000000000000a0 .LBB33
GAS LISTING /tmp/ccoJryln.s 			page 32


     /tmp/ccoJryln.s:154    .text:00000000000000ac .LBE33
     /tmp/ccoJryln.s:169    .text:00000000000000d4 .LBB35
     /tmp/ccoJryln.s:184    .text:00000000000000e0 .LBE35
     /tmp/ccoJryln.s:122    .text:0000000000000074 .LVL1
     /tmp/ccoJryln.s:127    .text:0000000000000080 .LVL2
     /tmp/ccoJryln.s:132    .text:0000000000000090 .LVL3
     /tmp/ccoJryln.s:137    .text:00000000000000a0 .LVL4
     /tmp/ccoJryln.s:157    .text:00000000000000b4 .LVL5
     /tmp/ccoJryln.s:162    .text:00000000000000c4 .LVL6
     /tmp/ccoJryln.s:167    .text:00000000000000d4 .LVL7
     /tmp/ccoJryln.s:187    .text:00000000000000e8 .LVL8
     /tmp/ccoJryln.s:192    .text:00000000000000f8 .LVL9
     /tmp/ccoJryln.s:562    .text:0000000000000250 .LVL47
     /tmp/ccoJryln.s:569    .text:0000000000000264 .LVL48
     /tmp/ccoJryln.s:576    .text:0000000000000278 .LVL49
     /tmp/ccoJryln.s:10     .text:0000000000000000 .LFB21
     /tmp/ccoJryln.s:40     .text:0000000000000020 .LFE21
     /tmp/ccoJryln.s:3062   .debug_str:000000000000028d .LASF102
     /tmp/ccoJryln.s:3086   .debug_str:0000000000000320 .LASF103
     /tmp/ccoJryln.s:3028   .debug_str:00000000000001ba .LASF104
     /tmp/ccoJryln.s:3190   .debug_str:00000000000006df .LASF105
     /tmp/ccoJryln.s:3010   .debug_str:0000000000000120 .LASF106
     /tmp/ccoJryln.s:3026   .debug_str:00000000000001a7 .LASF107
     /tmp/ccoJryln.s:3206   .debug_str:000000000000077c .LASF108
     /tmp/ccoJryln.s:3184   .debug_str:00000000000006a2 .LASF109
     /tmp/ccoJryln.s:3098   .debug_str:000000000000035f .LASF110
     /tmp/ccoJryln.s:596    .text:0000000000000288 .LVL50
     /tmp/ccoJryln.s:606    .text:0000000000000290 .LVL51
     /tmp/ccoJryln.s:651    .text:00000000000002b4 .LVL52
     /tmp/ccoJryln.s:660    .text:00000000000002b8 .LVL53
     /tmp/ccoJryln.s:667    .text:00000000000002bc .LVL54
     /tmp/ccoJryln.s:676    .text:00000000000002c0 .LVL55
     /tmp/ccoJryln.s:98     .text:0000000000000040 .LVL0
     /tmp/ccoJryln.s:204    .text:0000000000000104 .LVL10
     /tmp/ccoJryln.s:208    .text:000000000000010c .LVL11
     /tmp/ccoJryln.s:260    .text:0000000000000134 .LVL12
     /tmp/ccoJryln.s:272    .text:0000000000000148 .LVL13
     /tmp/ccoJryln.s:303    .text:0000000000000160 .LVL14
     /tmp/ccoJryln.s:322    .text:0000000000000170 .LVL16
     /tmp/ccoJryln.s:363    .text:0000000000000190 .LVL22
     /tmp/ccoJryln.s:369    .text:0000000000000194 .LVL23
     /tmp/ccoJryln.s:379    .text:00000000000001a0 .LVL25
     /tmp/ccoJryln.s:422    .text:00000000000001b8 .LVL29
     /tmp/ccoJryln.s:435    .text:00000000000001bc .LVL30
     /tmp/ccoJryln.s:450    .text:00000000000001cc .LVL32
     /tmp/ccoJryln.s:553    .text:0000000000000240 .LVL46
     /tmp/ccoJryln.s:497    .text:00000000000001f0 .LVL38
     /tmp/ccoJryln.s:507    .text:00000000000001f8 .LVL39
     /tmp/ccoJryln.s:534    .text:0000000000000228 .LVL43
     /tmp/ccoJryln.s:544    .text:0000000000000234 .LVL44
     /tmp/ccoJryln.s:512    .text:0000000000000200 .LVL40
     /tmp/ccoJryln.s:517    .text:0000000000000208 .LVL41
     /tmp/ccoJryln.s:469    .text:00000000000001d4 .LVL34
     /tmp/ccoJryln.s:475    .text:00000000000001d8 .LVL35
     /tmp/ccoJryln.s:485    .text:00000000000001e0 .LVL36
     /tmp/ccoJryln.s:316    .text:000000000000016c .LVL15
     /tmp/ccoJryln.s:344    .text:0000000000000184 .LVL20
GAS LISTING /tmp/ccoJryln.s 			page 33


     /tmp/ccoJryln.s:354    .text:000000000000018c .LVL21
     /tmp/ccoJryln.s:339    .text:000000000000017c .LVL19
     /tmp/ccoJryln.s:328    .text:0000000000000174 .LVL17
     /tmp/ccoJryln.s:334    .text:0000000000000178 .LVL18
     /tmp/ccoJryln.s:394    .text:00000000000001a8 .LVL26
     /tmp/ccoJryln.s:403    .text:00000000000001ac .LVL27
     /tmp/ccoJryln.s:410    .text:00000000000001b0 .LVL28
     /tmp/ccoJryln.s:751    .debug_info:0000000000000000 .Ldebug_info0
     /tmp/ccoJryln.s:307    .text:0000000000000168 .LBB43
     /tmp/ccoJryln.s:382    .text:00000000000001a0 .LBE43
     /tmp/ccoJryln.s:427    .text:00000000000001b8 .LBB44
     /tmp/ccoJryln.s:555    .text:0000000000000240 .LBE44

UNDEFINED SYMBOLS
_Z11printStringPKc
_Z12printIntegerm
__mem_alloc
__mem_free
_ZN7kThread13createProcessEPFvPvES0_S0_
_ZN7kThread7runningE
_ZN7kThread11kThreadExitEv
_ZN7kThread5yieldEv
console_handler
